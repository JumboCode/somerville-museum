"use client";
/**
 * @fileoverview Contains dummy page for /settings
 * 
 * @file settings/page.jsx
 * @date 16 February, 2025
 * @authors Arietta M. Goshtasby & Shayne Sidman
 *  
 */
import { useClerk } from "@clerk/nextjs";
import SettingsPage from "../components/SettingsPage";
import "../components/SettingsPage.css"
import React, { useState, useEffect } from 'react';
import './settings.css';
import { useGlobalContext } from '../components/contexts/ToggleContext';

const Settings = () => {
  const { signOut } = useClerk();
  const { isToggleEnabled, setIsToggleEnabled } = useGlobalContext();
  const [fading, setFading] = useState(false);
  const [displayText, setDisplayText] = useState(isToggleEnabled ? 'Data Input' : 'Normal Data Entry');

  const handleToggle = () => {
    setFading(true);

    // Directly use the current state to toggle
    const newToggleState = !isToggleEnabled;
    setIsToggleEnabled(newToggleState);

    // Wait for fade out to complete before changing the text
    setTimeout(() => {
      setDisplayText(newToggleState ? 'Data Input' : 'Normal Data Entry');
      setTimeout(() => {
        setFading(false);
      }, 25);
    }, 100);
  };

  return (
    <div className="container">
        {/* <div className="wrapper">
            <label className="toggleWrapper">
            <input 
                type="checkbox"
                checked={isToggleEnabled}
                onChange={handleToggle}
                className="toggleInput"
            />
            <span className="toggleSlider"></span>
            </label>
            <span className={`toggleLabel ${fading ? 'fading' : ''}`}>
              {displayText}
            </span>
            <div onClick={()=> {signOut({ redirectUrl: '/' })}}></div>
        </div> */}
        <div className="settings-page">
          <SettingsPage />
        </div>
    </div>
  );
};

export default Settings;

/**
 * @fileoverview Contains layout and logic for the signup confirmed page. Page 
 * is not currently being used for anything b/c of how clerk handles creating accounts.
 * 
 * @file signup_confirmed/page.jsx
 * @date 16 February, 2025
 * @authors Ari Goshtasby & Shayne Sidman
 *  
 */

"use client";

import '../app.css';
import { useRouter } from 'next/navigation'; 

export default function ConfirmSignup() {
  const router = useRouter();
  return (
    <div className={'login-bg'}>
      <div className="confirmContainer">
        <div>Thank you for signing up!</div>
        <br />
        <div className={'bodyConfirmContainer'}>
          Somerville Museum will verify your account. You will receive an email when verified.
        </div>
        <input
          className={'returnButton'}
          style={{ marginTop: "5vh" }}
          type="button"
          onClick={() => {router.push("/login")}}
          value={'Back to Login'}
        />
      </div>
    </div>
  );
}
/**
 * @fileoverview Page that shows inventory overview and general statistics.
 * 
 * @file Layout.jsx
 * @date January 12th, 2025
 * @authors Entire Somerville Museum Team
 *  
 */
import './globals.css'
import './components/Popup.css';
import './inventory/inventory.css';
import { ClerkProvider } from '@clerk/nextjs'
import { FilterProvider } from './components/contexts/FilterContext';
import { GlobalProvider } from './components/contexts/ToggleContext';
import AppShell from './components/AppShell';

export const metadata = {
  title: 'Database',
  description: 'Database for the Somerville Museum',
  icons: {
    icon: [
      { url: '/sm-logo.svg', type: 'image/svg+xml' },
      { url: '/sm-logo.png', type: 'image/png' },
    ],
  },
};

export default function RootLayout({ children }) {
  return (
    <ClerkProvider>
      <FilterProvider>
        <GlobalProvider>
          <html lang="en">
            <body>
              <AppShell>{children}</AppShell>
            </body>
          </html>
        </GlobalProvider>
      </FilterProvider>
    </ClerkProvider>
  );
}
/**
 * @fileoverview Contains layout and logic for the reset password page with a custom clerk flow.
 * 
 * @file reset_password/page.jsx
 * @date 16 February, 2025
 * @authors Ari Goshtasby & Shayne Sidman
 *  
 */

 "use client"

 import { useState } from 'react'
 import { useRouter } from 'next/navigation'
 import { useSignIn } from '@clerk/nextjs'
 import Image from "next/image"
 import '../app.css'
 
 export default function ResetPassword () {
     const [email, setEmail] = useState("");
     const [password, setPassword] = useState('');
     const [confirmPassword, setConfirmPassword] = useState('');
     const [code, setCode] = useState('');
     const [step, setStep] = useState(1); // 1 = Enter email, 2 = Enter code + password
     const [error, setError] = useState('');
 
     const router = useRouter();
     const { isLoaded, signIn, setActive } = useSignIn();
 
     if (!isLoaded) return null;
 
     const containsUppercaseAndSymbol = (str) => {
       return /[A-Z]/.test(str) && /[^a-zA-Z0-9]/.test(str);
     }
 
     const resetFields = () => {
       setPassword('');
       setConfirmPassword('');
       setCode('');
     }
 
     // Step 1: Send reset password code to user email
     async function requestPasswordReset(e) {
       e.preventDefault();
       
       try {
         await signIn.create({
           strategy: 'reset_password_email_code',
           identifier: email,
         });
         setStep(2); // Move to the next step
       } catch (err) {
         setError(err.errors[0]?.longMessage || "Something went wrong.");
       }
     }
 
     // Step 2: Verify code & set new password
     async function resetPassword(e) {
       e.preventDefault();
 
       if (password.length < 9 || !containsUppercaseAndSymbol(password)) {
         setError('Password must be at least 9 characters with an uppercase letter and a symbol.');
         resetFields();
         return;
       }
       if (password !== confirmPassword) {
         setError('Passwords do not match.');
         resetFields();
         return;
       }
 
       try {
         const result = await signIn.attemptFirstFactor({
           strategy: 'reset_password_email_code',
           code,
           password,
         });
 
         setActive({ session: result.createdSessionId });
         router.push("/reset_confirmed"); // Redirect after success
       } catch (err) {
         setError('Invalid code. Try again.');
         resetFields();
       }
     }
 
     return (
       <div className="login-bg">
         <div className="reset-password-container">
           <div className="back-to-login" onClick={() => router.push("/login")}>&lt; Back to Login</div>
           <div className="titleContainer">
             <div className="SMLogo sm-logo-small">
               <Image src="/SM_LOGO.svg" alt="Logo" fill />
             </div>
             <div className="clothing-database-small">CLOTHING DATABASE</div>
           </div>
 
           <div className="reset-password-text">
             <div className="password-text-larger">Reset Password</div>
             {step === 1 ? (
               <div>Please enter your email to receive a reset code.</div>
             ) : (
               <div>Enter the reset code sent to your email and set a new password.</div>
             )}
           </div>
 
           {error && <div className="error-message">{error}</div>}
 
           {step === 1 && (
             <>
               <div className="inputContainer">
                 <input
                   value={email}
                   placeholder="Email"
                   onChange={(e) => setEmail(e.target.value)}
                   className="inputBox"
                 />
               </div>
               <div className="inputContainer bottom">
                 <button className="inputButton" onClick={requestPasswordReset}>Send Reset Code</button>
               </div>
             </>
           )}
 
           {step === 2 && (
             <>
               <div className="inputContainer">
                 <input
                   value={code}
                   placeholder="Reset Code"
                   onChange={(e) => setCode(e.target.value)}
                   className="inputBox"
                 />
               </div>
               <div className="inputContainer">
                 <input
                   type="password"
                   value={password}
                   placeholder="New Password"
                   onChange={(e) => setPassword(e.target.value)}
                   className="inputBox"
                 />
               </div>
               <div className="inputContainer">
                 <input
                   type="password"
                   value={confirmPassword}
                   placeholder="Confirm Password"
                   onChange={(e) => setConfirmPassword(e.target.value)}
                   className="inputBox"
                 />
               </div>
               <div className='inputContainer'>
                 <button className='inputButton' onClick={resetPassword}>Reset Password</button>
               </div>
             </>
           )}
         </div>
       </div>
     );
 }
 "use client";

import "./app.css"
import "./globals.css"
import Image from "next/image";
import { useRouter } from 'next/navigation';

const App = () => {
  const router = useRouter();

  return (
    <div className={'login-bg'}>
      <div className="mainContainer">
      <div className="titleContainer">
        <div className="SMLogo sm-logo-large">
          <Image src="/SM_LOGO.svg" alt="No image found" fill />
        </div>
        <div className="clothing-database">CLOTHING DATABASE</div>
      </div>
        <div className={'buttonContainer'}>
          <input
            className={'inputButton'}
            type="button"
            onClick={() => router.push('/login')}
            value='Log in'
          />
        </div>
      </div>
    </div>
  );
};

export default App;
'use client'

import { useState, useEffect } from 'react'
import { useSignUp, useAuth } from '@clerk/nextjs'
import { useRouter } from 'next/navigation'
import Image from "next/image";
import Eyecon from "../components/Eyecon";
import EyeconOff from "../components/EyeconOff";
import "../app.css"

export default function SignUp() {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [passType, setPassType] = useState('password');
  const [eyeColor, setEyeColor] = useState('#9B525F');
  const [error, setError] = useState('');
  const [errorBG, setErrorBG] = useState('#FFFFFF');
  const [errorBorder, setErrorBorder] = useState('#9B525F');
  const [verifying, setVerifying] = useState(false)
  const [code, setCode] = useState('')

  const [hasUppercase, setHasUppercase] = useState(false);
  const [hasSpecialChar, setHasSpecialChar] = useState(false);
  const [isLongEnough, setIsLongEnough] = useState(false);

  const { isLoaded, signUp, setActive } = useSignUp()
  const { isSignedIn } = useAuth();
  const router = useRouter()

  useEffect(() => {
    if (isSignedIn) {
      router.push('/dashboard');
    }
  }, []);

  const resetFields = () => {
    setFirstName('');
    setLastName('');
    setEmail('');
    setPassword('');
    setConfirmPassword('');
  }

  const handleCreateError = () => {
    setErrorBG(errorBG === '#FFFFFF' ? 'rgba(255, 44, 44, 0.2)' : '#FFFFFF');
    setErrorBorder(errorBorder === '#9B525F' ? 'red' : '#9B525F');
    setEyeColor(eyeColor === '#9B525F' ? 'red' : '#9B525F');
  };

  const handlePasswordChange = (e) => {
    const value = e.target.value;
    setPassword(value);
    setHasUppercase(/[A-Z]/.test(value));
    setHasSpecialChar(/[^a-zA-Z0-9]/.test(value));
    setIsLongEnough(value.length > 8);
  };

  const handlePassToggle = () => {
    setPassType((prev) => (prev === 'password' ? 'text' : 'password'));
  };

  const onButtonClick = () => {
    setError('');

    if ('' === firstName || '' === lastName) {
      setError('Please enter your name.');
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    if ('' === email) {
      setError('Please enter your email.');
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
      setError('Please enter a valid email.');
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    if ('' === password) {
      setError('Please enter a password.');
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    if (!isLongEnough || !hasUppercase || !hasSpecialChar) {
      setError('Invalid password.');
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    if ('' === confirmPassword) {
      setError('Please confirm your password.');
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    if (password !== confirmPassword) {
      setError("Passwords don't match.");
      if (errorBG === '#FFFFFF') handleCreateError();
      resetFields();
      return false;
    }

    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault()

    if (!onButtonClick()) return;
    if (!isLoaded) return;

    try {
      await signUp.create({
        emailAddress: email,
        password: password,
        userAttributes: {
          firstName: firstName,
          lastName: lastName,
        },
      })
      

      await signUp.prepareEmailAddressVerification({
        strategy: "email_code",
      })
      setVerifying(true)
    } catch (err) {
      console.error(err)
    }
  }

  const handleVerify = async (e) => {
    e.preventDefault();
    if (!isLoaded) return;
    
    try {
      const signUpAttempt = await signUp.attemptEmailAddressVerification({ code });
      if (signUpAttempt.status === 'complete') {
        await setActive({ session: signUpAttempt.createdSessionId });
        router.push('/signup_confirmed');
      } else {
        alert("Invalid verification code. Try again.");
      }
    } catch (err) {
      alert("Invalid verification code. Try again.");
    }
  }
  
  
  
  
  

  if (verifying) {
    return (
      <div className="login-bg">
        <div className="confirmContainer">
          <div className="reset-password-text">
            <div className="password-text-larger">Thank you for signing up!</div>
            <div>Please enter the verification code sent to your email below.</div>
          </div>
          <div className='inputContainer'>
            <input
              value={code}
              placeholder="Verification Code"
              onChange={(e) => setCode(e.target.value)}
              className={'inputBox'}
            />
          </div>
          <div className={'inputContainer'}>
            <input 
              className={'inputButton'} 
              type="button" 
              onClick={handleVerify} 
              value={'Sign Up'} />
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="login-bg">
      <div className="mainContainer">
        <div className="back-to-login" onClick={() => {router.push("/login")}}>&lt; Back to Login</div>
        <div className="titleContainer logo-shrink">
          <div className="SMLogo sm-logo-small">
            <Image src="/SM_LOGO.svg" alt="No image found" fill />
          </div>
          <div className="clothing-database-small">CLOTHING DATABASE</div>
        </div>
        <div className={'namesContainer'}>
          <div className={'inputContainer'}>
            <label
              className="errorLabel"
              style={{
                backgroundColor: error ? "rgba(255, 44, 44, 0.2)" : "#FFFFFF",
                minHeight: "24px",
                color: error ? "red" : "#FFFFFF",
                padding: "4px 8px",
                display: "block",
                transition: "all 0.2s ease",
              }}
            >
              {error || "‎"}
            </label>
            <input
              value={firstName}
              placeholder="First Name"
              onChange={(ev) => setFirstName(ev.target.value)}
              className={'names'}
              style={{ borderColor: errorBorder }}
            />
          </div>
          <div className={'inputContainer'}>
            <input
              value={lastName}
              placeholder="Last Name"
              onChange={(ev) => setLastName(ev.target.value)}
              className={'names'}
              style={{ borderColor: errorBorder }}
            />
          </div>
        </div>
        <div className="inputContainer">
          <input
            id="email"
            type="email"
            name="email"
            placeholder="Email"
            value={email}
            className="inputBox"
            onChange={(e) => setEmail(e.target.value)}
            style={{ borderColor: errorBorder }}
          />
        </div>
        <div className="inputContainer password">
          <input
            id="password"
            type={passType}
            name="password"
            placeholder="Password"
            value={password}
            className="inputBox"
            onChange={handlePasswordChange}
            style={{ borderColor: errorBorder }}
          />
          <span className={'eyecon'} onClick={handlePassToggle}>
            {passType === 'password' ? <EyeconOff color={eyeColor} /> : <Eyecon color={eyeColor} />}
          </span>
        </div>
        <div className="inputContainer password">
          <input
            id="Confirm Password"
            type="password"
            name="Confirm Password"
            placeholder="Confirm Password"
            value={confirmPassword}
            className="inputBox"
            onChange={(e) => setConfirmPassword(e.target.value)}
            style={{ borderColor: errorBorder }}
          />
        </div>
        <div className={'passwordInfo'}>
          <p className={'passwordInfoP'}>Password must contain the following:</p>
          <p className={'passwordInfoP'} style={{ color: hasUppercase ? 'green' : 'black' }}>- 1 Uppercase character</p>
          <p className={'passwordInfoP'} style={{ color: hasSpecialChar ? 'green' : 'black' }}>- 1 Special character - !&quot;$%@#</p>
          <p className={'passwordInfoP'} style={{ color: isLongEnough ? 'green' : 'black' }}>- Must be longer than 8 characters</p>
        </div>
        <div className={'inputContainer'}>
          <input className={'inputButton'} type="button" onClick={handleSubmit} value={'Sign Up'} />
        </div>
      </div>
    </div>
  )
}
/*
 * Authors: Angie and Will
 * Sprint: Dashboard #44
 * Component: Dashboard
 * Purpose: This component displays the dashboard overview page.
*/

"use client";

import React, { useState, useEffect } from 'react';
import './Dashboard.css';
import BarGraph from "./BarGraph";
import PieChart from './PieChart';
import { useRouter } from 'next/navigation';
import { useFilterContext } from '../components/contexts/FilterContext.js';

const Dashboard = () => {
  const router = useRouter();
  const { setSelectedFilters } = useFilterContext();
  const [stats, setStats] = useState([
    { label: 'Total Items', value: 0 },
    { label: 'Currently Borrowed', value: 0 },
    { label: 'Overdue Items', value: 0 },
    { label: 'Missing Items', value: 0 }
  ]);

  const [barGraphData, setBarGraphData] = useState([
    { name: "Available", value: 0 },
    { name: "Borrowed", value: 0 },
    { name: "Overdue", value: 0 },
    { name: "Missing", value: 0 }
  ]);

  const [pieChartData, setPieChartData] = useState([
    { name: 'Great', value: 0 },
    { name: 'Good', value: 0 },
    { name: 'Not usable', value: 0 },
    { name: 'Needs washing', value: 0 },
    { name: 'Needs dry cleaning', value: 0 },
    { name: 'Needs repair', value: 0 }
  ]);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch('/api/dashboard');
        const data = await response.json();
        
        // Update stats cards
        setStats([
          { label: 'Total Items', value: data.totalItems },
          { label: 'Currently Borrowed', value: data.borrowedItems },
          { label: 'Overdue Items', value: data.overdueItems },
          { label: 'Missing Items', value: data.missingItems }
        ]);

        // Calculate available items
        const availableItems = data.totalItems - 
          (data.borrowedItems + data.overdueItems + data.missingItems);

        setBarGraphData([
          { name: "Available", value: availableItems },
          { name: "Borrowed", value: data.borrowedItems },
          { name: "Overdue", value: data.overdueItems },
          { name: "Missing", value: data.missingItems }
        ]);

      } catch (error) {
        console.error('Error fetching stats:', error);
      }

      try {
        const pieResponse = await fetch('/api/inventoryQueries?action=getCondition');
        const PieData = await pieResponse.json();

        setPieChartData([
          { name: 'Great', value: PieData.great },
          { name: 'Good', value: PieData.good },
          { name: 'Not usable', value: PieData.notUsable },
          { name: 'Needs washing', value: PieData.needsWashing },
          { name: 'Needs Dry Cleaning', value: PieData.needsDryCleaning },
          { name: 'Needs repair', value: PieData.needsRepair }
        ]);
      } catch (error) {
        console.error('Error retrieving conditions:', error);
      }
    };

    fetchStats();
  }, []);

  const handleStatClick = (status) => {
    // If clicking "Total Items", don't set any filter
    if (status) {
      setSelectedFilters({
        condition: [],
        gender: [],
        color: [],
        garment_type: [],
        size: [],
        time_period: [],
        status: [status],
        season: [],
        return_date: { start: null, end: null }
      });
    }
    router.push('/inventory');
  };

  return (
    <div className="dashboard-container">
      <h1 className="dashboard-title">Dashboard Overview</h1>
      
      <div className="stats-grid">
        {stats.map((stat) => {
          // Map stat labels to filter values
          const filterStatus = {
            'Total Items': null,
            'Currently Borrowed': 'Borrowed',
            'Overdue Items': 'Overdue',
            'Missing Items': 'Missing'
          }[stat.label];

          return (
            <div 
              key={stat.label} 
              className="stat-card clickable"
              onClick={() => handleStatClick(filterStatus)}
            >
              <div className="stat-value">{stat.value}</div>
              <div className="stat-label">{stat.label}</div>
            </div>
          );
        })}
      </div>

      <div className="charts-grid">
        <div className="chart-card">
          <h2 className="chart-title">Status</h2>
          <div className="chart-container">
            <BarGraph data={barGraphData} />
          </div>
        </div>

        <div className="chart-card">
          <h2 className="chart-title">Conditions</h2>
          <div className="chart-container">
            <PieChart data={pieChartData}/>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;/*
 * Authors: Angie and Will
 * Sprint: Dashboard #44
 * Component: Pie Chart
 * Purpose: This component displays a pie chart with the condition of items.
*/

'use client'
import React, { useEffect, useRef } from "react";
import './/../globals.css';
import './PieChart.css'
import * as d3 from "d3";


const PieChart = ({ data }) => {
   const svgRef = useRef();


   useEffect(() => {
       const handleResize = () => {
           if (data.length) {
               drawChart();
           }
       };


       window.addEventListener("resize", handleResize);
       drawChart(); // Initial render


       return () => window.removeEventListener("resize", handleResize);
   }, [data]);


   const drawChart = () => {
    if (!svgRef.current || data.length === 0) return;

    const parent = svgRef.current.parentElement;
    const width = parent.clientWidth;
    const height = parent.clientHeight;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(svgRef.current);
    svg.selectAll("*").remove(); // Clear previous render

    // Make SVG responsive
    svg
        .attr("width", "100%")
        .attr("height", "100%")
        .attr("viewBox", `0 0 ${width} ${height}`)
        .attr("preserveAspectRatio", "xMidYMid meet");

    const chart = svg.append("g")
        .attr("transform", `translate(${width / 2}, ${height / 2})`);

    // Pie and arc setup
    const pie = d3.pie().value(d => d.value);
    const arcs = pie(data);

    const arc = d3.arc()
        .innerRadius(0) // Full pie
        .outerRadius(radius);

    // Define color scale
    const color = d3.scaleOrdinal(d3.schemeCategory10);

    // Append pie slices
    chart.selectAll("path")
        .data(arcs)
        .enter()
        .append("path")
        .attr("d", arc)
        .attr("fill", (d, i) => `var(--pie-${i + 1})`)
        .style("stroke", "none"); // ❌ Remove white stroke

    chart.selectAll("text")
        .data(arcs)
        .enter()
        .append("text")
        .attr("transform", d => `translate(${arc.centroid(d)})`) // Center text in slices
        .attr("text-anchor", "middle")
        .attr("dominant-baseline", "middle")
        .style("fill", "white") // Adjust text color for visibility
        .style("font-size", "14px")
        .style("font-weight", "600")
        .style("font-family", "Inter")
        .text(d => (d.value && d.value > 0) ? d.value : ""); // Display value only if > 0
    

   };


   return (
       <div className="chart-container">
           <svg ref={svgRef} className="svg-container"></svg>
           <div className="key-grid">
            <div className="key-item">
                <div className="key-dot" style={{ backgroundColor: 'var(--pie-1)' }}></div>
                <span className="chart-label">Great Condition</span>
            </div>
            <div className="key-item">
                <div className="key-dot" style={{ backgroundColor: 'var(--pie-2)' }}></div>
                <span className="chart-label">Good Condition</span>
            </div>
            <div className="key-item">
                <div className="key-dot" style={{ backgroundColor: 'var(--pie-3)' }}></div>
                <span className="chart-label">Not Usable</span>
            </div>
            <div className="key-item">
                <div className="key-dot" style={{ backgroundColor: 'var(--pie-4)' }}></div>
                <span className="chart-label">Washing Needed</span>
            </div>
            <div className="key-item">
                <div className="key-dot" style={{ backgroundColor: 'var(--pie-5)' }}></div>
                <span className="chart-label">Dry Cleaning Needed</span>
            </div>
            <div className="key-item">
                <div className="key-dot" style={{ backgroundColor: 'var(--pie-6)' }}></div>
                <span className="chart-label">Repairs Needed</span>
            </div>
            </div>
       </div>
   );
};


export default PieChart;/*
 * Authors: Angie and Will
 * Sprint: Dashboard #44
 * Component: BarGraph
 * Purpose: This component displays a bar graph with the status of items.
*/

'use client'
import React, { useEffect, useRef, useState } from "react";
import './/../globals.css'; 
import './BarGraph.css';
import { select, scaleBand, scaleLinear, max, axisBottom, axisLeft, range } from "d3";

const BarGraph = ({ data }) => {
    const svgRef = useRef();
    const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

    useEffect(() => {
        // Function to update chart size
        const updateSize = () => {
            if (svgRef.current?.parentElement) {
                setDimensions({
                    width: svgRef.current.parentElement.clientWidth,
                    height: svgRef.current.parentElement.clientHeight,
                });
            }
        };

        // Observe parent container size changes
        const resizeObserver = new ResizeObserver(updateSize);
        if (svgRef.current?.parentElement) {
            resizeObserver.observe(svgRef.current.parentElement);
        }

        // Cleanup observer
        return () => resizeObserver.disconnect();
    }, []);

    useEffect(() => {
        if (dimensions.width > 0 && dimensions.height > 0) {
            drawChart();
        }
    }, [dimensions, data]);

   const drawChart = () => {
    if (!svgRef.current || !data || data.length === 0) return;

    const margin = { top: 25, right: 20, bottom: 60, left: 40};
    const containerWidth = svgRef.current.parentElement.clientWidth;
    const width = containerWidth - margin.left - margin.right;
    const height = (containerWidth * 0.6) - margin.top - margin.bottom; // Proportional height

    // Clear previous SVG elements
    const svg = select(svgRef.current);
    svg.selectAll("*").remove();

    svg.attr("width", containerWidth).attr("height", height + margin.top + margin.bottom);

    const chart = svg.append("g")
        .attr("transform", `translate(${margin.left}, ${margin.top})`);

    const tickInterval = max(data, d => d.value) > 300 ? 50 : 10;
    const yMax = Math.ceil(max(data, d => d.value) / tickInterval) * tickInterval;


    const xScale = scaleBand()
        .domain(data.map(d => d.name))
        .range([0, width])
        .padding(0.1);

    const yScale = scaleLinear()
        .domain([0, yMax]) // Ensure it covers the full range
        .range([height, 0]); // Invert so 0 is at bottom
    

    const barWidth = xScale.bandwidth() * 0.7; // Adjusts bar width dynamically

    // ** Remove small tick marks above each bar label **
    const xAxis = axisBottom(xScale).tickSize(0); // Set tick size to 0

    chart.append("g")
        .attr("transform", `translate(0, ${height})`)
        .attr("class", "bar-label")
        .call(xAxis)
        .select(".domain") // Hide x-axis base line

    // // ** Add a permanent top dotted line **
    // chart.append("line")
    //     .attr("x1", 0)
    //     .attr("x2", width) // Full width
    //     .attr("y1", 0) // Top of the graph
    //     .attr("y2", 0) // Stays at the top
    //     .style("stroke", "gray")
    //     .style("strokeWidth", 1)
    //     .style("stroke-dasharray", "2,2") // Dotted effect
    //     .style("opacity", 0.4); // Slightly visible

    chart.append("g")
        .call(axisLeft(yScale).tickValues(range(0, yMax + tickInterval, tickInterval))) // Adjust interval dynamically
        .attr("class", "bar-label")
        .call(g => g.select(".domain").remove()) // Remove y-axis solid line
        .call(g => g.selectAll("line").remove()); // Remove tick marks

    // ** Draw the dotted y-axis manually **
    chart.append("line")
        .attr("x1", 0)
        .attr("x2", 0)
        .attr("y1", yScale(yMax))
        .attr("y2", height)
        .style("stroke", "gray")
        .style("strokeWidth", 1)
        .style("stroke-dasharray", "2,2") // Dotted effect
        .style("opacity", 0.4);

    // ** Add horizontal grid lines at each tick on y-axis **
    chart.selectAll(".grid-line")
        .data(range(0, yMax + tickInterval, tickInterval)) // Keep only multiples of 10
        .enter()
        .append("line")
        .attr("class", "grid-line")
        .attr("x1", 0)
        .attr("x2", width) // Full width of graph
        .attr("y1", d => yScale(d))
        .attr("y2", d => yScale(d))
        .style("stroke", "gray")
        .style("strokeWidth", 1)
        .style("stroke-dasharray", "2,2") // Dotted effect
        .style("opacity", 0.4); // Slightly transparent

    // ** Add vertical dotted lines properly centered between bars **
    chart.selectAll(".bar-divider")
        .data(data.slice(0, -1)) // Exclude last element (to avoid extra line)
        .enter()
        .append("line")
        .attr("class", "bar-divider")
        .attr("x1", (d, i) => xScale(d.name) + xScale.bandwidth() + (xScale.step() - xScale.bandwidth()) / 2) // Proper centering
        .attr("x2", (d, i) => xScale(d.name) + xScale.bandwidth() + (xScale.step() - xScale.bandwidth()) / 2)
        .attr("y1", 0)
        .attr("y2", height)
        .style("stroke", "gray")
        .style("strokeWidth", 1)
        .style("stroke-dasharray", "2,2") // Dotted effect
        .style("opacity", 0.4);


    // ** Add a vertical border on the right side **
    chart.append("line")
        .attr("x1", width)
        .attr("x2", width)
        .attr("y1", 0)
        .attr("y2", height)
        .style("stroke", "gray")
        .style("strokeWidth", 1)
        .style("stroke-dasharray", "2,2") // Dotted effect
        .style("opacity", 0.4);
    
    chart.append("line")
        .attr("x1", width)
        .attr("x2", 0)
        .attr("y1", height)
        .attr("y2", height)
        .style("stroke", "gray")
        .style("strokeWidth", 1)
        .style("stroke-dasharray", "2,2") // Dotted effect
        .style("opacity", 0.4);

           // Draw gray background bars
    chart.selectAll(".gray-bar")
        .data(data)
        .enter()
        .append("rect")
        .attr("class", "gray-bar")
        .attr("x", d => xScale(d.name) + (xScale.bandwidth() - barWidth) / 2) // Center bars
        .attr("y", 0)
        .attr("width", barWidth) // Make sure gray bars match actual bars
        .attr("height", height)
        .attr("fill", "var(--gray-bar)");

    // Draw actual data bars
    chart.selectAll(".bar")
        .data(data)
        .enter()
        .append("rect")
        .attr("class", "bar")
        .attr("x", d => xScale(d.name) + (xScale.bandwidth() - barWidth) / 2) // Align bars to center
        .attr("y", d => yScale(d.value))
        .attr("width", barWidth)
        .attr("height", d => Math.max(0, height - yScale(d.value))) // Prevent bars exceeding axis
        .attr("fill", (d, i) => `var(--bar-color-${i + 1})`);

};


    return (
        // <div className="barGraphContainer">
        //     <h2 className="barGraphTitle">Status</h2>
            <div>
                <svg className="svgContainer" ref={svgRef}></svg>
            </div>
        // </div>
    ); 
};

export default BarGraph;/**************************************************************
 *
 *                     Page.jsx
 *
 *        Authors: Massimo Bottari, Elias Swartz
 *           Date: 03/07/2025
 *
 *     Summary: imports from SettingsPage.jsx and userVerificationCard.jsx to display the settings page.
 * 
 **************************************************************/

"use client";

import React, { useState, useEffect, Suspense } from "react";
import EditPage from "../components/EditPage";
import "../components/EditPage.css"
import { useSearchParams } from 'next/navigation';

const EditContent = () => {
    /* useSearchParams to fetch for id */
    const searchParams = useSearchParams();
    const unitId = searchParams.get("id");

    const [unit, setUnit] = useState(null);
    const [error, setError] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        async function loadItem() {
            console.log(unitId);
            try {
                const response = await fetch(`../../../api/db`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        text: 'SELECT * from dummy_data WHERE id=$1',
                        params: [unitId],
                    }),
                });
                
                if (!response.ok) {
                    if (response.status === 428) {
                        throw new Error('Item does not exist');
                    }
                    throw new Error('Failed to fetch item');
                }
                
                const itemData = await response.json();
                const [firstUnit] = itemData;
                setUnit(firstUnit);
                setError(null);
            } catch (error) {
                setError(error.message);
                setUnit(null);
            } finally {
                setLoading(false);
            }
        }

        loadItem();
    }, [unitId]);

    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;
    if (!unit) return <div>No item found</div>;

    return (
        <div className="edit-page">
            <EditPage unit={unit} />
        </div>
    );
};

const Edit = () => {
    return (
        <Suspense fallback={<div>Loading...</div>}>
            <EditContent />
        </Suspense>
    );
};

export default Edit;

// export default function Custom404() {
//     return <h1>404 - Page doesnt exist</h1>;
//     }
      'use client';

import React, { useState, useEffect } from 'react';
import { usePathname } from 'next/navigation';
import NavigationItem from './NavigationItem';
import Gear from '../../assets/Gear.jsx';
import Pie from '../../assets/Pie.jsx';
import Filter from '../../assets/Filter.jsx';
import Brick from '../../assets/Brick.jsx';
import Logo from '../../assets/Logo.jsx';
import styles from './NavBar.module.css';
import User from "../../assets/User.jsx";

const initialNavigationItems = [
  { id: 'dashboard', icon: Pie, label: 'Dashboard', href: '/dashboard' },
  { id: 'inventory', icon: Brick, label: 'Inventory', href: '/inventory' },
  { id: 'settings', icon: Gear, label: '', isSettings: true, href: '/settings' },
  { id: 'borrowers', icon: User, label: 'Borrowers', href: '/borrowers' },
];


const NavigationBar = ({ onFilterToggle }) => {
  const pathname = usePathname();
  const [navigationItems, setNavigationItems] = useState(initialNavigationItems);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  if (!isMounted) {
    return null; 
  }

  const handleItemClick = (clickedId) => {
    if (pathname !== '/inventory') return;

    if (clickedId === 'filter') {
      onFilterToggle(); // Call the prop to toggle the filter visibility
    }
  };

  const filteredNavigationItems = () => {
    const items = [...navigationItems];
    // Conditionally add the Filter item below Inventory and above Settings
    if (pathname === '/inventory') {
      const filterItem = {
        id: 'filter',
        icon: Filter,
        label: 'Filter',
      };
   
      const settingsIndex = items.findIndex(item => item.isSettings);
      if (settingsIndex !== -1) {
        items.splice(settingsIndex, 0, filterItem);
      } else {
        items.push(filterItem);
      }
    }
    return items;
  };

  return (
    <div className={styles.navigationBar}>
      <div className={styles.logo}>
        <Logo />
      </div>
      
      {filteredNavigationItems().map((item) => (
        <NavigationItem
          key={item.id}
          icon={item.icon}
          label={item.label}
          isSettings={item.isSettings}
          onClick={() => handleItemClick(item.id)}
          href={item.href}
        />
      ))}
    </div>
  );
};

export default NavigationBar;import React from 'react';
import PropTypes from 'prop-types';
import styles from './NavBar.module.css';
import Link from 'next/link';
import Filter from '../../assets/Filter.jsx';

const NavigationItem = ({ icon: IconComponent, label, isSettings, onClick, href, isActive }) => {
  const classNameC = isSettings 
    ? styles.navItemSettings 
    : (label === 'Filter' && isActive 
        ? styles.navItemActive 
        : styles.navItem);

  return label === 'Filter' ? (
    <div className={classNameC} onClick={onClick}>
        <Filter />
        <span className={styles.label}>{label}</span>
    </div>
  ) : (
    <Link href={href} style={{ textDecoration: 'none' }}>
        <div className={classNameC} onClick={onClick}>
            {IconComponent && <IconComponent fill="white" />}
            {!isSettings && <span className={styles.label}>{label}</span>}
        </div>
    </Link>
  );
};

NavigationItem.propTypes = {
    icon: PropTypes.elementType.isRequired,
    label: PropTypes.string,
    isSettings: PropTypes.bool,
    onClick: PropTypes.func.isRequired,
    href: PropTypes.string,
    isActive: PropTypes.bool,
};

export default NavigationItem;'use client';

import React, { useState } from 'react';

const SortAlphaButton = () => {
  const [entries, setEntries] = useState([]);
  const [isSortedById, setIsSortedById] = useState(true); // Track which sort is active

  const handleFetchClick = async () => {
    try {
      const response = await fetch(`../../api/db`, { 
        method: 'POST', // Use POST since we are sending SQL as part of the request
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          text: 'SELECT * FROM dummy_data', // Query for getting all records
          params: []
        })
      }); // Get dump of dummy_data
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      setEntries(data); // Store fetched data in state
    } catch (error) {
      console.error('Error fetching entries:', error);
    }
  };

  const sortById = () => {
    const sortedEntries = [...entries].sort((a, b) => a.id - b.id); // Sort by id
    setEntries(sortedEntries);
    setIsSortedById(true);
  };

  const sortByName = () => {
    const filteredAndSortedEntries = [...entries]
      .filter((entry) => entry.id >= 500 && entry.id <= 599) // Only include IDs between 500 and 599
      .sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically

    setEntries(filteredAndSortedEntries);
    setIsSortedById(false);
  };

  return (
    // Return three buttons: one for all data, one sorted by ID, one alphabetically id 500-599
    <div>
      <button type="button" onClick={handleFetchClick}>
        Fetch Entries
      </button>

      <button type="button" onClick={sortById} disabled={isSortedById}>
        Sort by ID
      </button>

      <button type="button" onClick={sortByName} disabled={!isSortedById}>
        Sort Alphabetically (ID 500-599)
      </button>

      <div>
        {entries.length > 0 ? (
          <ul>
            {entries.map((entry) => (
              <li key={entry.id}>
                <strong>ID:</strong> {entry.id} <strong>Name:</strong> {entry.name}
              </li>
            ))}
          </ul>
        ) : (
          <p>No entries available.</p>
        )}
      </div>
    </div>
  );
};

export default SortAlphaButton;
"use client";

import React from "react";
import "./Dropdown.css"

const Dropdown = (props) => {
    return (
        <div className="dropdown">
            <p className="dropdown-title">{props.label}</p>
            <select className="dropdown-select">
                <option className="dropdown-option">???</option>
            </select>
        </div>
    );
};

export default Dropdown;"use client"; // This file is client-side
// Filename: App.js
import React, { useState } from 'react';
import Popup from 'reactjs-popup';
import 'reactjs-popup/dist/index.css';
import SelectDropdown from './SelectDropdown'; // Ensure this is the correct path
import { v4 as uuidv4 } from 'uuid';

export default function PopupGfg() {
    const [inputValue, setInputValue] = useState('');
    const [itemData, setItemData] = useState(null);
    const [error, setError] = useState(null);
    const [keywords, setKeywords] = useState([]);

    const handleInputChange = (e) => {
        setInputValue(e.target.value);
    };

    const handleFetchData = async () => {
        try {
            const response = await fetch(`../../api/db`, { 
                method: 'PUT', // Use the PUT method
                headers: {
                  'Content-Type': 'application/json' // Specify the content type
                },
                body: JSON.stringify({
                  text: 'SELECT * FROM dummy_data WHERE id = $1', // SQL query for selecting the record
                  params: [inputValue] // Parameters for the query
                })
              });
            const result = await response.json();
    
            // Ensure result.tags is a string before calling split
            const tags = typeof result.tags === 'string' ? result.tags.split(',') : [];
    
            setItemData(result);
            setKeywords(tags);
            setError(null);
        } catch (error) {
            console.error('Error fetching data:', error);
            setError(error.message);
            setItemData(null);
        }
    };
    
    const handleKeywordsChange = (newKeywords) => {
        setKeywords(newKeywords);
    };
    
    const handleUpdateTags = async () => {
        if (!itemData) return;
    
        try {
            const response = await fetch(`../../api/inventoryQueries?action=updateTags`, { 
                method: 'PUT',
                headers: {
                'Content-Type': 'application/json' // Specify the content type
                },
                body: JSON.stringify({ id: inputValue, tags : keywords }) // Send the id as a JSON object
              })
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            const result = await response.json();
            setItemData(result);
            setError(null);
        } catch (error) {
            console.error('Error updating tags:', error);
            setError(error.message);
        }
    };

    const uniqueId = uuidv4(); // Generate a unique ID

    return (
        <div>
            <Popup trigger={<button className="btn btn-primary"> Add/delete tags </button>} modal nested>
                {close => (
                    <div className='modal'>
                        <div className='content'>
                            <h2>Search</h2>
                            <br></br>
                            <input
                                type="text"
                                placeholder="Enter Data ID#"
                                value={inputValue}
                                onChange={handleInputChange}
                                className="form-control"
                                aria-describedby={`popup-${uniqueId}`}
                            />
                            <button onClick={handleFetchData} className="btn btn-success">Fetch Data</button>
                            {error && <p className="error">{error}</p>}
                            {itemData && (
                                <div className="item-data">
                                    <p>ID: {itemData.id}</p>
                                    <p>Name: {itemData.name}</p>
                                    <p>Tags: {itemData.tags.join(', ')}</p>
                                    <SelectDropdown selectedTags={keywords} onKeywordsChange={handleKeywordsChange} />
                                    <button 
                                        onClick={handleUpdateTags} 
                                        className="btn btn-success"
                                        style={{ backgroundColor: '#FF8EE7', color: '#000000', borderRadius: '5px', padding: '5px' }}
                                    >
                                        Update Tags
                                    </button>
                                </div>
                            )}
                        </div>
                        <div>
                            <button onClick={() => close()} className="btn btn-secondary">Close Popup</button>
                        </div>
                    </div>
                )}
            </Popup>
        </div>
    );
}/**************************************************************
 *
 *                     DeletePopup.jsx
 *
 *        Authors: Dan Glorioso & Hannah Jiang & Zack White
 *           Date: 02/16/2025
 *
 *     Summary: The popup that appears when the user clicks the delete button
 *              in the inventory page. This file just displays the popup and
 *              does not execute the delete query.
 * 
 **************************************************************/

import React from "react";
import "./DeletePopup.css";
import { useState, useEffect } from "react";

const DeletePopup = ({ onConfirm, onCancel, selectedItems }) => {
    const [isClosing, setIsClosing] = useState(false);

    const handleCancel = () => {
        setIsClosing(true);
        setTimeout(() => {
            onCancel();
        }, 200);
    };

    const handleDelete = () => {
        setIsClosing(true);
        setTimeout(() => {
            onConfirm();
        }, 200);
    };

    // Add Escape key listener
    useEffect(() => {
        const handleKeyDown = (e) => {
            if (e.key === "Escape") {
                handleCancel();
            }
        };

        document.addEventListener("keydown", handleKeyDown);

        // Cleanup event listener on component unmount
        return () => {
            document.removeEventListener("keydown", handleKeyDown);
        };
    }, []);

    // Create list of ID, separated by commas
    const itemDetails = selectedItems.map(item => `${item.id}: ${item.name}`).join(", ");
    
    return (
      <div className={`deleteContainer ${isClosing ? 'fade-out' : 'fade-in'}`}>
            <div className={`deleteContent`}>
                <img src="/icons/important.svg" className="importantIcon"/>
                <h2>Delete Item(s)</h2>
                <p>Are you sure you want to delete the following item(s)?</p>

                <p style={{ fontWeight: 700 }}>
                    {itemDetails}
                </p>

                <p>You can&apos;t undo this action.</p>

                <div className="buttons">
                    <button onClick={handleCancel} className="cancel-button confirmCancel">Cancel</button>
                    <button onClick={handleDelete} className="confirm-button confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    );
  };

  export default DeletePopup;'use client';
import React, { createContext, useContext, useState } from 'react';

const GlobalContext = createContext();

// Create a Provider component
export const GlobalProvider = ({ children }) => {
    const [isToggleEnabled, setIsToggleEnabled] = useState(false);

    return (
        <GlobalContext.Provider value={{ isToggleEnabled, setIsToggleEnabled }}>
            {children}
        </GlobalContext.Provider>
    );
};

// Custom hook to use the GlobalContext
export const useGlobalContext = () => {
    return useContext(GlobalContext);
};'use client';
import { createContext, useContext, useState, useEffect } from "react";

// Create Context
const FilterContext = createContext();

// Provider Component
export const FilterProvider = ({ children }) => {
    const [selectedFilters, setSelectedFilters] = useState({
        status: [],
        season: [],
        return_date: { start: null, end: null },
        condition: [],
        gender: [],
        color: [],
        garment_type: [],
        size: [],
        time_period: [],
    });

    const [triggerFilteredFetch, setTriggerFilteredFetch] = useState(false);

    useEffect(() => {
        setTriggerFilteredFetch(!triggerFilteredFetch);
    }, [selectedFilters]);

    return (
        <FilterContext.Provider value={{ selectedFilters, setSelectedFilters, triggerFilteredFetch, setTriggerFilteredFetch }}>
            {children}
        </FilterContext.Provider>
    );
};

// Custom Hook for easy access
export const useFilterContext = () => {
    const context = useContext(FilterContext);
    if (!context) {
        throw new Error('useFilterContext must be used within a FilterProvider');
    }
    return context;
};import React, { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import './CalendarPicker.css';

const CalendarPicker = forwardRef(({ onDateSelect, isOpen, onClose }, ref) => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedStartDate, setSelectedStartDate] = useState(null);
  const [selectedEndDate, setSelectedEndDate] = useState(null);
  const [selectionMode, setSelectionMode] = useState('start'); // 'start' or 'end'
  const calendarRef = useRef(null);
  const today = new Date(); // Get today's date

  const months = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
  ];

  // Expose resetCalendar method via ref
  useImperativeHandle(ref, () => ({
    resetCalendar: () => {
      resetSelection();
      onDateSelect(null, null); // Clear the date filters in parent component
    }
  }));

  const handleDateClick = (day) => {
    const clickedDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
    
    if (selectionMode === 'start') {
      setSelectedStartDate(clickedDate);
      setSelectedEndDate(null);
      setSelectionMode('end');
    } else {
      // Ensure start date comes before end date
      if (selectedStartDate && clickedDate < selectedStartDate) {
        setSelectedEndDate(selectedStartDate);
        setSelectedStartDate(clickedDate);
      } else {
        setSelectedEndDate(clickedDate);
      }
      
      // Format dates in ISO format for consistent handling
      const startDate = selectedStartDate || clickedDate;
      const endDate = selectedStartDate && clickedDate > selectedStartDate ? clickedDate : selectedStartDate;
      
      // Format for display (MM/DD/YYYY)
      const formattedStartDate = startDate ? 
        `${startDate.getMonth() + 1}/${startDate.getDate()}/${startDate.getFullYear()}` : null;
      
      const formattedEndDate = endDate ?
        `${endDate.getMonth() + 1}/${endDate.getDate()}/${endDate.getFullYear()}` : null;
      
      // Only call onDateSelect when both dates are selected
      if (formattedStartDate && formattedEndDate) {
        onDateSelect(formattedStartDate, formattedEndDate);
        onClose();
      }
      
      setSelectionMode('start'); // Reset selection mode
    }
  };

  const handlePrevMonth = (e) => {
    e.stopPropagation(); // Prevent event from bubbling
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1));
  };

  const handleNextMonth = (e) => {
    e.stopPropagation(); // Prevent event from bubbling
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1));
  };

  const resetSelection = () => {
    setSelectedStartDate(null);
    setSelectedEndDate(null);
    setSelectionMode('start');
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      // Check if click is outside both the calendar and the calendar icon
      if (calendarRef.current && !calendarRef.current.contains(event.target) && 
          !event.target.closest('.calendar-icon')) {
        onClose();
      }
    };

    // Add the event listener to document
    document.addEventListener('mousedown', handleClickOutside);

    // Cleanup the event listener on component unmount
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [onClose]); // Only re-run if onClose changes

  if (!isOpen) return null;

  // Get current month's days
  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();
  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();
  const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);

  // Get previous month's trailing days
  const prevMonthDays = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0).getDate();
  const trailingDays = Array.from({ length: firstDayOfMonth }, (_, i) => prevMonthDays - i).reverse();

  // Get next month's leading days
  const totalDaysDisplayed = Math.ceil((firstDayOfMonth + daysInMonth) / 7) * 7;
  const leadingDays = Array.from({ length: totalDaysDisplayed - (firstDayOfMonth + daysInMonth) }, (_, i) => i + 1);

  // Function to check if a day is today
  const isToday = (day) => {
    return (
      today.getDate() === day &&
      today.getMonth() === currentDate.getMonth() &&
      today.getFullYear() === currentDate.getFullYear()
    );
  };

  // Function to check if a day is within the selected range
  const isInRange = (day) => {
    if (!selectedStartDate || !selectedEndDate) return false;
    
    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
    return date >= selectedStartDate && date <= selectedEndDate;
  };

  // Function to check if a day is selected (start or end)
  const isSelected = (day) => {
    if (!selectedStartDate && !selectedEndDate) return false;
    
    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
    
    return (
      (selectedStartDate && 
       date.getDate() === selectedStartDate.getDate() && 
       date.getMonth() === selectedStartDate.getMonth() && 
       date.getFullYear() === selectedStartDate.getFullYear()) ||
      (selectedEndDate && 
       date.getDate() === selectedEndDate.getDate() && 
       date.getMonth() === selectedEndDate.getMonth() && 
       date.getFullYear() === selectedEndDate.getFullYear())
    );
  };

  return (
    <div 
      ref={calendarRef} 
      className="calendar-picker"
      onClick={(e) => e.stopPropagation()} // Prevent clicks inside calendar from bubbling
    >
      <div className="calendar-arrow"></div>
      <div className="calendar-header">
        <button className="month-nav prev" onClick={handlePrevMonth}>&lt;</button>
        <span className="current-month">{months[currentDate.getMonth()]} {currentDate.getFullYear()}</span>
        <button className="month-nav next" onClick={handleNextMonth}>&gt;</button>
      </div>
      
      <div className="selection-info">
        {selectedStartDate && (
          <div className="selected-date">
            Start: {`${selectedStartDate.getMonth() + 1}/${selectedStartDate.getDate()}/${selectedStartDate.getFullYear()}`}
          </div>
        )}
        {selectedEndDate && (
          <div className="selected-date">
            End: {`${selectedEndDate.getMonth() + 1}/${selectedEndDate.getDate()}/${selectedEndDate.getFullYear()}`}
          </div>
        )}
        {(selectedStartDate || selectedEndDate) && (
          <button 
            className="reset-button" 
            onClick={() => {
              resetSelection();
              onDateSelect(null, null); // Clear the date filters in parent component
            }}
          >
            Reset
          </button>
        )}
      </div>
      
      <div className="calendar-body">
        <div className="weekdays">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
            <div key={day} className="weekday">{day}</div>
          ))}
        </div>
        
        <div className="days-grid">
          {trailingDays.map((day, index) => (
            <div key={`prev-${day}`} className="day disabled">{day}</div>
          ))}
          
          {days.map(day => (
            <div
              key={`current-${day}`}
              className={`day 
                ${isSelected(day) ? 'selected' : ''} 
                ${isInRange(day) ? 'in-range' : ''}
                ${isToday(day) ? 'today' : ''}`}
              onClick={() => handleDateClick(day)}
            >
              {day}
            </div>
          ))}
          
          {leadingDays.map(day => (
            <div key={`next-${day}`} className="day disabled">{day}</div>
          ))}
        </div>
      </div>
    </div>
  );
});

CalendarPicker.displayName = "CalendarPicker";


export default CalendarPicker;// BorrowUnit.jsx
//
// Edited by Peter Morganelli, 2/16/25
//
// Purpose: 
//     This file handles the BorrowUnit functionality and uses some styling,
//     which helps with the BorrowPopup component to organize the different selected items
'use client'

import React from 'react';
import Image from "next/image";
import "./BorrowPopup.css";

const BorrowUnit = ({ item, onDelete }) => {
  if (!item) return null;
  const { id, name, image_keys } = item;
  
  // Truncate name to at most 12 characters with ellipsis if needed
  const truncatedName = name.length > 12 ? name.substring(0, 12) + "..." : name;

  return (
    <div className="borrowed-item-box">
      <div className="borrow-image">
        {Array.isArray(image_keys) && image_keys.length > 0 ? (
            <Image 
                src={`https://upload-r2-assets.somerville-museum1.workers.dev/${image_keys[0]}`} 
                fill
                alt="No image found"
            />
        ) : (
            <p>No image found</p>
        )}
      </div>
      <span className="item-name">{truncatedName}</span>
      <span className="item-id">ID #{id}</span>
      <button
        className="delete-button"
        onClick={() => onDelete(item)}
        aria-label={`Delete ${name}`}
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          width="24"
          height="24"
          fill="none"
          stroke="currentColor"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="2"
        >
          <line x1="18" x2="6" y1="6" y2="18" />
          <line x1="6" x2="18" y1="6" y2="18" />
        </svg>
      </button>
    </div>
  );
};

export default BorrowUnit;
"use client"; // Ensure this component runs on the client side

import { useState } from "react";

export default function EditNoteButton() {
    const [isOpen, setIsOpen] = useState(false);
    const [inputValue, setInputValue] = useState(""); // For item ID
    const [noteValue, setNoteValue] = useState(""); // For the new note
    const [itemInfo, setItemInfo] = useState(null);
    const [error, setError] = useState(null);

    const handleTogglePopup = () => {
        setIsOpen(!isOpen);
        setInputValue("");
        setNoteValue("");
        setItemInfo(null);
        setError(null);
    };

    const handleInputChange = (event) => {
        setInputValue(event.target.value);
    };

    const handleNoteChange = (event) => {
        setNoteValue(event.target.value);
    };

    const handleSubmit = async (event) => {
        event.preventDefault();
        
        try {
            const response = await fetch(`../../api/db`, { 
                method: 'PUT', // Use the PUT method
                headers: {
                  'Content-Type': 'application/json' // Specify the content type
                },
                body: JSON.stringify({
                  text: 'SELECT * FROM dummy_data WHERE id = $1', // SQL query for selecting the record
                  params: [inputValue] // Parameters for the query
                })
              });

            if (!response.ok) {
                throw new Error('Item not found.');
            }

            const data = await response.json();
            setItemInfo(data);
            setNoteValue(data.note); // Pre-fill the note input with the current note
            setError(null);
        } catch (error) {
            console.log("I am here bro what the flip");
            setError(error.message);
        }
    };

    const handleUpdateNote = async (event) => {
        event.preventDefault();

        try {
            const response = await fetch(`../../api/db`, { 
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  text: 'UPDATE dummy_data SET note = $1 WHERE id = $2',
                  params: [noteValue, itemInfo.id]
                }),
              });

            if (!response.ok) {
                throw new Error('Failed to update note');
            }

            alert('Note updated successfully!'); // Notify the user of success

            // Close the popup after successful update
            handleTogglePopup();
        } catch (error) {
            setError(error.message);
        }
    };

    return (
        <>
            <button onClick={handleTogglePopup}>Edit Note</button>
            {isOpen && (
                <div className="modal-overlay">
                    <div className="modal-content">
                        <h2>Edit your note</h2>
                        <form onSubmit={handleSubmit}>
                            <label htmlFor="noteInput">Enter item ID:</label>
                            <input
                                type="text"
                                id="noteInput"
                                value={inputValue}
                                onChange={handleInputChange}
                                required
                            />
                            <button type="submit">Submit</button>
                            <button type="button" onClick={handleTogglePopup}>Close</button>
                        </form>
                        {itemInfo && (
                            <div className="item-info">
                                <h3>Item Information</h3>
                                <p><strong>ID:</strong> {itemInfo.id}</p>
                                <p><strong>Name:</strong> {itemInfo.name}</p>
                                <p><strong>Tags:</strong> {itemInfo.tags ? itemInfo.tags.join(', ') : 'No tags available'}</p> {/* Handle null case */}
                                <p><strong>Note:</strong> 
                                    <input
                                        type="text"
                                        value={noteValue}
                                        onChange={handleNoteChange}
                                    />
                                </p>
                                <button onClick={handleUpdateNote}>Update Note</button>
                            </div>
                        )}
                        {error && <p style={{ color: 'red' }}>{error}</p>}
                    </div>
                </div>
            )}
        </>
    );
}// BorrowPopup.jsx
//
// Edited by Peter Morganelli, 2/16/25
//
// Purpose: 
//     This file handles the popup functionality when the user clicks the
//     "borrow" button inside of the inventory component. It collects 
//     information about the user and sends the form to the backend, 
//     while also showing the selected items the user wishes to borrow 
//     with styling in accordance to the most updated Figma.

'use client'

import React, { useState, useEffect } from 'react';
// import Popup from 'reactjs-popup';
import BorrowUnit from './BorrowUnit';
import './BorrowPopup.css';
import { useGlobalContext } from './contexts/ToggleContext';
import { useUser } from '@clerk/nextjs'; // Import the Clerk hook

import StylishButton from './StylishButton';

const BorrowPopup = ({ selectedItems = [], onClose, onSuccess }) => {
  const { isToggleEnabled } = useGlobalContext(); // TOGGLE FUNCTIONALITY
  const { user } = useUser(); // Get the current user
  const [borrowerFirstName, setBorrowerFirstName] = useState('');
  const [borrowItems, setBorrowItems] = useState(selectedItems);
  const [borrowerLastName, setBorrowerLastName] = useState('');
  const [borrowerEmail, setBorrowerEmail] = useState('');
  const [dateBorrowed, setDateBorrowed] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');

  const [returnWeeks, setReturnWeeks] = useState(''); // no selection initially
  const [returnDate, setReturnDate] = useState(""); // New state for return date

  const [dueDate, setDueDate] = useState(''); // Initially emptyw
  const [approver, setApprover] = useState('');
  const [note, setNote] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [isSuccessPopupVisible, setIsSuccessPopupVisible] = useState(false);
  const itemsPerPage = 5;
  const totalPages = Math.ceil(borrowItems.length / itemsPerPage);

  const formatDate = (date) => {
    const month = (date.getMonth() + 1).toString().padStart(2, '0'); 
    const day = date.getDate().toString().padStart(2,'0'); 
    const year = date.getFullYear().toString().slice(-2);
    return `${month}/${day}/${year}`; 
  }

  useEffect(() => {
    if (user) {
      const name =
        user.firstName && user.lastName
        //THIS WILL BE FIXED AUTOMATICALLY once signup gives First and Last name
          ? `${user.firstName} ${user.lastName}`
          : user.fullName || "Mary Jane";
      setApprover(name);
    }
  }, [user]);

  // Update dateBorrowed when component mounts 
  useEffect(() => {
    const today = new Date(); 
    setDateBorrowed(formatDate(today)); 
  }, []); 

  // Update dueDate when returnWeeks changes 
  useEffect(() => {
    if (isToggleEnabled) {
      // Set dueDate to returnDate when toggle is enabled
      setDueDate(returnDate);
    } else if (returnWeeks && !isToggleEnabled) {
      // Calculate dueDate based on returnWeeks when toggle is disabled
      const today = new Date(); 
      today.setDate(today.getDate() + Number(returnWeeks * 7));
      setDueDate(formatDate(today)); 
    } else {
      // Reset dueDate if no returnWeeks and toggle is disabled
      setDueDate(''); 
    }
  }, [returnWeeks, isToggleEnabled, returnDate]);

  // set some regex variables for expected phone + email formats
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const phoneRegex = /^\d{3}-\d{3}-\d{4}$/;
  const dateRegex = /^(0?[1-9]|1[0-2])\/(0?[1-9]|[12]\d|3[01])\/\d{2,4}$/;

  const isEmailValid = emailRegex.test(borrowerEmail);
  const isPhoneValid = phoneRegex.test(phoneNumber);
  const isDateValid = dateRegex.test(returnDate);

  

  const handleSubmit = async (e) => {
        e.preventDefault();

    if (!isEmailValid) {
      alert("Please enter a valid email in the format XXX@domain.YYY");
      return;
    }

    if (!isPhoneValid) {
      alert("Please enter a valid phone number in the format XXX-XXX-XXXX");
      return;
    }

    if (borrowItems.length === 0) {
      alert("No items selected.");
      return;
    }

    // both return date cases
    if (isToggleEnabled && !isDateValid) {
      alert(`Please enter a valid date in the format MM/DD/YYYY .${returnDate}.`);
      return;
    }

    if (!isToggleEnabled && !returnWeeks) {
      alert("Please select a return period.");
      return;
    }

    try {
      const response = await fetch('/api/borrowManagement?action=borrow', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          dateBorrowed,
          borrowerName: `${borrowerFirstName} ${borrowerLastName}`,
          borrowerEmail,
          phoneNumber,
          dueDate,
          approver,
          note,
          selectedItems: borrowItems.map(item => item.id),
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Fetch failed: ${response.status} ${errorText}`);
      }


      //EMAIL FOR BORROWED ITEMS BELOW

      const itemNames = borrowItems.map(item => item.name);

      // Debugging: Log the request payload
      console.log("Sending email request:", {
          recipientEmail: borrowerEmail,
          recipientName: `${borrowerFirstName} ${borrowerLastName}`,
          items: itemNames,
      });

      // Make the API call
      if (!isToggleEnabled) {
        const emailResponse = await fetch('/api/email?emailType=sendBorrowedEmail', { 
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                recipientEmail: borrowerEmail,
                recipientName: `${borrowerFirstName} ${borrowerLastName}`,
                items: itemNames,
            }),
        });

        // Read response as text (to catch non-JSON errors)
        const responseText = await emailResponse.text();

        if (!emailResponse.ok) {
            throw new Error(`Email sending failed: ${emailResponse.status} ${responseText}`);
        }
      }


      //EMAIL FOR BORROWED ITEMS ABOVE


      const result = await response.json();
      setIsSuccessPopupVisible(true);
      console.log("successful borrow"); 

      // if (onSuccess) {
      //   onSuccess();
      // }
    } catch (error) {
      console.error("Error submitting data:", error);
    }
  };

  const resetFields = () => {
    setBorrowerFirstName('');
    setBorrowItems([]);
    setBorrowerLastName('');
    setBorrowerEmail('');
    setPhoneNumber('');
    setReturnWeeks('');
    setApprover('');
    setNote('');
    setCurrentPage(1);
  };

  const handleDelete = (item) => {
    setBorrowItems(prevItems => prevItems.filter(i => i.id !== item.id));
  };

  const getCurrentPageItems = () => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    return borrowItems.slice(startIndex, startIndex + itemsPerPage);
  };

  const handlePageChange = (page) => {
    if (page >= 1 && page <= totalPages) {
      setCurrentPage(page);
    }
  };

  const handlePhoneInput = (value) => {
    // Remove all non-numeric characters
    const numericValue = value.replace(/\D/g, "");
  
    // Format the input as ###-###-####
    if (numericValue.length <= 3) {
      setPhoneNumber(numericValue);
    } else if (numericValue.length <= 6) {
      setPhoneNumber(`${numericValue.slice(0, 3)}-${numericValue.slice(3)}`);
    } else {
      setPhoneNumber(
        `${numericValue.slice(0, 3)}-${numericValue.slice(3, 6)}-${numericValue.slice(6, 10)}`
      );
    }
  };

  return (
    <div className="container">
      
      {/* Top header */}
      <div className="borrowItemsHeader">
        <div className="borrow-header">
            <h1>Borrow Item(s)</h1>
        </div>

        {/* Left column of items to borrow */}
        <div className="borrowItemsContent">
            {borrowItems.length > 0 ? (
            <>
                <div className="borrowed-items-container">
                {getCurrentPageItems().map((item) => (
                    <BorrowUnit
                    key={item.id}
                    item={item}
                    onDelete={handleDelete}
                    />
                ))}
                </div>
                <div className="pagination-container">
                  <div className="pagination">
                      <StylishButton
                        type="button"
                        disabled={currentPage === 1}
                        onClick={() => handlePageChange(currentPage - 1)}
                        styleType='style4'
                        >
                        {"<"}
                      </StylishButton>
                      {Array.from({ length: totalPages }, (_, index) => (
                      <StylishButton
                            key={index + 1}
                            type="button"
                            className={currentPage === index + 1 ? "active" : ""}
                            onClick={() => handlePageChange(index + 1)}
                            styleType={currentPage === index + 1 ? 'style5' : 'style4'}
                        >
                            {index + 1}
                      </StylishButton>
                      ))}
                      <StylishButton
                        type="button"
                        disabled={currentPage === totalPages}
                        onClick={() => handlePageChange(currentPage + 1)}
                        styleType='style4'
                        >
                      {">"}
                      </StylishButton>
                  </div>
                </div>
            </>
            ) : (
            <p>No items selected.</p>
            )}
        </div>
        </div>

      <div className="dividerNew"></div>

      {/* Right column with borrower input fields */}
      <form onSubmit={handleSubmit} className="info-form">
        <div className="info-header">Information</div>
        <div className="form-row">
          <div className="form-group">
            <label>Borrower First Name*</label>
            <input
              required
              value={borrowerFirstName}
              onChange={(e) => setBorrowerFirstName(e.target.value)}
            />
          </div>
          <div className="form-group">
            <label>Borrower Last Name*</label>
            <input
              required
              value={borrowerLastName}
              onChange={(e) => setBorrowerLastName(e.target.value)}
            />
          </div>
        </div>
        <div className="form-row full-width">
          <div className="form-group full-width">
            <label>Phone Number*</label>
            <input
              required
              value={phoneNumber}
              onChange={(e) => handlePhoneInput(e.target.value)}
              style={{
                borderColor: isPhoneValid || !phoneNumber ? "#9b525f" : "red",
              }}
              />
          </div>
        </div>
        <div className="form-row full-width">
          <div className="form-group full-width">
            <label>Email*</label>
            <input
              type="text"
              required
              value={borrowerEmail}
              onChange={(e) => setBorrowerEmail(e.target.value)}
              style={{
                borderColor: isEmailValid || !borrowerEmail ? "#9b525f" : "red",
              }}
            />
          </div>
        </div>
        <div className="form-row">
          <div className="form-group">
            <label>Return Period*</label>
            {isToggleEnabled ? (
            <input
                type="text"
                placeholder="MM/DD/YYYY"
                value={returnDate}
                onChange={(e) => setReturnDate(e.target.value)}
                required
            />
            ) : (
            <div className="return-date-box">
              {returnWeeks ? (
                <div className="selected-return">
                  {returnWeeks} {returnWeeks === "1" ? "week" : "weeks"}
                  <button
                    type="button"
                    className="remove-return"
                    onClick={() => setReturnWeeks('')}
                  >
                    x
                  </button>
                </div>
              ) : (
                <select
                  required
                  value={returnWeeks}
                  onChange={(e) => setReturnWeeks(e.target.value)}
                  className="form-group-dropdown"
                >
                  <option value="">Select return period</option>
                  <option value="1">1 week</option>
                  <option value="2">2 weeks</option>
                  <option value="3">3 weeks</option>
                  <option value="4">4 weeks</option>
                  <option value="5">5 weeks</option>
                  <option value="6">6 weeks</option>
                </select>
              )}
            
            </div>
            )}
              {returnWeeks && (
                <div className="due-date-text">Due: {dueDate}</div>
              )}
          </div>
          <div className="form-group">
            <label>Approver*</label>
            <input
              type="text"
              readOnly
              value={approver || "Mary Jane"}
              className="non-editable"
            />
          </div>
        </div>
        <div className="form-row full-width">
          <div className="form-group full-width">
            <label>Notes</label>
            <textarea
              value={note}
              onChange={(e) => setNote(e.target.value)}
            />
          </div>
        </div>
        <div className="form-actions">
          <button type="cancel" onClick={onClose}>
            Cancel
          </button>
          <button type="submit">Borrow</button>
        </div>
      </form>
      {isSuccessPopupVisible && (
        <div className="success-popup-overlay">
          <div className="success-popup">
          <svg xmlns="http://www.w3.org/2000/svg" width="106" height="106" viewBox="0 0 106 106" fill="none">
            <path fillRule="evenodd" clipRule="evenodd" d="M65.1795 34.7891C65.4837 34.9582 65.7516 35.1856 65.9679 35.4583C66.1841 35.7309 66.3446 36.0435 66.4401 36.3781C66.5356 36.7128 66.5642 37.063 66.5243 37.4087C66.4845 37.7545 66.3769 38.089 66.2077 38.3931L51.4896 64.8931C51.3205 65.1973 51.0931 65.4651 50.8205 65.6814C50.5478 65.8977 50.2352 66.0581 49.9006 66.1536C49.5659 66.2491 49.2157 66.2777 48.87 66.2379C48.5243 66.198 48.1898 66.0904 47.8856 65.9213C47.5815 65.7522 47.3136 65.5248 47.0973 65.2521C46.8811 64.9795 46.7206 64.6669 46.6251 64.3323C46.5296 63.9976 46.501 63.6474 46.5409 63.3017C46.5807 62.956 46.6883 62.6215 46.8574 62.3173L61.5755 35.8173C61.7447 35.5131 61.972 35.2453 62.2447 35.029C62.5173 34.8127 62.8299 34.6522 63.1646 34.5568C63.4992 34.4613 63.8494 34.4327 64.1952 34.4725C64.5409 34.5124 64.8754 34.62 65.1795 34.7891Z" fill="#3FA400"/>
            <path fillRule="evenodd" clipRule="evenodd" d="M32.3832 50.1698C32.8222 49.6222 33.4605 49.2712 34.158 49.1937C34.8555 49.1162 35.5553 49.3186 36.1038 49.7564L50.8272 61.533C51.3761 61.9722 51.728 62.6115 51.8056 63.3103C51.8831 64.009 51.6799 64.71 51.2406 65.2589C50.8013 65.8078 50.162 66.1597 49.4633 66.2372C48.7645 66.3147 48.0636 66.1115 47.5147 65.6723L32.7966 53.901C32.5247 53.6835 32.2984 53.4146 32.1304 53.1097C31.9625 52.8047 31.8563 52.4697 31.8179 52.1237C31.7795 51.7777 31.8097 51.4275 31.9067 51.0931C32.0037 50.7588 32.1656 50.4468 32.3832 50.1751" fill="#3FA400"/>
            <path fillRule="evenodd" clipRule="evenodd" d="M22.2495 21.6081C21.4113 22.4433 20.7512 23.44 20.3094 24.5378C19.8675 25.6355 19.6531 26.8116 19.679 27.9946C19.732 30.9096 18.99 33.9942 17.9141 36.6654C16.8382 39.3419 15.2323 42.082 13.1759 44.1437C11.5302 45.7931 10.6059 48.028 10.6059 50.358C10.6059 52.688 11.5302 54.9228 13.1759 56.5722C16.9389 60.3405 19.5677 66.4991 19.679 71.8309C19.7209 74.0547 20.6065 76.1795 22.1565 77.7747C23.7064 79.37 25.8048 80.3164 28.0265 80.4222C30.9415 80.5653 34.0102 81.4504 36.7026 82.6482C39.3897 83.8407 42.1033 85.5208 44.165 87.5825C45.8144 89.2283 48.0493 90.1525 50.3793 90.1525C52.7093 90.1525 54.9442 89.2283 56.5935 87.5825C58.6552 85.5208 61.3635 83.8407 64.0559 82.6429C66.7483 81.4504 69.817 80.5653 72.732 80.4222C74.9542 80.3176 77.0533 79.3716 78.6035 77.7761C80.1537 76.1806 81.0389 74.0551 81.0795 71.8309C81.1855 66.4991 83.8143 60.3405 87.5826 56.5669C89.2268 54.9178 90.15 52.684 90.15 50.3553C90.15 48.0266 89.2268 45.7929 87.5826 44.1437C85.5209 42.082 83.9203 39.3419 82.8444 36.6707C81.7632 33.9942 81.0212 30.9043 81.0795 27.9946C81.1048 26.8112 80.8895 25.6349 80.4467 24.5372C80.004 23.4394 79.343 22.4429 78.5037 21.6081C77.6368 20.7367 76.5958 20.0579 75.4488 19.6159C74.3018 19.1739 73.0745 18.9786 71.8469 19.0429C66.5681 19.3079 60.33 16.9123 56.5935 13.1758C54.9442 11.5301 52.7093 10.6058 50.3793 10.6058C48.0493 10.6058 45.8144 11.5301 44.165 13.1758C40.4285 16.9123 34.1904 19.3079 28.9116 19.0429C27.6832 18.9779 26.4549 19.1727 25.3069 19.6148C24.1589 20.0568 23.1171 20.736 22.2495 21.6081ZM14.379 28.09C14.4585 32.1074 12.2696 37.5505 9.42353 40.3913C6.78419 43.0346 5.30176 46.6173 5.30176 50.3527C5.30176 54.088 6.78419 57.6707 9.42353 60.314C12.2325 63.1177 14.2995 67.9725 14.379 71.9316C14.4532 75.4402 15.8259 78.9276 18.5024 81.6041C20.9718 84.0785 24.2751 85.5431 27.7668 85.7116C31.9591 85.9236 37.4499 88.3563 40.4179 91.3296C43.0612 93.969 46.6439 95.4514 50.3793 95.4514C54.1147 95.4514 57.6974 93.969 60.3406 91.3296C63.3086 88.3563 68.7994 85.9236 72.9917 85.7116C76.4834 85.5431 79.7868 84.0785 82.2561 81.6041C84.8292 79.0346 86.3054 75.5673 86.3742 71.9316C86.459 67.9725 88.526 63.1177 91.3297 60.314C93.9691 57.6707 95.4515 54.088 95.4515 50.3527C95.4515 46.6173 93.9691 43.0346 91.3297 40.3913C88.4889 37.5505 86.2947 32.1074 86.3795 28.0953C86.4202 26.1976 86.0757 24.3114 85.367 22.5506C84.6583 20.7898 83.6 19.1908 82.2561 17.8504C80.864 16.4546 79.1936 15.3675 77.3536 14.6598C75.5137 13.9521 73.5453 13.6397 71.5766 13.7429C67.7924 13.9337 63.0171 12.0999 60.3406 9.41812C57.6971 6.77716 54.1133 5.2937 50.3766 5.2937C46.64 5.2937 43.0561 6.77716 40.4126 9.41812C37.7414 12.0999 32.9608 13.9337 29.1766 13.7429C27.2088 13.6405 25.2415 13.9533 23.4025 14.6609C21.5635 15.3686 19.894 16.4553 18.5024 17.8504C17.1592 19.1902 16.1013 20.7883 15.3926 22.5481C14.6839 24.308 14.3391 26.1932 14.379 28.09Z" fill="#3FA400"/>
          </svg>
            <h2>Borrow Success</h2>
            <p>The following items have been borrowed:</p>
            <h2>{borrowItems.map(item => item.id).join(", ")}</h2>

            <p>Thank you!</p>
            <button onClick={onSuccess}>Return to Inventory</button>
          </div>
        </div>
      )}

    </div>
  );
};

export default BorrowPopup;
'use client'

// import Popup from 'reactjs-popup';
import React, { useState, useEffect } from "react";
import StylishButton from './StylishButton.jsx';
import BorrowPopup from './BorrowPopup.jsx';

const BorrowButton = ({ selectedItems = [], onSuccess }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [availableSelectedItems, setAvailableSelectedItems] = useState(selectedItems);

  // This function checks the validity of the selected items
  async function handleValidity() {

    try {
      const response = await fetch('../../api/borrowManagement?action=borrowValidity', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          selectedItems: selectedItems.map(item => item.id),
        }),
      });

      if (!response.ok) {
        throw new Error(`Fetch error: ${response.status} - ${response.statusText}`);
      }

      const result = await response.json(); 
      if (result.message) {
          alert(result.message);  
      }

      //reset available items after check
      setAvailableSelectedItems(result.availableItems);   

      return true; // Return true if the validity check passes
    } catch (error) {
      console.error('Error during validity check:', error);
      return false; // Return false if there's an error
    }
  }

  // This function is triggered when the button is clicked
  const handleButtonClick = async () => {
    if(selectedItems == 0) {
      alert('No Items selected.'); 
    } else {
        // Check the validity before opening the popup
    const isValid = await handleValidity();
      if (isValid) {
        setIsOpen(true);  // Open the popup only if validity is true
      } else {
        alert('Some items are invalid. Please try again.');
      }
    }
  }

  return (
    <div>
      <StylishButton
        label="Borrow"
        styleType="style1"
        onClick={handleButtonClick}
      />

    {isOpen && (

        <div className="custom-popup-large">
          <BorrowPopup
            selectedItems={availableSelectedItems}
            onClose={() => setIsOpen(false)}
            onSuccess={() => {
              if (onSuccess) onSuccess();
              setIsOpen(false); // Close the popup
            }}
          />
        </div>

    )}

    </div>
  );
};

export default BorrowButton;
import React from 'react';
import PropTypes from 'prop-types';
import './StylishButton.css';

const StylishButton = ({ label, styleType, onClick, children }) => {
  const buttonClass = `stylish-button ${styleType}`; //add the style option to the class list

  return (
    <button className={buttonClass} onClick={onClick}>
      {label}
      {children ? children : null}
    </button>
  );
};

StylishButton.propTypes = {
  label: PropTypes.string.isRequired, //text inside button
  styleType: PropTypes.oneOf(['style1', 'style2', 'style3', 'style4', 'style5', 'style6', 'style7']), //style option selection
  onClick: PropTypes.func, //onClick handler
};

StylishButton.defaultProps = {
  styleType: 'style1', //default to style option 1 if no style option is selected
  onClick: null, //default to no onClick handler
};

export default StylishButton;
"use client";
import "./ReturnButton.css";
import { useState, useEffect } from "react";
import StylishButton from "./StylishButton.jsx";
import ItemBoxes from "./ReturnItemBoxes.jsx";

const ReturnPopup = ({ units = [], onSuccess, onClose }) => {
    const [currentPage, setCurrentPage] = useState(1);
    const totalPages = Math.ceil(units.length / 6);
    const buttons = Array.from({ length: totalPages }, (_, index) => index + 1); 
    const [notes, setNotes] = useState({});
    const [selectedUnits, setSelectedUnits] = useState([]);

    useEffect(() => {
        // Update selectedUnits when units or page changes
        const startIndex = (currentPage - 1) * 6;
        setSelectedUnits(units.slice(startIndex, startIndex + 6).map((unit) => (
            <ItemBoxes
                key={unit.id}
                unit={unit}
                onNotesChange={handleNotesChange}
                onClose={() => handleDeselect(unit)}
            />
        )));
    }, [units, currentPage]);

    const handleReturn = async () => {
        try {
            const response = await fetch('../../api/borrowManagement?action=return', {   
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    selectedItems: units.map(item => item.id),
                    notes_id: Object.keys(notes),
                    notes_content: Object.values(notes)
                })
            });
            
            if (!response.ok) {
                throw new Error(`Fetch error: ${response.status} - ${response.statusText}`);
            }

            const result = await response.json(); 
            if (result.message) alert(result.message);
            if (onSuccess) onSuccess(); 

            location.reload(); 
        } catch (error) {
            console.error("Error returning data:", error);
        }
    };

    const goToPreviousPage = () => setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
    const goToNextPage = () => setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));

    const handleNotesChange = (id, value) => {
        setNotes(prev => ({ ...prev, [id]: value }));
    };

    const handleDeselect = (removeUnit) => {
        const updatedUnits = units.filter(unit => unit.id !== removeUnit.id);
        setSelectedUnits(updatedUnits.slice(0, 6).map(unit => (
            <ItemBoxes
                key={unit.id}
                unit={unit}
                onNotesChange={handleNotesChange}
                onClose={() => handleDeselect(unit)}
            />
        )));

        if (updatedUnits.length === 0) location.reload();
    };

    return (
        <div className="wrapper"> 
            <div className="header">
                <div className="heading">Return Item(s)
                    <div className="buttons">
                        <StylishButton label="Cancel" onClick={onClose} styleType="style1" />
                        <StylishButton label="Return All" onClick={handleReturn} styleType="style3" />
                    </div>
                </div>
            </div>
            <div className="itemContainer">
                {selectedUnits}
            </div> 
            <div className="page-select">
                <StylishButton className="leftBtn" label="&lt;" onClick={goToPreviousPage} disabled={currentPage === 1} styleType='style4' />
                {buttons.map((number) => (
                    <StylishButton className="pageNum" label={number} key={number} onClick={() => setCurrentPage(number)} styleType={currentPage === number ? 'style5' : 'style4'} />
                ))}
                <StylishButton className="rightBtn" label="&gt;" onClick={goToNextPage} disabled={currentPage === totalPages} styleType='style4' />
            </div>
        </div>
    );
};

export default ReturnPopup;
/**
 * @fileoverview This file will implement the functionality for the BorrowerSearchBar,
 *               utilizing similar functionality to the inventory SearchBar
 *               
 *               NOTES: Uses a POST request on the db.js endpoint which requires
 *                      text and params as arguments, so I turned it into a JSON
 *                      object and passed the stringified object into query
 * 
 * @file BorrowerSearchBar.jsx
 * @date February 28th, 2025
 * @authors Peter Morganelli
 *  
 */

"use client";

import "./SearchBar.css";
import { useState, useEffect } from "react"; 

export default function BorrowerSearchBar({ updateSearchResults }) {
    const [query, setQuery] = useState("");

    // Fetch relevant search results when search query is changed
    useEffect(() => { 
        console.log(query)
        const fetchData = async () => {
            try {
                const response = await fetch(`../../../../api/db`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    //use parameterized query to prevent sql injection :p
                    body: JSON.stringify({
                        text: `SELECT * FROM borrowers
                               WHERE id::text ILIKE $1
                               OR name ILIKE $1
                               OR email ILIKE $1
                               OR phone_number ILIKE $1
                               OR borrow_history::text ILIKE $1`,
                        params: [`%${query}%`],
                      }),
                });

                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }

                const data = await response.json();
                // Update results on inventory page
                updateSearchResults(data);  
            } catch (error) {
                console.log(error);
            }
        };
        fetchData();
    }, [query]);
    return (
        <div className="Searchbar">
            <input 
                type="text" 
                placeholder="Search..."
                value={query}
                onChange={(e) => { setQuery(e.target.value); }}
                onKeyDown={(e) => {
                    if (e.key === "Backspace" || e.key === "Delete") {
                        setQuery(e.target.value);
                    }
                }}
            />
        </div>
    );
}
"use client";

import React, { useState, useEffect } from "react";
import "./RecentBorrows.css";

const RecentBorrows = () => {
  const [borrowedItems, setBorrowedItems] = useState([]);
  console.log(borrowedItems)

  useEffect(() => {
    const getFirstTwoBorrowedItems = async () => {
      try {
        const response = await fetch("../../api/getRecentBorrows");
        const data = await response.json();
        setBorrowedItems(data.borrowedItems);
      } catch (error) {
        console.error("Error fetching borrowed items:", error);
      }
    };

    getFirstTwoBorrowedItems();
  }, []);

  const handleClick = () => {
    // TO DO: Implement functionality to see all borrowed items
  }

  return (
    <div className="recent-borrows">
      <div className="header">
        <h2>Recent Borrows</h2>
        <div  onClick={handleClick} className="see-all">
          SEE ALL
        </div>
      </div>
      <table id="borrowTable">
        <thead>
          <tr>
            <th>ID#</th>
            <th>Item Name</th>
            <th>Date Borrowed</th>
            <th>Borrower Name</th>
            <th>Borrower Email</th>
          </tr>
        </thead>
        <tbody>
          {borrowedItems.map((item, index) => (
            <tr key={index}>
              <td>{item.id}</td>
              <td>{item.name}</td>
              <td>{item.date}</td>
              <td>{item.borrowerName}</td>
              <td>{item.borrowerEmail}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default RecentBorrows;"use client";

import React from "react";
import "./Checkbox.css";

const Checkbox = ({ label, checked, onChange }) => {
  return (
    <div className="checkbox" onClick={onChange} style={{ cursor: "pointer" }}>
      <button
        className="checkbox-button"
        style={{
          backgroundColor: checked ? "#9B525F" : "#FFFFFF",
          color: checked ? "#FFFFFF" : "#9B525F",
        }}
      >
        {checked ? "✓" : ""}
      </button>
      <p className="check-text">{label}</p>
    </div>
  );
};

export default Checkbox;
/**************************************************************
 *
 *                     EditPage.jsx
 *
 *        Authors: Dan Glorioso & Massimo Bottari
 *           Date: 02/01/2025
 *
 *     Summary: A component that allows users to edit an existing item in the
 *              database. It fetches the current data for the item, populates 
 *              the fields with that data, and allows users to modify it,
 *              and submit the changes.
 * 
 **************************************************************/

"use client";

import { useState, useEffect } from 'react';
import "../globals.css";
import { Dropdown } from 'primereact/dropdown';
import { MultiSelect } from 'primereact/multiselect';
import StylishButton from './StylishButton';
import Link from 'next/link';


export default function EditPage({ unit, onClose }) {
    // Left column state variables
    const [dragOver, setDragOver] = useState(false);
    const [preview, setPreview] = useState(null);

    // Extract the unit details
    const { id, name, age_group, gender, color, season, garment_type, size, time_period, condition, cost, notes} = unit; 

    // Right column state variables
    const [idText, setIDText] = useState(id);
    const [itemText, setItemText] = useState(name);
    const [priceText, setPriceText] = useState(cost);
    const [notesText, setNotesText] = useState(notes);
    const [selectedGarment, setSelectedGarment] = useState(garment_type);
    const [selectedTimePeriod, setSelectedTimePeriod] = useState(time_period);
    const [ageSelection, setAgeSelection] = useState(age_group);
    const [genderSelection, setGenderSelection] = useState(gender);
    const [selectedSize, setSelectedSize] = useState(size);
    const [selectedSeason, setSelectedSeason] = useState(season);
    const [conditionOption, setconditionOption] = useState(condition);
    const [selectedColors, setSelectedColors] = useState(color);

    // "Overall" state variables
    const [selectedChoice ] = useState([]);
    const [errors, setErrors] = useState({});
    const [statusMessage, setStatusMessage] = useState("");
    const [statusType, setStatusType] = useState("");

    // Define all of the options for buttons and dropdowns
    const garmentOptions = [
        { label: "Gowns/dresses", value: "Gowns/dresses" },
        { label: "Outerwear", value: "Outerwear" },
        { label: "Accessories", value: "Accessories" },
        { label: "Bottoms", value: "Bottoms" },
        { label: "Shoes", value: "Shoes" },
        { label: "Socks/hose", value: "Socks/hose" },
        { label: "Tops", value: "Tops" },
        { label: "Vests", value: "Vests" }
    ];
    const timePeriods = [
        { name: "Post-1920s" },
        { name: "Pre-1700s" },
        { name: "1750s - 1800s" },
        { name: "1800s - 1840s" }
    ];
    const ageOptions = [
        { value: "Youth", label: "Youth" },
        { value: "Adult", label: "Adult" }
    ];
    const genderOptions = [
        { value: "Male", label: "Male" },
        { value: "Female", label: "Female" },
        { value: "Unisex", label: "Unisex" }
    ];
    const sizes = [
        { value: "Small", label: "Small" },
        { value: "Medium", label: "Medium" },
        { value: "Large", label: "Large" },
        { value: "X-Large", label: "X-Large" }
    ];
    const seasons = [
        { label: "Fall", value: "Fall" },
        { label: "Winter", value: "Winter" },
        { label: "Spring", value: "Spring" },
        { label: "Summer", value: "Summer" }
    ];
    const conditionOptions = [
        { name: "Needs repair" },
        { name: "Needs dry cleaning" },
        { name: "Needs washing" },
        { name: "Not usable" },
        { name: "Great" },
        { name: "Good"}
    ]
    const colors = [
        { name: "Red", hex: "#FF3B30" },
        { name: "Orange", hex: "#FF9500" },
        { name: "Yellow", hex: "#FFCC00" },
        { name: "Green", hex: "#34C759" },
        { name: "Blue", hex: "#5856D6" },
        { name: "Purple", hex: "#AF52DE" },
        { name: "Pink", hex: "#FF93B7" },
        { name: "Brown", hex: "#A2845E" },
        { name: "White", hex: "#FFFFFF", border: "#c9c9c9" },
        { name: "Gray", hex: "#8E8E93" },
        { name: "Black", hex: "#000000" },
      ];
    const cancelOrSubmit = ["Cancel", "Submit"];

    // Fetch placeholder for current date
    const [placeholderDate, setPlaceholderDate] = useState('');
    useEffect(() => {
        const today = new Date();
        const month = String(today.getMonth() + 1).padStart(2, '0'); 
        const day = String(today.getDate()).padStart(2, '0');
        const year = today.getFullYear();
        setPlaceholderDate(`${month}/${day}/${year}`);
    }, []);

    // Function to handle and update file selection
    const handleFileSelect = (file) => {
        if (file && file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.onload = (e) => setPreview(e.target.result);
            reader.readAsDataURL(file);
            setStatusMessage("Image uploaded successfully.");
            setStatusType("success");
        } else {
            setStatusMessage("Error: Invalid file type. Please upload an image.");
            setStatusType("error");
        }
    };

    // Function to handle drag-and-drop file upload
    const handleDrop = (event) => {
        event.preventDefault();
        setDragOver(false);
        const file = event.dataTransfer.files[0];
        handleFileSelect(file);
    };

    // Function to handle file input change
    const handleFileInputChange = (event) => {
        const file = event.target.files[0];
        handleFileSelect(file);
    };

    // Function to deal with a number input to format as a $ amount
    const handlePriceChange = (e) => {
        let value = e.target.value;
    
        // Remove any non-numeric characters except dot
        value = value.replace(/[^0-9.]/g, "");
    
        // Ensure only one decimal point
        const parts = value.split(".");
        if (parts.length > 2) {
            value = parts[0] + "." + parts.slice(1).join("");
        }
    
        setPriceText(value ? `$${value}` : "");
    };

    // Function to format price as currency
    const formatPrice = () => {
        if (priceText === "") return;

        // Convert to a fixed two-decimal format
        const formattedValue = parseFloat(priceText).toFixed(2);
    
        // Check is input is valid before setting state
        if (!isNaN(formattedValue)) {
            setPriceText(`$${numericValue.toFixed(2)}`);
        }
    };
    
    // Function to handle color selection
    const handleColorSelect = (color) => {
        // If color is already selected, remove it
        if (selectedColors.includes(color)) {
            setSelectedColors(selectedColors.filter((c) => c !== color));
        // If fewer than 2 colors are selected, add the new color
        } else if (selectedColors.length < 2) {
            setSelectedColors([...selectedColors, color]);
        }
    };

    const handleConditionSelect = (selectedConditions) => {
    
        // Ensure selectedconditionOptions is always an array
        if (!Array.isArray(selectedconditionOptions)) {
            setconditionOption([]);
            return;
        }
    
        // Extract only names, handling undefined values safely
        const selectedNames = selectedconditionOptions.map(item => item?.name || "").filter(name => name !== "");
    
        // Update state
        setconditionOption(selectedNames);
    };

    const handleTimePeriodSelect = (selectedTimePeriods) => {    
        // Ensure selectedTimePeriods is always an array
        if (!Array.isArray(selectedTimePeriods)) {
            setSelectedTimePeriod([]);
            return;
        }
    
        // Extract only names
        const selectedNames = selectedTimePeriods.map(item => item?.name || "");
    
        // Update state
        setSelectedTimePeriod(selectedNames.filter(name => name !== ""));
    };

    const handleSeasonSelect = (season) => {
        setSelectedSeason((prevSelected) => {
            if (prevSelected.includes(season)) {
                // Remove season if already selected
                return prevSelected.filter((s) => s !== season);
            } else if (prevSelected.length < 2) {
                // Add season if less than 2 are selected
                return [...prevSelected, season];
            } else {
                return prevSelected; 
            }
        });
    };

    // Fetch data from the API about the item to edit
    const retrieveItem = async () => {
        setStatusMessage("Retrieving item data...");
        setStatusType("neutral");
    
        try {
            const response = await fetch(`/api/itemManagement?action=retrieve&id=${idText}`);
            console.log("idtext: " + idText);
    
            // Custom error handling for no item found
            if (response.status === 428) {
                setStatusMessage("Error: Item ID does not exist.");
                setStatusType("error");
                return;
            }
    
            if (!response.ok) {
                throw new Error('Error fetching data');
            }
    
            // Parse response as JSON
            const data = await response.json();
    
            // Populate state with retrieved data
            setIDText(data.id);
            setItemText(data.name);
            setPlaceholderDate(data.date_added);
            setPriceText(data.cost ? `$${data.cost}` : "");
            setNotesText(data.notes);
            setSelectedGarment(data.garment_type);
            setSelectedTimePeriod(data.time_period || []);
            setAgeSelection(data.age_group || []);
            setGenderSelection(data.gender || []);
            setSelectedColors(data.color || []);
            setSelectedSeason(data.season || []);
            setSelectedSize(data.size || []);
            setconditionOption(data.condition || []);
    
        } catch (error) {
            console.error('Error fetching item data:', error);
            setStatusMessage("Error fetching item data. Please try again.");
            setStatusType("error");
        }

        // Reset status message after retrieval
        setStatusMessage("");
        setStatusType("neutral");
    };
    
    useEffect(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const itemId = urlParams.get('id');
        if (itemId) {
            retrieveItem(itemId);
        }
    }, []);
    

    const handleSubmit = () => {
        setStatusMessage("Updating...");
        setStatusType("neutral");

        const newItem = {
            id: idText,
            name: itemText || null,
            cost: priceText ? parseInt(priceText.replace('$', ''), 10) : null,
            notes: notesText || null,
            garment_type: selectedGarment || null,
            time_period: selectedTimePeriod.length > 0 ? selectedTimePeriod : null,
            age_group: ageSelection || null,
            gender: genderSelection || null,
            size: selectedSize.length > 0 ? selectedSize : null,
            season: selectedSeason.length > 0 ? selectedSeason : null,
            condition: conditionOption.length > 0 ? conditionOption : null,
            color: selectedColors.length > 0 ? selectedColors : null,
            status: "Available",
            location: null,
            date_added: placeholderDate,
            current_borrower: null,
            borrow_history: null
        };
    
        let newErrors = {};
    
        // Required fields check
        if (!newItem.name) newErrors.name = true;
        if (!newItem.garment_type) newErrors.garment_type = true;
        if (!newItem.time_period) newErrors.time_period = true;
        if (!newItem.age_group) newErrors.age_group = true;
        if (!newItem.gender) newErrors.gender = true;
        if (!newItem.size) newErrors.size = true;
        if (!newItem.season) newErrors.season = true;
        if (!newItem.condition) newErrors.condition = true;
        if (!newItem.color) newErrors.color = true;
        if (!newItem.date_added) newErrors.date_added = true;
    
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            setStatusMessage("Please fill out all required fields.");
            setStatusType("error");
            return;
        }
    
        setErrors({});
    
        const updateItem = async () => {
            try {
                const response = await fetch(`../../api/itemManagement?action=updateItem`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(newItem),
                });
    
                const data = await response.json();
    
                if (!response.ok) {
                    if (response.status === 428) {
                        setStatusMessage("Error: ID is missing.");
                    } else if (response.status === 500) {
                        setStatusMessage("Internal server error. Please try again.");
                    } else {
                        setStatusMessage(`Error: ${data.error || "Unknown error"}`);
                    }
                    setStatusType("error");
                    return;
                }
    
                if (response.status === 201) {
                    setStatusMessage("Item successfully added.");
                } else {
                    setStatusMessage("Item successfully updated.");
                }
                setStatusType("success");
    
            } catch (error) {
                console.error('Error updating item:', error);
                setStatusMessage("An error occurred. Please try again.");
                setStatusType("error");
            }
        };
    
        updateItem();
    };    

    // Reset form fields
    const resetForm = () => {
        setIDText("");
        setItemText("");
        setPriceText("");
        setNotesText("");
        setSelectedGarment("");
        setSelectedTimePeriod([]);
        setAgeSelection(null);
        setGenderSelection(null);
        setSelectedSize([]);
        setSelectedSeason([]);
        setconditionOption([]);
        setSelectedColors([]);
    };

    return (
        <div className="main">
            <div className="column">

                {/* Left column */}
                <div className="left">
                    <div className="title">
                        Edit Item
                    </div>

                    {/* Drag-and-drop image upload section */}
                    <div className="image-upload">
                        <div
                            id="drop-zone"
                            className={`drop-zone ${dragOver ? "dragover" : ""}`}
                            onClick={() => document.getElementById("file-input").click()}
                            onDragOver={(event) => {
                                event.preventDefault();
                                setDragOver(true);
                            }}
                            onDragLeave={() => setDragOver(false)}
                            onDrop={handleDrop}
                            >
                            <div className="upload-icon-and-text">
                            <img src="/icons/upload.svg" className="upload-icon" />
                                <p style={{color: "#9B525F"}}>Upload image*</p>
                            </div>
                            <input
                                type="file"
                                id="file-input"
                                accept="image/*"
                                style={{ display: "none" }}
                                onChange={handleFileInputChange}
                            />
                            {preview && (
                                <img
                                src={preview}
                                alt="Preview"
                                className="preview"
                                />
                            )}
                        </div>
                        <div className={`itemName ${errors.name ? "error-text" : ""}`}>
                            Item Name*
                        </div>

                        {/* Item Name Text Entry */}
                        <label htmlFor="textBox"></label>
                        <div className="itemTextBox">
                            <textarea placeholder=""
                            id = "itemTB"
                            value={itemText}
                            onChange={(e) => setItemText(e.target.value)}
                            />
                        </div>
                        
                        {/* ID, Date Added, and Price Text Entries */}
                        <div className="textBoxRow">
                            <div className="allID">
                                <div className={`idName ${errors.name ? "error-text" : ""}`}>
                                    ID
                                </div>
                                <div className="idTextBox">
                                    <textarea 
                                        type="text"
                                        value={idText}
                                        placeholder="1256"
                                        onChange={(e) => setIDText(e.target.value)}
                                    />
                                </div>
                            </div>

                            <div className="allDate">
                                <div className={`dateName ${errors.name ? "error-text" : ""}`}>
                                    Date Added
                                </div>
                                <div className="dateTextBox">
                                    <textarea placeholder={placeholderDate}></textarea>
                                </div>
                            </div>
                            <div className="allPrice">
                                <div className={`priceName ${errors.name ? "error-text" : ""}`}>
                                    Price
                                </div>
                                <div className="priceInput">
                                <input 
                                    type="text"
                                    placeholder="$0.00"
                                    id="priceTB"
                                    value={priceText}
                                    onChange={(e) => handlePriceChange(e)}
                                    onBlur={formatPrice}
                                />
                                </div>
                            </div>
                        </div>

                        <div className={`notesName ${errors.name ? "error-text" : ""}`}>
                            Notes
                        </div>

                        <div className="notesTextBox">
                            <textarea placeholder="Extra item information not captured by tags (i.e. fabric type, or where it was bought from)."
                            id = "notesTB"
                            value={notesText}
                            onChange={(e) => setNotesText(e.target.value)}
                            />
                        </div>
                    </div>
                </div>
                
                {/* Middle Vertical Divider */}
                <div className="divider"></div>

                {/* Right Column */}
                <div className="right">

                    {/* Garment and Time Section */}
                    <div className="garment-and-time">
                    
                        {/* Garment Title and Dropdown */}
                        <div className="dropdown-component">
                            <h3 className={errors.garment_type ? "error-text" : ""}>Garment Type*</h3>
                            <Dropdown
                                value={selectedGarment}
                                options={garmentOptions}
                                onChange={(e) => setSelectedGarment(e.value)}
                                placeholder="Select Garment Type"
                                className="dropdown"
                            />
                        </div>

                        {/* Time Period Title and Dropdown */}
                        <div className="dropdown-component">
                            <h3 className={errors.time_period ? "error-text" : ""}>Time Period*<span style={{fontWeight: "400"}}> (Max of 2)</span></h3>                            
                                <MultiSelect
                                    value={timePeriods.filter(period => selectedTimePeriod.includes(period.name))} // Sync selected values
                                    options={timePeriods}
                                    onChange={(e) => handleTimePeriodSelect(e.value || [])}
                                    optionLabel="name" 
                                    display="chip" 
                                    maxSelectedLabels={2}
                                    placeholder="Select Time Period"
                                    className="dropdown"
                                    showSelectAll={false}
                                />
                        </div>
                    </div>
                    
                    {/* Age and Gender Buttons */}
                    <div className="age-and-gender">
                        {/* Age Buttons */}
                        <div className="allAge">
                            <h3 className={errors.age_group ? "error-text" : ""}>Age Group*</h3>
                            <div className="ageButtons p-selectbutton">
                                {ageOptions.map((option) => (
                                    <button
                                        key={option.value}
                                        className={`p-button ${ageSelection === option.value ? "selected" : ""}`}
                                        onClick={() => setAgeSelection(option.value)}
                                    >
                                        {option.label}
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* Gender Buttons */}
                        <div className="allGender">
                            <h3 className={errors.gender ? "error-text" : ""}>Sex*</h3>
                            <div className="genderButtons p-selectbutton">
                                {genderOptions.map((option) => (
                                    <button
                                        key={option.value}
                                        className={`p-button ${genderSelection === option.value ? "selected" : ""}`}
                                        onClick={() => setGenderSelection(option.value)}
                                    >
                                        {option.label}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Size Buttons */}
                    <div className="size-buttons p-selectbutton">
                        <h3 className={errors.size ? "error-text" : ""}>Size*</h3>
                        {sizes.map((option) => (
                            <button 
                                key={option.value} 
                                className={`p-button ${selectedSize === option.value ? "selected" : ""}`}
                                onClick={() => setSelectedSize(option.value)}
                                >
                                    {option.label} 
                            </button>
                        ))}
                    </div>

                    <div className="season-buttons p-selectbutton">
                        <h3 className={errors.season ? "error-text" : ""}>
                            Season* <span style={{ fontWeight: "400" }}> (Max of 2)</span>
                        </h3>
                        {seasons.map((option) => (
                            <button
                                key={option.value}
                                className={`p-button ${selectedSeason.includes(option.value) ? "selected" : ""}`}
                                onClick={() => handleSeasonSelect(option.value)}
                            >
                                {option.label}
                            </button>
                        ))}
                    </div>

                    {/* conditionOption Dropdown */}
                    <div className="conditionOption-component">
                        <div className="dropdown-component">
                            <h3 className={errors.condition ? "error-text" : ""}>Condition*<span style={{fontWeight: "400"}}> (Max of 2)</span></h3> 
                            <MultiSelect
                                value={conditionOptions.filter(cond => conditionOption.includes(cond.name))} // Sync selected values
                                options={conditionOptions}
                                onChange={(e) => handleconditionOptionSelect(e.value || [])} // Ensure `e.value` is never undefined
                                optionLabel="name" 
                                display="chip" 
                                maxSelectedLabels={2}
                                placeholder="Select condition"
                                className="dropdown"
                                showSelectAll={false}
                            />
                        </div>
                    </div>
                            
                    {/* Color Selector */}
                    <div className="color-component">
                        <div className="color-dropdown">
                            <h3 className={errors.color ? "error-text" : ""}>Color*<span style={{fontWeight: "400"}}> (Max of 2)</span></h3> 
                            <div className="color-selector">
                                <div className="color-options">
                                    {colors.map((color) => (
                                    <div
                                        key={color.name}
                                        className={`color-circle ${selectedColors.includes(color.name) ? "selected" : ""}`}
                                        style={{
                                        backgroundColor: color.hex,
                                        border: color.border ? `2px solid ${color.border}` : "none",
                                        }}
                                        onClick={() => handleColorSelect(color.name)}
                                    ></div>
                                    ))}
                                </div>
                                <p className="selected-text">
                                    Selected: {selectedColors.length > 0 ? selectedColors.join(", ") : "None"}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>  

            <div className="cancel-submit">
                {/* Status Message */}
                <div className={`statusMessage ${statusType}`}>
                    {statusMessage}
                </div>

                {/* Cancel and Submit Buttons */}
                <div className="cancel-submit-buttons">
                    <Link href="/inventory">
                        <StylishButton className="cancel-button" styleType="style1" label="Cancel" />
                    </Link>

                    <StylishButton className="submit-button" onClick={() => handleSubmit()} styleType="style3" label="Submit" />
                </div>
            </div>
        </div>
    );
}/*Tabs.jsx has 5 things:
* 1. Logo (no action)
    - PNG file
* 2. Tab Button 1 (pie chart) --> bring to dashboard
    -Dashboard component
    - onClick --> bring to dashboard
    - Components:
        - Inventory Dashboard: *Need to implement* 
        - Overview: Dashboard.jsx
        - Recent Borrows: *Need to implement*
* 3. Tab Button 2 (grid) --> brings to inventory grid component
    - 
* 4. Tab Button 3  (funnel) --> pop out funnel model
    -Filters component
* 5. Settings Button (settings icon)
    -Use Feathericons.dev Settings logo (or the Figma one>)
*/

'use client';

import React, { useState } from 'react';
import Gear from '../assets/Gear.jsx';
import Pie from '../assets/Pie.jsx';
import Filter from '../assets/Filter.jsx';
import Brick from '../assets/Brick.jsx';
import Logo from '../assets/Logo.jsx';
import './Sidebar.css';

// import Filter from './Filters';
import Dashboard from "./Dashboard.jsx";
import Link from 'next/link'
// import ELiTable from "./components/15Tablecomp/EliTable";

const Sidebar = () => {
    return (
        <div>
            <div className="sidenav">
                <Logo />
                {/*add functionality later!!*/}
                <Pie />
                {/* <Brick /> */}
                {/* <li> */}
                <Brick />
                    {/* <Link href="/inventory"></Link> */}
                {/* </li> */}
                <Filter />
                <Gear />
            </div>

            {/* <div className="main">
                <Dashboard />
            </div> */}
        </div>
    );
};
"use client";

import { useState } from 'react';

function AddTagButton() {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);

  // Function to handle the button click
  const handleClick = async () => {
    try {
      const response = await fetch(`../../api/selectId`, { 
        method: 'PUT',
        headers: {
        'Content-Type': 'application/json' // Specify the content type
        },
        body: JSON.stringify({ id: inputValue }) // Send the id as a JSON object
      });
      if (!response.ok) {
        throw new Error(`Network response was not ok: ${response.statusText}`);
      }


      const result = await response.json();
      setData(result); // Set the data
      setError(null); // Clear any previous errors

    } catch (error) {
      console.error('Error fetching data:', error);
      setError(error.message); // Set the error message
    }
  };

  return (
    <> {/* React fragment to return multiple elements */}
    <div className="tag">
      <button className="custom-button" onClick={handleClick}>
        Click me!
      </button>
      <div className="data">
        {error ? (
          <span className="error">{error}</span>
        ) : (
          data ? (
            <div>
              <p>ID: {data.id}</p>
              <p>Name: {data.name}</p>
              <p>Tags: {data.tags}</p>
              <p>Note: {data.note}</p>
              {/* Add more fields as needed */}
            </div>
          ) : (
            'The data will go here'
          )
        )}
      </div>
      <br></br>
      <p>Other info</p>
    </div>
    </>
  );
}

export default AddTagButton;/**************************************************************
 *
 *                     SettingsPage.jsx
 *
 *        Authors: Massimo Bottari, Elias Swartz
 *           Date: 03/07/2025
 *
 *     Summary: Allows users to log out, change password, view account information,
 *              verify accounts (if admin), and toggle between light and dark mode.
 * 
 **************************************************************/

"use client";

import "../globals.css";
import "./SettingsPage.css";
import UserVerificationCard from "./userVerificationCard.jsx";
import React, { useState, useEffect } from "react";
import { useClerk, useUser } from "@clerk/nextjs";
import ExportDataBtn from "./ExportDataBtn.jsx"; // Import the ExportDataBtn component

export default function SettingsPage() {
    const [lightMode, setLightMode] = useState(false);
    const [normalDataEntry, setNormalDataEntry] = useState(false);
    const { signOut } = useClerk();
    const { user } = useUser();

    const [isAdmin, setIsAdmin] = useState(false);
    const [approvals, setApprovals] = useState([]);

    const checkisAdmin = (value) => value == "user_2tB9Ny3ALEWuch9VvjlrQemjV8A";

    useEffect(() => {
        if (user) {
            console.log("user id: " + user?.id);
            setIsAdmin(checkisAdmin(user?.id));
            console.log("Admin status updated:", checkisAdmin(user?.id));
        }
    }, [user]);

    // Load approvals from localStorage on page load
    useEffect(() => {
        const savedApprovals = localStorage.getItem("approvals");
        if (savedApprovals) {
            setApprovals(JSON.parse(savedApprovals));
        }
    }, []);

    // Save approvals to localStorage whenever they change
    useEffect(() => {
        localStorage.setItem("approvals", JSON.stringify(approvals));
    }, [approvals]);

    const addVerificationBox = () => {
        console.log("Adding new verification box...");
        setApprovals((prev) => [
            ...prev,
            { id: Date.now(), name: `User ${prev.length + 1}`, email: `user${prev.length + 1}@example.com` }
        ]);
    };

    const approveVerification = (id) => {
        console.log(`User with ID ${id} approved.`);
        setApprovals((prev) => prev.filter((approval) => approval.id !== id));
    };

    const denyVerification = (id) => {
        console.log(`User with ID ${id} denied.`);
        setApprovals((prev) => prev.filter((approval) => approval.id !== id));
    };

    const handleForgotPassword = () => {
        window.location.href = "/reset_password"; // Redirects user to reset password page
    };

    // console.log("Admin status:", isAdmin);
    // console.log("Current approvals state:", approvals);
    // console.log("user:", user);
    console.log("firstName:", user?.firstName);
    console.log("lastName:", user?.lastName);
    console.log("email address:", user?.emailAddresses[0]?.emailAddress);


    return (
        <>
            <h1>Settings</h1>
            <div className="body">
                <div className="settings-container">
                    <div className="cardHolders">
                        <p className="subheading">Account Information & Options</p>

                        <div className="profile-card">
                            <h2>Profile</h2>
                            <div className="nameText">
                                <label htmlFor="first-name">First Name</label>
                                <label htmlFor="last-name">Last Name</label>
                            </div>
                            <div className="name">
                                <input type="text" id="first-name" value={user?.firstName || "Holden"} disabled />
                                <input type="text" id="last-name" value={user?.lastName || "Kittleburger"} disabled />
                            </div>
                            <form>
                                <label htmlFor="email">Email</label>
                                <input type="email" id="email" value={user?.emailAddresses?.[0]?.emailAddress || "holdenlovesburgers@hotmail.com"} disabled />

                                <label htmlFor="password">Password</label>
                                <input type="password" id="password" value="************" disabled />

                                <div className="change-password-container">
                                    <a href="#" className="change-password" onClick={handleForgotPassword}>
                                        Change Password
                                    </a>
                                </div>
                            </form>
                        </div>

                        <div className="options-card">
                            <div className="toggle">
                                <label className="switch">
                                    <input
                                        type="checkbox"
                                        checked={normalDataEntry}
                                        onChange={() => setNormalDataEntry(!normalDataEntry)}
                                    />
                                    <span className="slider round"></span>
                                </label>
                                <label>Normal Data Entry</label>
                                <ExportDataBtn></ExportDataBtn>
                            </div>
                            <div className="toggle">
                                <label className="switch">
                                    <input
                                        type="checkbox"
                                        checked={lightMode}
                                        onChange={() => setLightMode(!lightMode)}
                                    />
                                    <span className="slider round"></span>
                                </label>
                                <label>Light Mode</label>
                                <a href="#" className="logout" onClick={() => signOut()}>Logout ↪</a>
                            </div>

                            <button className="addv" onClick={addVerificationBox}>
                                Temp Add Verify
                            </button>
                        </div>
                    </div>
                </div>

                {isAdmin && approvals.length > 0 && (
                    <div className="adminapprovals">
                        <p className="subheading">New Account Approvals</p>
                        <div className="approvalscontainer">
                            {approvals.map((approval) => (
                                <UserVerificationCard 
                                    key={approval.id} 
                                    name={approval.name} 
                                    email={approval.email} 
                                    onApprove={() => approveVerification(approval.id)} 
                                    onDeny={() => denyVerification(approval.id)} 
                                />
                            ))}
                        </div>
                    </div>
                )}
            </div>
        </>
    );
}/**************************************************************
 *
 *                     ExportDataBtn.jsx
 *
 *        Authors: Elisa Yu, Arietta M. Goshtasby
 *           Date: 03/30/2025
 *
 *     Summary: Export Button on setting page that downloads an excel file 
 *              with all data from item Objects in the database.
 * 
 **************************************************************/

'use client'

import React, { useState, useEffect } from "react";
import './ExportDataBtn.css';
import * as XLSX from 'xlsx';

const ExportDataBtn = () => {


    // This function is triggered when the button is clicked
    const handleButtonClick = async () => {
        try {
            // Step 1: Fetch inventory data
            const inventoryResponse = await fetch(`../../api/db`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: 'SELECT * from dummy_data',
                    params: [],
                }),
            });

            if (!inventoryResponse.ok) {
                throw new Error(`Fetch error: ${inventoryResponse.status} - ${inventoryResponse.statusText}`);
            }
            
            const inventoryData = await inventoryResponse.json();
            console.log("Inventory data:", inventoryData);

            if (!Array.isArray(inventoryData)) {
                throw new Error("Invalid inventory data format");
            }

            // Step 2: Collect all borrower IDs
            const borrowerIds = new Set();
            
            inventoryData.forEach(item => {
                // Add current borrower ID if it exists
                if (item.current_borrower) {
                    borrowerIds.add(item.current_borrower);
                }
                
                // Add all borrower history IDs if they exist
                if (Array.isArray(item.borrow_history)) {
                    item.borrow_history.forEach(id => borrowerIds.add(id));
                } else if (item.borrow_history) {
                    borrowerIds.add(item.borrow_history);
                }
            });
            
            // Convert Set to Array for the query
            const borrowerIdsArray = Array.from(borrowerIds);
            
            // Step 3: Fetch borrower information if we have any IDs
            let borrowerMap = {};
            
            if (borrowerIdsArray.length > 0) {
                const borrowerResponse = await fetch(`../../api/db`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        text: 'SELECT id, name, email FROM borrowers WHERE id = ANY($1)',
                        params: [borrowerIdsArray],
                    }),
                });

                if (!borrowerResponse.ok) {
                    throw new Error(`Borrower fetch error: ${borrowerResponse.status} - ${borrowerResponse.statusText}`);
                }
                
                const borrowerData = await borrowerResponse.json();
                console.log("Borrower data:", borrowerData);
                
                // Create a map for fast lookup
                borrowerMap = borrowerData.reduce((map, borrower) => {
                    map[borrower.id] = { name: borrower.name, email: borrower.email };
                    return map;
                }, {});
            }
            
            // Step 4: Process inventory data with borrower information
            const filteredData = inventoryData.map(item => {
                // Process arrays
                const timePeriodFormatted = Array.isArray(item.time_period) 
                    ? item.time_period.join(', ') 
                    : item.time_period;
                
                const colorFormatted = Array.isArray(item.color)
                    ? item.color.join(', ')
                    : item.color;
                
                const seasonFormatted = Array.isArray(item.season)
                    ? item.season.join(', ')
                    : item.season;
                
                const conditionFormatted = Array.isArray(item.condition)
                    ? item.condition.join(', ')
                    : item.condition;
                
                // Process current borrower
                let currentBorrowerInfo = "None";
                if (item.current_borrower && borrowerMap[item.current_borrower]) {
                    const borrower = borrowerMap[item.current_borrower];
                    currentBorrowerInfo = `${borrower.name} (${borrower.email})`;
                }
                
                // Process borrower history
                let borrowHistoryInfo = "";
                if (Array.isArray(item.borrow_history) && item.borrow_history.length > 0) {
                    borrowHistoryInfo = item.borrow_history.map(id => {
                        if (borrowerMap[id]) {
                            return `${borrowerMap[id].name}`;
                        }
                        return `ID: ${id}`;
                    }).join(', ');
                } else if (item.borrow_history && borrowerMap[item.borrow_history]) {
                    const borrower = borrowerMap[item.borrow_history];
                    borrowHistoryInfo = `${borrower.name} (${borrower.email})`;
                } else {
                    borrowHistoryInfo = "None";
                }
                
                return {
                    id: item.id,
                    name: item.name,
                    status: item.status,
                    age_group: item.age_group,
                    gender: item.gender,
                    color: colorFormatted,
                    season: seasonFormatted,
                    garment_type: item.garment_type,
                    size: item.size,
                    time_period: timePeriodFormatted,
                    condition: conditionFormatted,
                    cost: item.cost,
                    location: item.location,
                    date_added: item.date_added,
                    current_borrower: currentBorrowerInfo,
                    borrow_history: borrowHistoryInfo,
                    notes: item.notes
                };
            });
            
            // Create a new workbook
            const workbook = XLSX.utils.book_new();
            
            // Convert the JSON data to a worksheet
            const worksheet = XLSX.utils.json_to_sheet(filteredData);
            
            // Add the worksheet to the workbook
            XLSX.utils.book_append_sheet(workbook, worksheet, "Inventory Data");
            
            // Generate an Excel file
            const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
            
            // Create a Blob from the buffer
            const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            
            // Create a URL for the Blob
            const url = URL.createObjectURL(blob);
            
            // Create a link element and trigger download
            const link = document.createElement('a');
            link.href = url;
            link.download = 'inventory_data.xlsx';
            document.body.appendChild(link);
            link.click();
            
            // Clean up
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        } catch (error){
            alert("An error occurred. Please try again.");
            return;
        }

    }

  return (
    <div>
      <button className="export-btn"
        onClick={handleButtonClick}
      >⬆ Export Data</button>
    </div>
  );
};

export default ExportDataBtn;
"use client";

import React, { useState } from 'react';
import ExpandedEntry from './ExpandedEntry';

export default function SelectItemButton() {
    const [showPopup, setShowPopup] = useState(false);
    const [itemData, setItemData] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    const handleClick = async () => {
        const id = prompt("Please enter item id", "");

        if (!id) {
            alert("User cancelled the prompt.");
            return;
        }

        setIsLoading(true);
        setError(null);

        try {
            const response = await fetch(`../../api/db`, { 
                method: 'PUT', // Use the PUT method
                headers: {
                  'Content-Type': 'application/json' // Specify the content type
                },
                body: JSON.stringify({
                  text: 'SELECT * FROM dummy_data WHERE id = $1', // SQL query for selecting the record
                  params: [id] // Parameters for the query
                })
              });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            setItemData(data);
            setShowPopup(true);
        } catch (error) {
            console.error('Error fetching item:', error);
            setError('Failed to fetch item. Please try again later.');
            alert(error.message);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="relative">
            <button 
                onClick={handleClick}
                disabled={isLoading}
                className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:bg-gray-400"
            >
                {isLoading ? 'Loading...' : 'Select Item'}
            </button>
            
            {error && (
                <div className="text-red-500 mt-2">{error}</div>
            )}
            
            {showPopup && (
                <ExpandedEntry 
                    itemData={itemData} 
                    onClose={() => setShowPopup(false)} 
                />
            )}
        </div>
    );
}
//   const handleClick = () => {
//     let name = prompt("Please enter item name", "");

//     if (name == null || name === "") {
//       alert("User cancelled the prompt.");
//     } else {
//       // Making a GET request to the serverless function endpoint
//       fetch(`../../api/inventoryQueries?action=selectByName`, { 
//         method: 'PUT',
//         headers: {
//           'Content-Type': 'application/json' // Specify the content type
//         },
//         body: JSON.stringify({ name }) // Send the name as a JSON object
//       })
//         .then(response => {
//           if (!response.ok) {
//             throw new Error(`HTTP error! status: ${response.status}`);
//           }
//           return response.json();
//         })
//         .then(data => {
//           if (data.length > 0) {
//             const itemIds = data.map(item => item.id).join(", ");
//             alert(`Item ID(s): ${itemIds}`);
//           } else {
//             alert("Item not found.");
//           }
//         })
//         .catch(error => {
//           console.error('Error fetching item:', error);
//           alert('Error fetching item. Please try again later.');
//         });
//     }
//   };

//   return (
//     <button
//       className="text-center border p-2 rounded bg-gray-100 hover:bg-gray-200"
//       onClick={handleClick}
//     >
//       Select Item
//     </button>
//   );
// }
"use client"; // This file is client-side

import { useState, useEffect } from 'react';

// Function to get an array of the names of the checked checkboxes
function getCheckedCheckboxes() {
    const checkedCheckboxes = [];
    document.querySelectorAll(".checkbox:checked").forEach((checkbox) => {
      checkedCheckboxes.push(checkbox.id); // Collect the ID of each checked checkbox
    });
    return checkedCheckboxes;
}

// Function to get the array of selected tags 
function getSelectedTags() {
    const selectedOptions = [];
    const dropdown = document.getElementById("multiSelect");

    // Loop through each selected option in the dropdown
    Array.from(dropdown.selectedOptions).forEach((option) => {
        selectedOptions.push(option.value); // Collect the value of each selected option
    });

    return selectedOptions;
}

// Main function to render the component 
export default function SelectByTag() {
    const [tags, setTags] = useState([]);
    const [error, setError] = useState(null);
    const [entries, setEntries] = useState([]);
    const [selectedTags, setSelectedTags] = useState([]);

    // Fetch the tags from the API (automatically on load)
    useEffect(() => {
        const fetchTags = async () => {
            try {
                // Fetch all tags from the API
                const response = await fetch('/api/inventoryQueries?action=fetchTags');
                if (!response.ok) throw new Error('Network response was not ok');
                const data = await response.json();

                // Convert the array of objects to an array of strings
                const tagsArray = data.map(item => item.tag);

                // Save the tags in state
                setTags(tagsArray);
            } catch (error) {
                console.error('Error fetching tags:', error);
                setError(error.message);
            }
        };
        
        // Call the fetchTags function
        fetchTags();
    }, []);

    const handleClick = async () => {
        // Clear entries in state setEntries([])
        setEntries([]);

        // Get checked checkbox IDs and create the filters object
        const checkedCheckboxes = getCheckedCheckboxes();
        const selectedTags = getSelectedTags();

        // Create the data object to send to the API
        const data = {
            status: checkedCheckboxes,
            tags: selectedTags
        }

        // Run the request to get the filtered items
        try {
            const response = await fetch (`../../api/inventoryQueries?action=filterStatusTags`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                // Send the data object as JSON
                body: JSON.stringify(data) 
            });
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            const result = await response.json();

            // Set the resulting entries in state
            setEntries(result);
        } catch (error) {
            console.error('Error fetching data:', error);
            setError(error.message);
        }
    }

    // Function to handle the multi-selection of tags
    const handleSelect = (e) => {
        // Get selected options as an array
        const selectedOptions = Array.from(e.target.selectedOptions); 

        // Extract values
        const values = selectedOptions.map(option => option.value); 
        
        // Update state with the selected values
        setSelectedTags(values); 
    };

    return (
        <div>
            {/* Checkboxes for status */}
            <div>
                <label className="checkbox-container">
                    <input type="checkbox" className="checkbox" id="Available"></input> Available
                    <span className="checkmark"></span>
                </label>
            </div>
            <div>
                <label className="checkbox-container">
                    <input type="checkbox" className="checkbox" id="Borrowed"></input> Borrowed
                    <span className="checkmark"></span>
                </label>
            </div>
            <div>
                <label className="checkbox-container">
                    <input type="checkbox" className="checkbox" id="Overdue"></input> Overdue
                    <span className="checkmark"></span>
                </label>
            </div>

            {/* Multi-select dropdown for tags */}
            <div>
                <div>
                    <label htmlFor="multiSelect">Choose tags:</label>
                </div>
                <select id="multiSelect" multiple onChange={(e) => handleSelect(e)}>
                    {tags.map((tag) => (
                        <option key={tag} value={tag}>
                            {tag}
                        </option>
                    ))}
                </select>
            </div>

            {/* Button to apply selections */}
            <div>
                <button onClick={handleClick}>Apply</button>
            </div>

            {/* Printing out the entries after selection */}
            <div>
                {entries.length > 0 ? (
                <ul>
                    {entries.map((entry) => (
                    <li key={entry.id}>
                        <strong>ID:</strong> {entry.id} <strong>Name:</strong> {entry.name}
                    </li>
                    ))}
                </ul>
                ) : (
                <p>No entries available.</p>
                )}
            </div>
        </div>
    );
}
'use client'

import React, { useState, useEffect } from "react";
import "./ReturnButton.css"
import ReturnPopup from "./ReturnPopup.jsx"
import StylishButton from './StylishButton.jsx';

const ReturnButton = ( {selectedItems = [], onSuccess } ) => {
    const [isPopupVisible, setIsPopupVisible] = useState(false);
    const [borrowedSelectedItems, setBorrowedSelectedItems] = useState(selectedItems); 

    const handleSubmit = async (e) => {
        if(selectedItems == 0) {
            alert('No Items selected.'); 
        } else {
            const isValid = await handleValidity();
            if (isValid) {
                // Open the popup only if validity is true
                setIsPopupVisible(true);  
            } else {
                alert('Some items are invalid. Please try again.');
            }
        }
    }

    async function handleValidity() {

        try {
          const response = await fetch('../../api/borrowManagement?action=returnValidity', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              selectedItems: selectedItems.map(item => item.id),
            }),
          });
    
          if (!response.ok) {
            throw new Error(`Fetch error: ${response.status} - ${response.statusText}`);
          }
    
          const result = await response.json(); 
          if (result.message) {
              alert(result.message);  
          }
    
          // Reset available items after check
          setBorrowedSelectedItems(result.availableItems); 

          // Return false if nothing in array
          if (result.availableItems.length == 0) {
            return false;
          }
          // Return true if the validity check passes
          return true; 
        } catch (error) {
          console.error('Error during validity check:', error);
          return false;
        }
      }

    const handleClosePopup = () => {
        setIsPopupVisible(false);
    }

    return (
        <div>
            <StylishButton label="Return" styleType="style1" 
                           onClick={handleSubmit}/>
            { isPopupVisible && (
                <ReturnPopup onClose={handleClosePopup}
                             units = {borrowedSelectedItems}/>
            )}
        </div>
    );
}

export default ReturnButton;
/**************************************************************
 *
 *                     UserVerificationCard.jsx
 *
 *        Authors: Massimo Bottari, Elias Swartz
 *           Date: 03/07/2025
 *
 *     Summary: Used with SettingsPage.jsx to display a card for each user that needs to be verified.
 * 
 **************************************************************/

export default function UserVerificationCard({ name, email, onApprove, onDeny }) {
    return (
        <div className="newaccountapprovalbutton">
            <div className="info">
                <h2>{name}</h2>
                <p>{email}</p>
            </div>
            <div className="buttons">
                <button onClick={onApprove}>Approve</button>
                <button onClick={onDeny}>Deny</button>
            </div>
        </div>            
    );
}
//!IMPORTANT
//Use the SelectItem button component created by Dan and Elisa, to select an item based on a particular id.
//IMPORTANT
"use client";
import React, { useState, useEffect } from 'react';
import Popup from 'reactjs-popup';
import 'reactjs-popup/dist/index.css';
import './ExpandedEntry.css';
import SelectDropdown from './SelectDropdown';

function ExpandedEntry({ itemData, onClose }) {
    const [isEditing, setIsEditing] = useState(false);
    const [newName, setNewName] = useState('');
    const [newNote, setNewNote] = useState('');
    const [newStatus, setNewStatus] = useState('');
    const [newID, setNewID] = useState('');
    const [keywords, setKeywords] = useState([]);
    const [showSaveButton, setShowSaveButton] = useState(false);
    const [showDiscardButton, setShowDiscardButton] = useState(false);
    const [showEditButton, setShowEditButton] = useState(true);
    const [showReturnButton, setShowReturnButton] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        if (itemData) {
            setNewName(itemData.name);
            setNewNote(itemData.note || '');
            setNewID(itemData.id); 
            setKeywords(itemData.tags || []);
            setNewStatus(itemData.status || '');
        }        
    }, [itemData]);



    const onEdit = () => {
        setIsEditing(true);
        setShowSaveButton(true);
        setShowDiscardButton(true);
        setShowEditButton(false);
        setShowReturnButton(false);
    };

    const onSave = () => {
        itemData.name = newName;
        itemData.note = newNote;
        itemData.tags = keywords;
        itemData.status = newStatus;
        setIsEditing(false);
        setShowSaveButton(false);
        setShowDiscardButton(false);
        setShowEditButton(true);
        setShowReturnButton(true);
    };

    const onDiscard = () => {
        setNewName(itemData.name);
        setNewStatus(itemData.status || '');
        setNewNote(itemData.note || '');
        setNewID(itemData.id);
        setKeywords(itemData.tags || []);
        setIsEditing(false);
        setShowSaveButton(false);
        setShowDiscardButton(false);
        setShowEditButton(true);
        setShowReturnButton(true);
    };

    const handleUpdateNote = async (event) => {
        try {
            const response = await fetch("../../api/db", {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  text: "UPDATE dummy_data SET note = $1 WHERE id = $2",
                  params: [newNote, itemData.id],
                }),
              });
            if (!response.ok) {
                throw new Error('Failed to update note');
            }
        } catch (error) {
            setError(error.message);
        }
    };
    
    const handleUpdateName = async (event) => {
        try {
            const response = await fetch("../../api/db", {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  text: "UPDATE dummy_data SET name = $1 WHERE id = $2",
                  params: [newName, itemData.id],
                }),
              });
            if (!response.ok) {
                throw new Error('Failed to update name');
            }
        } catch (error) {
            setError(error.message);
        }
    };

    const handleUpdateStatus = async (event) => {
        try {
            const response = await fetch("../../api/db", {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  text: "UPDATE dummy_data SET status = $1 WHERE id = $2",
                  params: [newStatus, itemData.id],
                }),
              });
            if (!response.ok) {
                throw new Error('Failed to update status');
            }
        } catch (error) {
            setError(error.message);
        }
    };

    const handleKeywordsChange = (newKeywords) => {
        setKeywords(newKeywords);
    };
    
    const handleUpdateTags = async () => {
        if (!itemData) return;
    
        try {
            const response = await fetch(`../../api/inventoryQueries?action=updateTags`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: itemData.id, tags: keywords }),
            });
            if (!response.ok) {
                throw new Error(`Network response was not ok: ${response.statusText}`);
            }
            const result = await response.json();
            setError(null);
        } catch (error) {
            console.error('Error updating tags:', error);
            setError(error.message);
        }
    };
    
    const handleUpdateID = async (event) => {
        try {
            const response = await fetch('/api/itemManagement?action=update', {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    id: itemData.id,
                    newId: newID,
                    data: {
                        name: itemData.name,
                        note: itemData.note,
                        tags: itemData.tags
                    }
                }),
            });
    
            const data = await response.json();
    
            if (!response.ok) {
                throw new Error(data.message || 'Failed to update ID');
            }
            if (response.status === 201) {
                alert(data.message);
            } else {
                alert('ID updated successfully');
            }
        } catch (error) {
            alert(error.message);
            console.error(error.message);
        }
    };

    const handleSaveAndUpdate = () => {
        onSave();
        handleUpdateNote();
        handleUpdateName();
        handleUpdateStatus();
        handleUpdateTags();
        handleUpdateID();
    };



    return (
        <Popup open={true} onClose={onClose} modal nested>
            <div className='modal'>
            {itemData && (
                <div className="overlay">
                    <div className="popup">

                        <div className="header">
                            <div className="image-placeholder">
                                <img className="image-icon"
                                    src="https://www.hagca.com/uploads/1/2/7/1/127145683/holden-kittelberger-headshot_orig.jpg"
                                    alt="Holden Kittelberger"
                                />
                            </div>
                            
                            <div className="item-details">
                                <div>
                                    {isEditing ? (
                                        <div>
                                            <p>Name: </p>
                                            <input
                                                type="text"
                                                value={newName}
                                                onChange={(e) => setNewName(e.target.value)}
                                                className="content form-control"
                                                placeholder="Enter name"
                                            />
                                            <p>ID: </p>
                                            <input
                                                type="text"
                                                value={newID}
                                                onChange={(e) => setNewID(e.target.value)}
                                                className="content form-control"
                                                placeholder={itemData.id}
                                            />
                                            <p>Status: </p>
                                            <input
                                                type="text"
                                                value={newStatus}
                                                onChange={(e) => setNewStatus(e.target.value)}
                                                className="content form-control"
                                                placeholder={itemData.status}
                                            />
                                            <p>Tags: </p>
                                            <SelectDropdown selectedTags={keywords} onKeywordsChange={handleKeywordsChange} />
                                        </div>
                                    ) : (
                                        <div>
                                            <h2 className="item-title">{itemData.name}</h2> 
                                            <div className="item-id">ID: {itemData.id}</div>   
                                            <div className="status">Status: {itemData.status}</div>     
                                            <div className="tags">
                                            Tags:
                                            {itemData.tags && itemData.tags.map((tag, index) => (
                                                <div key={index} className="tag">{tag}</div>
                                            ))}
                                        </div>                                                                       
                                        </div>
                                    )}
                                </div>
                            </div>
                            
                            {/*ADD THE DATA CALLS TO FILL IN THIS FORMATION LATER WHEN THESE ATTRIBUTES EXIST-->*/}
                            <div className="borrower-info">
                                <p>Borrower: John Smith</p>
                                <p>Email: John.Smith@xxxx.xxx</p>
                                <p>Cell: (XXX) XXX-XXXX</p>
                                <p>Date Borrowed: XX/XX/XXXX</p>
                                <p>Return Date: XX/XX/XXXX</p>
                                <p className="approval">Approved By: J. Appleseed</p>
                            </div>
                        </div>
                        
                        {isEditing ? (
                            <div>
                                <p>Note: </p>
                                <textarea
                                    value={newNote}
                                    onChange={(e) => setNewNote(e.target.value)}
                                    className="content form-control"
                                    placeholder="Enter note"
                                />
                            </div>
                        ) : (
                            <div className="content">
                                <p>{itemData.note}</p>
                            </div>
                        )}

                        <div className="actions">
                            {showEditButton && <button onClick={onEdit} className="button button-edit">🖊️ Edit</button>}
                            {showSaveButton && <button onClick={handleSaveAndUpdate} className="button button-save">✔️ Save Changes</button>}
                            {showDiscardButton && <button onClick={onDiscard} className="button button-edit">❌ Discard Changes</button>}
                            {showReturnButton && <button onClick={onClose} className="button button-return">Return</button>}
                        </div>
                    </div>
                </div>
                )}
            </div>
        </Popup>
    );
  }

  export default ExpandedEntry;"use client"; // This file is client-side

import React, { useState, useEffect } from 'react';
import { Form } from 'react-bootstrap';
import './SelectDropdown.css';

const SelectDropdown = ({ selectedTags, onKeywordsChange }) => {
    const [select_tags, set_Select_tags] = useState(selectedTags || []);

    const tags = [
        { id: 1, label: 'XS' },
        { id: 2, label: 'S' },
        { id: 3, label: 'M' },
        { id: 4, label: 'L' },
        { id: 5, label: 'XL' },
        { id: 6, label: 'Red' },
        { id: 7, label: 'Blue' },
        { id: 8, label: 'Yellow' },
        { id: 9, label: 'Old' },
        { id: 10, label: 'New' },
    ];

    useEffect(() => {
        set_Select_tags(selectedTags || []);
    }, [selectedTags]);


    const tagChange = (event) => {
        const tagId = parseInt(event.target.value);
        const choosen = event.target.checked;
        const tagLabel = tags.find(tag => tag.id === tagId).label;

        let updatedtags;
        if (choosen) {
            updatedtags = [...select_tags, tagLabel];
        } else {
            updatedtags = select_tags.filter((label) => label !== tagLabel);
        }
        set_Select_tags(updatedtags);
        onKeywordsChange(updatedtags); // Pass the updated keywords to the parent component
    };

    return (
        <div>
            <br></br>
            <Form className="tags">
                {tags.map((tag) => (
                    <div key={tag.id} className="tag">
                    <Form.Check
                        type="checkbox"
                        id={`tag-${tag.id}`}
                        label={` ${tag.label}`}
                        value={tag.id}
                        checked={select_tags.includes(tag.label)}
                        onChange={tagChange}
                        className="checkbox"
                    />
                    {tag.id === 6 && (
                        <div className="indicator" style={{ backgroundColor: "#FF0000" }}></div>
                    )}
                    {tag.id === 7 && (
                         <div className="indicator" style={{ backgroundColor: "#0000FF" }}></div>
                    )}
                    {tag.id === 8 && (
                        <div className="indicator" style={{ backgroundColor: "#F7FF00" }}></div>
                    )}
                </div>
                ))}
            </Form>
        </div>
    );
};

export default SelectDropdown;export default function EyeconOff({ color }) {
    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke={color} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="feather feather-eye-off">
            <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
            <line x1="1" y1="1" x2="23" y2="23"></line>
        </svg>
    );
}import React, { useState, useRef, useEffect } from 'react';
import './Filter.css';
import { useFilterContext } from "../contexts/FilterContext.js" 
import Calendar from '../../assets/Calendar.jsx';
import Reset from '../../assets/Reset.jsx';
import Dropdown from '../../assets/Dropdown.jsx';
import CalendarPicker from '../Calendar/CalendarPicker.jsx';

const FilterComponent = ({ isVisible, onClose, className }) => {
    const { selectedFilters, setSelectedFilters } = useFilterContext();
    const fields = {
        Condition: {
            options: ["Great", "Needs washing", "Needs repair", "Needs dry cleaning", "Not usable"]
        }, 
        Gender: {
            options: ["Male", "Female", "Unisex"]
        }, 
        Color: {
            options: ["Red", "Black", "Blue", "Green", "Purple", "Yellow", "Pink", "Gray", "Brown", "Orange", "White"]
        }, 
        Garment_Type: {
            options: ["Gowns/dresses", "Outerwear", "Accessories", "Bottoms", "Shoes", "Socks/hose", "Tops", "Vests"]
        }, 
        Size: {
            options: ["One Size", "Small", "Medium", "Large"]
        }, 
        Time_Period: {
            options: ["1800s - 1840s", "1750s - 1800s", "Post-1910s", "Pre-1700s"]
        },
    };
    const checkboxFields = {
        Status: {
            options: ["Available", "Overdue", "Borrowed", "Missing"]
        },
        Season: {
            options: ["Winter", "Summer", "Spring", "Fall"]
        } 
    }
    // Initialize an object to all "" for filtering later on on the backend
    let baseOptions = {}
    Object.keys(fields).map((key) => {
        baseOptions = {...baseOptions, [key.toLowerCase()]: []}
    })

    baseOptions = {
        ...baseOptions,
        status: [],
        season: [],
        return_date: { start: null, end: null }
    }
    const [openDropdowns, setOpenDropdowns] = useState({});
    const [isCalendarOpen, setIsCalendarOpen] = useState(false);
    const [dateRange, setDateRange] = useState({ start: null, end: null });
    const [selectedOptions, setSelectedOptions] = useState(selectedFilters);
    const dropdownRefs = useRef({});
    const checkboxRefs = useRef({});
    const calendarRef = useRef(null);
    const calendarPickerContainerRef = useRef(null);
    
    // Keep selectedOptions in sync with selectedFilters
    useEffect(() => {
        if (JSON.stringify(selectedOptions) !== JSON.stringify(selectedFilters)) {
            setSelectedOptions(selectedFilters);
            if (selectedFilters.return_date) {
                setDateRange({
                    start: selectedFilters.return_date.start,
                    end: selectedFilters.return_date.end
                });
            }
        }
    }, [selectedFilters, selectedOptions]);

    // Handle updates to selectedOptions
    const updateFilters = (newOptions) => {
        // Only update if there's an actual change
        if (JSON.stringify(newOptions) !== JSON.stringify(selectedFilters)) {
            setSelectedOptions(newOptions);
            setSelectedFilters(newOptions);
        }
    };

    const handleReset = () => {
        const resetOptions = {
            ...baseOptions,
            return_date: { start: null, end: null }
        };
        updateFilters(resetOptions);
        setDateRange({ start: null, end: null });
        
        // Use the calendar ref to reset the calendar UI state
        if (calendarRef.current && calendarRef.current.resetCalendar) {
            calendarRef.current.resetCalendar();
        }
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            // Handle dropdown clicks
            Object.keys(dropdownRefs.current).forEach(key => {
                if (dropdownRefs.current[key] && !dropdownRefs.current[key].contains(event.target)) {
                    setOpenDropdowns(prev => ({...prev, [key]: false}));
                }
            });

            // Handle calendar clicks - make sure we're not clicking on the calendar icon or within the calendar
            const isClickInCalendarButton = event.target.closest('.calendar-icon') || 
                event.target.closest('.select-box');
            
            const isClickInCalendarPicker = calendarPickerContainerRef.current && 
                calendarPickerContainerRef.current.contains(event.target);
                
            if (!isClickInCalendarButton && !isClickInCalendarPicker && isCalendarOpen) {
                setIsCalendarOpen(false);
            }
        };
    
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [isCalendarOpen]);
    
    const toggleDropdown = (label) => {
        setOpenDropdowns(prev => ({
            ...prev,
            [label]: !prev[label]
        }));
    };

    // Updated to handle date range selection with proper formatting
    const handleDateRangeSelect = (startDate, endDate) => {
        // Convert date strings to standardized format for consistent backend processing
        // If null values are passed, keep them as null
        const formattedStartDate = startDate || null;
        const formattedEndDate = endDate || null;
        
        setDateRange({ start: startDate, end: endDate });
        updateFilters({
            ...selectedOptions,
            return_date: { 
                start: formattedStartDate, 
                end: formattedEndDate 
            }
        });
    };

    // Now enables multiple options to be selected
    const handleOptionSelect = (label, option) => {
        const formattedLabel = label.toLowerCase().replaceAll(" ", "_");
        const currentValues = selectedOptions[formattedLabel] || [];
        const valueExists = currentValues.includes(option);
        
        updateFilters({
            ...selectedOptions,
            [formattedLabel]: valueExists 
                ? currentValues.filter(item => item !== option)
                : [...currentValues, option]
        });
    };
    
    const updateCheckboxes = (field, value) => (e) => {
        const currentValues = selectedOptions[field] || [];
        updateFilters({
            ...selectedOptions,
            [field]: e.target.checked
                ? [...currentValues, value]
                : currentValues.filter(item => item !== value)
        });
    };

    // Format date range display text
    const getDateRangeText = () => {
        if (dateRange.start && dateRange.end) {
            return `${dateRange.start} - ${dateRange.end}`;
        } else if (dateRange.start) {
            return `${dateRange.start} - Select end date`;
        } else {
            return 'Select date range...';
        }
    };

    return (
        <div className={`filter-component ${isVisible ? 'visible' : ''} ${className}`}>
            <div className="filters">
                <div className="filter-section">
                    <h2>Status</h2>
                    <div className="status-grid">
                    {checkboxFields.Status.options.map((status) => (
                        <label key={status}>
                            <input 
                                type="checkbox" 
                                checked={selectedOptions.status.includes(status)}
                                onChange={updateCheckboxes("status", status)}
                            />
                            {status}
                        </label>
                    ))}
                    </div>
                </div>

                {Object.keys(fields).map((label) => {
                    let currLabel = selectedOptions[label.toLowerCase().replaceAll(" ", "_")];
                    return (
                    <div key={label} className="filter-section">
                        <h2>{label.replaceAll("_", " ")}</h2>
                        <div 
                            className="custom-select"
                            ref={el => dropdownRefs.current[label] = el}
                        >
                            <div 
                                className={`select-box ${openDropdowns[label] ? 'active' : ''}`}
                                onClick={() => toggleDropdown(label)}
                            >
                                <span>
                                    {currLabel.length === 0 
                                        ? 'Select...' 
                                        : currLabel.join(', ')}
                                </span>
                                <Dropdown className={`dropdown-icon ${openDropdowns[label] ? 'rotated' : ''}`} />
                            </div>

                            {openDropdowns[label] && (
                                <ul className='dropdown-options'>
                                    {fields[label].options.map((option) => (
                                        <li 
                                            key={option} 
                                            onClick={() => handleOptionSelect(label, option)}
                                            className={selectedOptions[label.toLowerCase()].includes(option) ? 'selected' : ''}
                                        >
                                            {option}
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </div>
                )})}

                <div className="filter-section">
                    <h2>Season</h2>
                    <div className="season-grid">
                    {checkboxFields.Season.options.map((season) => (
                        <label key={season}>
                            <input 
                                type="checkbox" 
                                checked={selectedOptions.season.includes(season)}
                                onChange={updateCheckboxes("season", season)}
                            />
                            {season}
                        </label>
                    ))}
                    </div>
                </div>

                <div className="filter-section">
                    <h2>Return Date Range</h2>
                    <div className="date-select-container" ref={calendarPickerContainerRef}>
                        <div className="custom-select">
                            <div 
                                className="select-box"
                                onClick={() => setIsCalendarOpen(!isCalendarOpen)}
                            >
                                <span>{getDateRangeText()}</span>
                                <Calendar className="calendar-icon" />
                            </div>
                            {isCalendarOpen && (
                                <CalendarPicker 
                                    isOpen={isCalendarOpen}
                                    onClose={() => setIsCalendarOpen(false)}
                                    onDateSelect={handleDateRangeSelect}
                                    ref={calendarRef}
                                />
                            )}
                        </div>
                    </div>
                </div>
                <div>
                    <button className="reset-button" onClick={handleReset}>
                        <Reset />
                        <p>Reset</p>
                    </button>
                </div>
            </div>
        </div>
    );
};

export default FilterComponent;'use client'

import "./AddItemButton.css";
import StylishButton from './StylishButton.jsx';
import Link from "next/link";

export default function MyForm() {

  return (
    <div>
      <Link href="/add">
        <StylishButton
          label="+ Item"
          styleType="style3"
        />
      </Link>
    </div>
  );
}
/**
 * @fileoverview Component containing the logic and design of the search bar 
 * used to filter results based on name, notes, id, or borrower name.
 * 
 * @file SearchBar.jsx
 * @date February 16th, 2025
 * @authors Peter Morganelli & Shayne Sidman 
 *  
 */

"use client";

import "./SearchBar.css";
import { useState, useEffect } from "react"; 

export default function SearchBar({ updateSearchResults }) {
    const [query, setQuery] = useState("");

    // Fetch relevant search results when search query is changed
    useEffect(() => { 
        const fetchData = async () => {
            try {
                const response = await fetch(`/api/itemManagement?action=search`, {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ searchQuery: query }),
                });

                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }

                const data = await response.json();
                updateSearchResults(data);  // Update results on inventory page
            } catch (error) {
                console.log(error);
            }
        };
        fetchData();
    }, [query]);

    return (
        <div className="Searchbar">
            <input 
                type="text" 
                placeholder="Search..."
                value={query}
                onChange={(e) => { setQuery(e.target.value); }}
                onKeyDown={(e) => {
                    if (e.key === "Backspace" || e.key === "Delete") {
                        setQuery(e.target.value);
                    }
                }}
            />
        </div>
    );
}/**************************************************************
 *
 *                     AddPage.jsx
 *
 *        Authors: Dan Glorioso & Massimo Bottari
 *           Date: 02/01/2025
 *
 *     Summary: The AddPage component is a form that allows users to
 *     add new items to the inventory. It has error checking for empty fields,
 *     and featured multi-select dropdowns for garment type, time period, 
 *     season, condition, and color. It also has a drag-and-drop image upload
 *     feature.
 * 
 **************************************************************/

"use client";

import { useState, useEffect } from 'react';
import "../globals.css";
import { Dropdown } from 'primereact/dropdown';
import { MultiSelect } from 'primereact/multiselect';
import StylishButton from './StylishButton.jsx';
import Link from 'next/link';
import { useGlobalContext } from './contexts/ToggleContext';

export default function AddPage() {

    // Left column state variables
    const [dragOver, setDragOver] = useState(false);
    const [preview, setPreview] = useState(null);

    // Right column state variables
    const { isToggleEnabled } = useGlobalContext(); // TOGGLE FUNCTIONALITY
    const [idText, setIDText] = useState("");
    const [placeholderDate, setPlaceholderDate] = useState("");
    const [manualIdText, setManualIdText] = useState("");
    const [manualDateText, setManualDateText] = useState("");

    const [itemText, setItemText] = useState("");
    const [locationText, setLocationText] = useState("");
    const [priceText, setPriceText] = useState("");
    const [notesText, setNotesText] = useState("");
    const [selectedGarment, setSelectedGarment] = useState("");
    const [selectedTimePeriod, setSelectedTimePeriod] = useState([]);
    const [ageSelection, setAgeSelection] = useState(null);
    const [genderSelection, setGenderSelection] = useState(null);
    const [selectedSize, setSelectedSize] = useState([]);
    const [selectedSeason, setSelectedSeason] = useState([]);
    const [condition, setCondition] = useState([]);
    const [selectedColors, setSelectedColors] = useState([]);

    // "Overall" state variables
    const [errors, setErrors] = useState({});
    const [statusMessage, setStatusMessage] = useState("");
    const [statusType, setStatusType] = useState("");

    // Define all of the options for buttons and dropdowns
    const garmentOptions = [
        { label: "Gowns/dresses", value: "Gowns/dresses" },
        { label: "Outerwear", value: "Outerwear" },
        { label: "Accessories", value: "Accessories" },
        { label: "Bottoms", value: "Bottoms" },
        { label: "Shoes", value: "Shoes" },
        { label: "Socks/hose", value: "Socks/hose" },
        { label: "Tops", value: "Tops" },
        { label: "Vests", value: "Vests" }
    ];
    const timePeriods = [
        { name: "Post-1920s" },
        { name: "Pre-1700s" },
        { name: "1750s-1800s" },
        { name: "1800s-1840s" }
    ];
    const ageOptions = [
        { value: "Youth", label: "Youth" },
        { value: "Adult", label: "Adult" }
    ];
    const genderOptions = [
        { value: "Male", label: "Male" },
        { value: "Female", label: "Female" },
        { value: "Unisex", label: "Unisex" }
    ];
    const sizes = [
        { label: "Small", value: "Small" },
        { label: "Medium", value: "Medium" },
        { label: "Large", value: "Large" },
        { label: "X-Large", value: "X-large" }
    ];
    const seasons = [
        { label: "Fall", value: "Fall" },
        { label: "Winter", value: "Winter" },
        { label: "Spring", value: "Spring" },
        { label: "Summer", value: "Summer" }
    ];
    const conditions = [
        { name: "Needs repair" },
        { name: "Needs dry cleaning" },
        { name: "Needs washing" },
        { name: "Not usable" },
        { name: "Great" },
        { name: "Good" },
    ]
    const colors = [
        { name: "Red", hex: "#FF3B30" },
        { name: "Orange", hex: "#FF9500" },
        { name: "Yellow", hex: "#FFCC00" },
        { name: "Green", hex: "#34C759" },
        { name: "Blue", hex: "#5856D6" },
        { name: "Purple", hex: "#AF52DE" },
        { name: "Pink", hex: "#FF93B7" },
        { name: "Brown", hex: "#A2845E" },
        { name: "White", hex: "#FFFFFF", border: "#c9c9c9" },
        { name: "Gray", hex: "#8E8E93" },
        { name: "Black", hex: "#000000" },
      ];

    // Function to handle and update file selection
    const handleFileSelect = (file) => {
        if (file && file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.onload = (e) => setPreview(e.target.result);
            reader.readAsDataURL(file);
            
            // Clear any image upload error if it exists
            if (errors.image) {
                setErrors({...errors, image: false});
            }
        } else {
            alert("Please upload a valid image file.");
        }
    };

    // Function to handle drag-and-drop file upload
    const handleDrop = (event) => {
        event.preventDefault();
        setDragOver(false);
        const file = event.dataTransfer.files[0];
        handleFileSelect(file);
    };

    // Function to handle file input change
    const handleFileInputChange = (event) => {
        const file = event.target.files[0];
        handleFileSelect(file);
    };

    // Function to deal with a number input to format as a $ amount
    const handlePriceChange = (e) => {
        let value = e.target.value;
    
        // Remove any non-numeric characters except dot
        value = value.replace(/[^0-9.]/g, "");
    
        // Ensure only one decimal point
        const parts = value.split(".");
        if (parts.length > 2) {
            value = parts[0] + "." + parts.slice(1).join("");
        }
    
        setPriceText(value ? `$${value}` : "");
    };

    // Function to format price as currency
    const formatPrice = () => {
        if (priceText === "") return;
    
        // Convert to a fixed two-decimal format
        const formattedValue = parseFloat(priceText).toFixed(2);
    
        // Check is input is valid before setting state
        if (!isNaN(formattedValue)) {
            setPriceText(`$${numericValue.toFixed(2)}`);
        }
    };
    
    // Function to handle color selection
    const handleColorSelect = (color) => {
        // If color is already selected, remove it
        if (selectedColors.includes(color)) {
            setSelectedColors(selectedColors.filter((c) => c !== color));
        // If fewer than 2 colors are selected, add the new color
        } else if (selectedColors.length < 2) {
            setSelectedColors([...selectedColors, color]);
        }
    };

    const handleConditionSelect = (selectedConditions) => {
    
        // Ensure selectedConditions is always an array
        if (!Array.isArray(selectedConditions)) {
            setCondition([]); // Set to empty array if selection is cleared
            return;
        }
    
        // Extract only names, handling undefined values safely
        const selectedNames = selectedConditions.map(item => item?.name || "").filter(name => name !== "");
    
        // Update state
        setCondition(selectedNames);
    };

    const handleTimePeriodSelect = (selectedTimePeriods) => {    
        // Ensure selectedTimePeriods is always an array
        if (!Array.isArray(selectedTimePeriods)) {
            setSelectedTimePeriod([]); // Set to empty array if selection is cleared
            return;
        }
    
        // Extract only names to avoid undefined values
        const selectedNames = selectedTimePeriods.map(item => item?.name || "");
    
        // Update state, removing any empty values
        setSelectedTimePeriod(selectedNames.filter(name => name !== ""));
    };

    const handleSeasonSelect = (season) => {
        setSelectedSeason((prevSelected) => {
            if (prevSelected.includes(season)) {
                // Remove season if already selected
                return prevSelected.filter((s) => s !== season);
            } else if (prevSelected.length < 2) {
                // Add season if less than 2 are selected
                return [...prevSelected, season];
            } else {
                return prevSelected;
            }
        });
    };

    const handleSubmit = () => {
        
            setStatusMessage("Submitting...");
            setStatusType("neutral");


        const newItem = {
            id: isToggleEnabled ? manualIdText : idText,
            name: itemText,
            location: locationText || null,
            cost: priceText ? parseInt(priceText.replace('$', ''), 10): null,
            notes: notesText || null,
            garment_type: selectedGarment || null,
            time_period: selectedTimePeriod.length > 0 ? selectedTimePeriod : null, // Wrap in array if not null
            age_group: ageSelection || null,
            gender: genderSelection || null,
            size: selectedSize.length > 0 ? selectedSize : null,
            season: selectedSeason.length > 0 ? selectedSeason : null, // Wrap in array if not null
            condition: condition.length > 0 ? condition : null,
            color: selectedColors.length > 0 ? selectedColors : null,
            status: "Available", // Default status
            // authenticity_level: null,
            date_added: isToggleEnabled ? manualDateText : placeholderDate, 
            current_borrower: null,
            borrow_history: null,
            image: preview
        };

        let newErrors = {};

        // Check for missing required fields and set error flags
        if (!isToggleEnabled) {
            if (!newItem.garment_type) newErrors.garment_type = true;
            if (!newItem.time_period) newErrors.time_period = true;
            if (!newItem.age_group) newErrors.age_group = true;
            if (!newItem.gender) newErrors.gender = true;
            if (!newItem.size) newErrors.size = true;
            if (!newItem.season) newErrors.season = true;
            if (!newItem.condition) newErrors.condition = true;
            if (!newItem.color) newErrors.color = true;
        }
        else {
            if (!newItem.id) newErrors.id = true;
        }
        if (!newItem.name) newErrors.name = true;
        if (!preview) newErrors.image = true;

        // If any errors exist, update state and show alert
        if (Object.keys(newErrors).length > 0) {
            setErrors(newErrors);
            setStatusMessage("Please fill out all required fields.");
            setStatusType("error");
            return;
        }

        // If no errors, clear previous errors and proceed
        setErrors({});

        // Validate date format if toggle is enabled
        if (isToggleEnabled) {
            // Allow blank inputs in addition to valid date formats
            const regex = /^(0?[1-9]|1[0-2])\/(0?[1-9]|[12]\d|3[01])\/\d{2,4}$/;
            if (manualDateText && !regex.test(manualDateText)) {
                alert("Please enter a valid date in the format mm/dd/yyyy.");
                return;
            }
        }

        // Send a POST request to the add API with body data
        const addItemDB = async (newItem) => {

            try {
                const response = await fetch(`/api/itemManagement?action=add`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(newItem)
                });

                if (!response.ok) {
                    // Catch errors for duplicate item IDs
                    if (response.status === 427) {
                        setStatusMessage("An item with this ID already exists.");
                        setStatusType("error");
                    } else {
                        alert(`Error: ${data.error || "Request failed."}`);
                    }
                    return;
                }

            } catch (error) {
                setStatusMessage("An error occurred. Please try again.");
                setStatusType("error");
                return;
            }

            // If successful, show success message
            setStatusMessage("Item successfully added.");
            setStatusType("success");
        };

        // Call the function to send the API request
        addItemDB(newItem);

        // Reset form fields
        resetForm();
    };

    const resetForm = () => {
        // Reset form fields (states)
        setIDText("");
        setPlaceholderDate("");
        setItemText("");
        setLocationText(""); 
        setPriceText("");
        setNotesText("");
        setSelectedGarment("");
        setSelectedTimePeriod([]);
        setAgeSelection(null);
        setGenderSelection(null);
        setSelectedSize([]);
        setSelectedSeason([]);
        setCondition([]);
        setSelectedColors([]);
        setPreview(null);
    };

    // TOGGLE FUNCTIONALITY
    useEffect(() => {
        const fetchData = async () => {
            try {
                // Fetch next available ID
                const response = await fetch('/api/inventoryQueries?action=getNextAvailableId');
                const data = await response.json();
                if (response.ok) {
                    setIDText(data.nextId);
                } else {
                    console.error(data.error);
                }

                // Set placeholder date
                const today = new Date();
                const month = String(today.getMonth() + 1).padStart(2, '0'); 
                const day = String(today.getDate()).padStart(2, '0');
                const year = today.getFullYear();
                setPlaceholderDate(`${month}/${day}/${year}`);
            } catch (error) {
                console.error("Error fetching data:", error);
            }
        };

        fetchData();
    }, []);

    return (
        <div className="main">
            <div className="column">

                {/* Left column */}
                <div className="left">
                    <div className="title">
                        Add Item
                    </div>

                    {/* Drag-and-drop image upload section */}
                    <div className="image-upload">
                        <div
                            id="drop-zone"
                            className={`drop-zone ${dragOver ? "dragover" : ""} ${errors.image ? "error-border" : ""}`}
                            onClick={() => document.getElementById("file-input").click()}
                            onDragOver={(event) => {
                                event.preventDefault();
                                setDragOver(true);
                            }}
                            onDragLeave={() => setDragOver(false)}
                            onDrop={handleDrop}
                            >
                            <div className="upload-icon-and-text">
                            <img src="/icons/upload.svg" className="upload-icon" />
                                <p style={{color: "#9B525F"}}>
                                    Upload image*
                                </p>
                                {errors.image && (
                                    <p className="error-text" style={{marginTop: "5px"}}>
                                        Image is required
                                    </p>
                                )}
                            </div>
                            <input
                                type="file"
                                id="file-input"
                                accept="image/*"
                                style={{ display: "none" }}
                                onChange={handleFileInputChange}
                            />
                            {preview && (
                                <img
                                src={preview}
                                alt="Preview"
                                className="preview"
                                />
                            )}
                        </div>

                        <div className="textBoxRow">
                            
                        {/* Item Name Text Entry */}
                        <div className="inputGroup">
                            <h3 htmlFor="itemTB" className={errors.name ? "error-text" : ""}>
                                Item Name*
                            </h3>
                            <input
                                className="itemTextBox"
                                placeholder="Enter Name"
                                id="itemTB"
                                value={itemText}
                                onChange={(e) => setItemText(e.target.value)}
                            />
                        </div>

                        {/* Location Text Entry */}
                        <div className="inputGroup">
                            <label htmlFor="locationTB" className="textLabel">Location</label>
                            <input
                                className="locationTextBox"
                                placeholder=""
                                id="locationTB"
                                value={locationText}
                                onChange={(e) => setLocationText(e.target.value)}
                            />
                        </div>
                    </div>

                        
                        {/* ID, Date Added, and Price Text Entries */}
                        <div className="textBoxRow">
                            <div className="allID">
                                <div className={errors.id ? "error-text idName" : "idName"}>
                                    {isToggleEnabled ? "ID*" : "ID"}
                                </div>
                                <div className="idTextBox">
                                    <textarea 
                                        type="text"
                                        placeholder={isToggleEnabled ? "Enter ID" : "Loading..."}
                                        value={isToggleEnabled ? manualIdText : idText}
                                        onChange={(e) => {
                                            if (isToggleEnabled) {
                                                setManualIdText(e.target.value);
                                            }
                                        }}
                                        readOnly={!isToggleEnabled}
                                        style={{ background: isToggleEnabled ? "#FFF" : "var(--grayed_out)" }}
                                    />
                                </div>
                            </div>

                            <div className="allDate">
                                <div className={`dateName`}>
                                    {isToggleEnabled ? "Date Added" : "Date Added"}
                                </div>
                                <div className="dateTextBox">
                                    <textarea 
                                        placeholder={isToggleEnabled ? "MM/DD/YYYY" : "Loading..."}
                                        value={isToggleEnabled ? manualDateText : placeholderDate}
                                        onChange={(e) => {
                                            if (isToggleEnabled) {
                                                setManualDateText(e.target.value);
                                            }
                                        }}
                                        readOnly={!isToggleEnabled}
                                        style={{ background: isToggleEnabled ? "#FFF" : "var(--grayed_out)" }}
                                    />
                                </div>
                            </div>
                            <div className="allPrice">
                                <div className={`priceName`}>
                                    Price
                                </div>
                                <div className="priceInput">
                                <input 
                                    type="text"
                                    placeholder="$0.00"
                                    id="priceTB"
                                    value={priceText}
                                    onChange={(e) => handlePriceChange(e)}
                                    onBlur={formatPrice}
                                />
                                </div>
                            </div>
                        </div>

                        <div className={`notesName`}>
                            Notes
                        </div>

                        <div className="notesTextBox">
                            <textarea placeholder="Extra item information not captured by tags (i.e. fabric type, or where it was bought from)."
                            id = "notesTB"
                            value={notesText}
                            onChange={(e) => setNotesText(e.target.value)}
                            />
                        </div>
                    </div>
                </div>
                
                {/* Middle Vertical Divider */}
                <div className="divider"></div>

                {/* Right Column */}
                <div className="right">

                    {/* Garment and Time Section */}
                    <div className="garment-and-time">
                    
                        {/* Garment Title and Dropdown */}
                        <div className="dropdown-component">
                            <h3 className={errors.garment_type ? "error-text" : ""}>
                                {isToggleEnabled ? "Garment Type" : "Garment Type*"}
                            </h3>
                            <Dropdown
                                value={selectedGarment}
                                options={garmentOptions}
                                onChange={(e) => setSelectedGarment(e.value)}
                                placeholder="Select Garment Type"
                                className="dropdown"
                            />
                        </div>

                        {/* Time Period Title and Dropdown */}
                        <div className="dropdown-component">
                            <h3 className={errors.time_period ? "error-text" : ""}>
                                {isToggleEnabled ? "Time Period" : "Time Period*"}
                                <span style={{fontWeight: "400"}}> (Max of 2)</span>
                            </h3>                            
                                <MultiSelect
                                    value={timePeriods.filter(period => selectedTimePeriod.includes(period.name))} // Sync selected values
                                    options={timePeriods}
                                    onChange={(e) => handleTimePeriodSelect(e.value || [])}
                                    optionLabel="name" 
                                    display="chip" 
                                    maxSelectedLabels={2}
                                    placeholder="Select Time Period"
                                    className="dropdown"
                                    showSelectAll={false}
                                />
                        </div>
                    </div>
                    
                    {/* Age and Gender Buttons */}
                    <div className="age-and-gender">
                        {/* Age Buttons */}
                        <div className="allAge">
                            <h3 className={errors.age_group ? "error-text" : ""}>
                                {isToggleEnabled ? "Age Group" : "Age Group*"}
                            </h3>
                            <div className="ageButtons p-selectbutton">
                                {ageOptions.map((option) => (
                                    <button
                                        key={option.value}
                                        className={`p-button ${ageSelection === option.value ? "selected" : ""}`}
                                        onClick={() => setAgeSelection(option.value)}
                                    >
                                        {option.label}
                                    </button>
                                ))}
                            </div>
                        </div>

                        {/* Gender Buttons */}
                        <div className="allGender">
                            <h3 className={errors.gender ? "error-text" : ""}>
                                {isToggleEnabled ? "Sex" : "Sex*"}
                            </h3>
                            <div className="genderButtons p-selectbutton">
                                {genderOptions.map((option) => (
                                    <button
                                        key={option.value}
                                        className={`p-button ${genderSelection === option.value ? "selected" : ""}`}
                                        onClick={() => setGenderSelection(option.value)}
                                    >
                                        {option.label}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Size Buttons */}
                    <div className="size-buttons p-selectbutton">
                        <h3 className={errors.size ? "error-text" : ""}>
                            {isToggleEnabled ? "Size" : "Size*"}
                        </h3>
                        {sizes.map((option) => (
                            <button 
                                key={option.value} 
                                className={`p-button ${selectedSize === option.value ? "selected" : ""}`}
                                onClick={() => setSelectedSize(option.value)}
                                >
                                    {option.label} 
                            </button>
                        ))}
                    </div>

                    <div className="season-buttons p-selectbutton">
                        <h3 className={errors.season ? "error-text" : ""}>
                            {isToggleEnabled ? "Season" : "Season*"}
                            <span style={{ fontWeight: "400" }}> (Max of 2)</span>
                        </h3>
                        {seasons.map((option) => (
                            <button
                                key={option.value}
                                className={`p-button ${selectedSeason.includes(option.value) ? "selected" : ""}`}
                                onClick={() => handleSeasonSelect(option.value)}
                            >
                                {option.label}
                            </button>
                        ))}
                    </div>

                    {/* Condition Dropdown */}
                    <div className="condition-component">
                        <div className="dropdown-component">
                            <h3 className={errors.condition ? "error-text" : ""}>
                                {isToggleEnabled ? "Condition" : "Condition*"}
                                <span style={{fontWeight: "400"}}> (Max of 2)</span>
                            </h3> 
                            <MultiSelect
                                value={conditions.filter(cond => condition.includes(cond.name))} // Sync selected values
                                options={conditions}
                                onChange={(e) => handleConditionSelect(e.value || [])}
                                optionLabel="name" 
                                display="chip" 
                                maxSelectedLabels={2}
                                placeholder="Select Condition"
                                className="dropdown"
                                showSelectAll={false}
                            />
                        </div>
                    </div>
                            
                    {/* Color Selector */}
                    <div className="color-component">
                        <div className="color-dropdown">
                            <h3 className={errors.color ? "error-text" : ""}>
                                {isToggleEnabled ? "Color" : "Color*"}
                                <span style={{fontWeight: "400"}}> (Max of 2)</span>
                            </h3> 
                            <div className="color-selector">
                                <div className="color-options">
                                    {colors.map((color) => (
                                    <div
                                        key={color.name}
                                        className={`color-circle ${selectedColors.includes(color.name) ? "selected" : ""}`}
                                        style={{
                                        backgroundColor: color.hex,
                                        border: color.border ? `2px solid ${color.border}` : "none",
                                        }}
                                        onClick={() => handleColorSelect(color.name)}
                                    ></div>
                                    ))}
                                </div>
                                <p className="selected-text">
                                    Selected: {selectedColors.length > 0 ? selectedColors.join(", ") : "None"}
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>  

            <div className="cancel-submit">
                {/* Status Message */}
                <div className={`statusMessage ${statusType}`}>
                    {statusMessage}
                </div>

                {/* Cancel and Submit Buttons */}
                <div className="cancel-submit-buttons">
                    <Link href="/inventory">
                        <StylishButton className="cancel-button" styleType="style1" label="Cancel" />
                    </Link>

                    <StylishButton className="submit-button" onClick={handleSubmit} styleType="style3" label="Submit" />
                </div>
            </div>
        </div>
    );
}'use client';

import React, { useState, useEffect } from 'react';
import { usePathname } from 'next/navigation';
import Sidebar from './Sidebar/NavigationBar';
import Filter from './Filter/Filter';

export default function AppShell({ children }) {
  const [isFilterVisible, setIsFilterVisible] = useState(false);
  const pathname = usePathname();

  useEffect(() => {
    setIsFilterVisible(false);
  }, [pathname]);

  const toggleFilterVisibility = () => {
    setIsFilterVisible((prev) => !prev);
  };

  return (
    <div className="app-layout">
      <Sidebar
        currentPage={pathname}
        onFilterToggle={toggleFilterVisibility}
      />
      <div className="main-content-wrapper">
        <Filter
          isVisible={isFilterVisible}
          onClose={toggleFilterVisibility}
          className={isFilterVisible ? 'visible' : ''}
        />
        <main className={`main-content ${isFilterVisible ? 'shrink' : ''}`}>
          {children}
        </main>
      </div>
    </div>
  );
}
export default function Eyecon({ color }) {
    return (
        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke={color} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="feather feather-eye">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
        </svg>
    );
}/**************************************************************
 *
 *                     DeleteItemButton.js
 *
 *        Authors: Dan Glorioso & Hannah Jiang & Zack White
 *           Date: 02/16/2025
 *
 *     Summary: The Delete button in the top bar of the inventory page
 *              that allows the user to delete the selected item(s). This file
 *              is responsible for calling and setting the state of the 
 *              DeletePopup component and executing the delete query.
 * 
 **************************************************************/

"use client";

import { useEffect, useState } from "react";
import StylishButton from "./StylishButton";
import DeletePopup from "./DeletePopup";

 export default function DeleteItemButton( { selectedItems, isChecked }) {
    const [isPopupVisible, setPopupVisible] = useState(false);
    const [isItemSelected, setItemSelected] = useState(false);

    // Update the selected item state when the isChecked prop changes
    useEffect(() => {
        setItemSelected(isChecked);
    }, [isChecked]);

    // Handle the delete button click
    const handleClick = () => {
        if (isItemSelected) {
            setPopupVisible(true)
        }
    };

    // Handle the cancel button click
    const handleCancel = () => {
        setPopupVisible(false);  // Hide the popup
    };

    const handleConfirm = async () => {
        setPopupVisible(false);   // Close the popup

        // Delete the item using the query
        try {
            const response = await fetch(`../../api/db`, { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    text: 'DELETE FROM dummy_data WHERE id = ANY($1)',
                    params: [selectedItems.map(item => item.id)],
                }),
            });

            if (!response.ok) {
                throw new Error(`Fetch error: ${response.status} - ${response.statusText}`);
            }
            
            // Reload the page
            location.reload();
        } catch (error) {
            alert("An error occurred. Please try again.");
            return;
        }
    };

        return (
            <div>
                {/* Delete Button */}
                <StylishButton
                    label = "Delete"
                    styleType={isItemSelected ? "style1" : "style6"}
                    onClick={handleClick}
                    disabled={!isItemSelected}
                >
                </StylishButton>

                {/* Popup Component */}
                {isPopupVisible && isItemSelected && (
                <DeletePopup 
                    onConfirm={handleConfirm} 
                    onCancel={handleCancel} 
                    selectedItems={selectedItems}
                    />
                )}
            </div>
        );
    }"use client";
import { useState } from "react";
import "./ReturnButton.css";
import Image from "next/image";
import { MultiSelect } from 'primereact/multiselect';

export default function ItemBoxes({ unit, onNotesChange, itemId, onClose }) {
    const [notes, setNotes] = useState("");
    const [condition, setCondition] = useState([]);

    const [errors, setErrors] = useState({});

    if (!unit) {
        return null;
    }

    const conditions = [
        { name: "Needs repair" },
        { name: "Needs dry cleaning" },
        { name: "Needs washing" },
        { name: "Not usable" },
        { name: "Great" },
        { name: "Good" },
    ]

    const handleNotesChange = (event) => {
        setNotes(event.target.value);
        onNotesChange(unit.id, event.target.value);
    };

    const handleConditionSelect = (selectedConditions) => {
    
        // Ensure selectedConditions is always an array
        if (!Array.isArray(selectedConditions)) {
            // Set to empty array if selection is cleared
            setCondition([]); 
            return;
        }
    
        // Extract only names, handling undefined values safely
        const selectedNames = selectedConditions.map(item => item?.name || "").filter(name => name !== "");
    
        // Update state
        setCondition(selectedNames);
    };

    //not pulling tags
    return (  
        <div className="returnItem">
            <div className="itemID">
            <div className="return-image">
                {Array.isArray(unit.image_keys) && unit.image_keys.length > 0 ? (
                    <Image 
                        src={`https://upload-r2-assets.somerville-museum1.workers.dev/${unit.image_keys[0]}`} 
                        fill
                        alt="No image found"
                    />
                ) : (
                    <p>No image found</p>
                )}
            </div>
                <div className="itemInfo">
                    <p>{unit.name}</p>
                    <p>ID #{unit.id}</p>
                </div>
                <button className="exitBtn" 
                    onClick={onClose}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 22 22" fill="none">
                        <path d="M21.7774 2.29391L19.6627 0.179199L11.2788 8.56305L2.89498 0.179199L0.780273 2.29391L9.16412 10.6778L0.780273 19.0616L2.89498 21.1763L11.2788 12.7925L19.6627 21.1763L21.7774 19.0616L13.3935 10.6778L21.7774 2.29391Z" fill="black"/>
                    </svg>
                </button>
            </div>
            <div className="notesWrapper">
                <p>Notes</p>
                <form>
                    <input type="text" className="notesTextbox" name="notes" 
                        value = {notes} onChange = {handleNotesChange}></input>
                </form>
            </div>

            {/* Condition Dropdown - shoutout Massimo and Dan */}
            <div className="condition-component">
                <div className="dropdown-component">
                    <h3 className={errors.condition ? "error-text" : ""}>Condition*</h3>
                    <MultiSelect
                        // Sync selected values
                        value={conditions.filter(cond => condition.includes(cond.name))} 
                        options={conditions}
                        onChange={(e) => handleConditionSelect(e.value || [])}
                        optionLabel="name" 
                        display="chip" 
                        maxSelectedLabels={2}
                        placeholder="Select Condition"
                        className="dropdown"
                        showSelectAll={false}
                    />
                </div>
            </div>
        </div>
    );
}"use client";

// import React, { useState, useEffect } from "react";
import AddPage from "../components/AddPage";
import "../components/AddPage.css"


const Add = () => {
    return (
        <div className="add-page">
        <AddPage />
        </div>
    );
};

export default Add;"use client";

import InventoryUnit from './15Tablecomp/InventoryUnit.jsx';
import { useState, useEffect } from "react";
import { useFilterContext } from '../components/contexts/FilterContext.js';
import BorrowButton from '../components/BorrowButton.jsx';
import AddButton from '../components/AddItemButton';
import ReturnButton from '../components/ReturnButton';
import DeleteItemButton from '../components/DeleteItemButton';
import StylishButton from '../components/StylishButton.jsx';
import Filter from '../components/Filter/Filter';
import SearchBar from '../components/SearchBar';
import './inventory.css'
import { useSearchParams } from 'next/navigation.js';
import PropTypes from 'prop-types';

Inventory.propTypes = {
    isFilterVisible: PropTypes.bool.isRequired,
    toggleFilterVisibility: PropTypes.func.isRequired,
}; 

export default function Inventory({ 
    isFilterVisible = false, 
    toggleFilterVisibility = () => {console.log("scuffed")} 
}) {
    const { selectedFilters, setSelectedFilters } = useFilterContext();
    const [units, setUnits] = useState([]);
    const [originalUnits, setOriginalUnits] = useState([]);
    const [selectAllChecked, setSelectAllChecked] = useState(false);
    const [currentPage, setCurrentPage] = useState(1);
    const [unitsPerPage, setUnitsPerPage] = useState(15);
    const [totalPages, setTotalPages] = useState();
    const [selectedItems, setSelectedItems] = useState([]);
    const [searchResults, setSearchResults] = useState([]);
    const searchParams = useSearchParams();
    const filter = searchParams.get('filter');
    const [filterResults, setFilterResults] = useState([]);
    
    const [refreshTable, setRefreshTable] = useState(false);
    // const [sortType, setSortType] = useState('id'); // Track last sorted property
    // const [isSorted, setIsSorted] = useState(false); // Track if already sorted

    // const sortBy = (property) => {
    //     console.log("calling sortBy")
    //     // if (sortType === property && isSorted) {
    //         // Reset to ID sorting
    //         // setSortType('id');
    //         // setIsSorted(false);
    //         // sortingFunctions.id(); // Always sorts by ID when reset

    //     // } else {
    //     //     // Sort based on the selected property
    //     //     // setSortType(property);
    //     //     // setIsSorted(true);

    //     //     sortingFunctions[property]();
    //     //     console.log(sortingFunctions[property]);
    //     // }
    // };

    const sortingFunctions = {
        id: () => sortByID(),
        con: () => sortByCon(),
        avail: () => sortByAvail(),
        name: () => sortByName()
    };

    // Called any time new filters/search results are applied to update displayed units
    useEffect(() => {
        console.log(filterResults.length)
        console.log(searchResults.length)
        if (filterResults.length === 0 && searchResults.length === 0) return;
        // Takes intersection of search results and filter results to get correct ones.
        const filteredAndSearchResults = () => {
            const filteredUnitIds = new Set(filterResults.map(unit => unit.id));
            return searchResults.length > 0 
            ? searchResults.filter(item => filteredUnitIds.has(item.id)) 
            : filterResults;
        }});


    const applyFilters = (data) => {
        console.log("Starting filter application with data:", data);
        console.log("Current selectedFilters:", selectedFilters);
        
        let filteredData = [...data];
    
        // Filter by Status
        if (selectedFilters.status && selectedFilters.status.length > 0) {
            console.log("Before status filter:", filteredData.length);
            console.log("Filtering by status:", selectedFilters.status);
            filteredData = filteredData.filter(item => {
                console.log("Item status:", item.status);
                return selectedFilters.status.includes(item.status);
            });
            console.log("After status filter:", filteredData.length);
        }
    
        // Filter by Condition
        if (selectedFilters.condition && selectedFilters.condition.length > 0) {
            console.log("Filtering by condition:", selectedFilters.condition);
            filteredData = filteredData.filter(item => 
                selectedFilters.condition.some(condition => 
                    item.condition.includes(condition)
                )
            );
        }
    
        // Filter by Gender
        if (selectedFilters.gender && selectedFilters.gender.length > 0) {
            console.log("Filtering by gender:", selectedFilters.gender);
            filteredData = filteredData.filter(item => 
                selectedFilters.gender.includes(item.gender)
            );
        }
    
        // Filter by Color
        if (selectedFilters.color && selectedFilters.color.length > 0) {
            console.log("Filtering by color:", selectedFilters.color);
            filteredData = filteredData.filter(item => 
                // Check if any of the selected colors exist in the item's color array
                selectedFilters.color.some(color => 
                    Array.isArray(item.color) ? item.color.includes(color) : item.color === color
                )
            );
        }
    
        // Filter by Garment Type
        if (selectedFilters.garment_type && selectedFilters.garment_type.length > 0) {
            console.log("Filtering by garment type:", selectedFilters.garment_type);
            filteredData = filteredData.filter(item => 
                selectedFilters.garment_type.includes(item.garment_type)
            );
        }
    
        // Filter by Size
        if (selectedFilters.size && selectedFilters.size.length > 0) {
            console.log("Filtering by size:", selectedFilters.size);
            filteredData = filteredData.filter(item => 
                selectedFilters.size.includes(item.size)
            );
        }
    
        // Filter by Season
        if (selectedFilters.season && selectedFilters.season.length > 0) {
            console.log("Filtering by season:", selectedFilters.season);
            filteredData = filteredData.filter(item => 
                // Check if any of the selected seasons exist in the item's season array
                selectedFilters.season.some(season => 
                    Array.isArray(item.season) ? item.season.includes(season) : item.season === season
                )
            );
        }
    
        // Filter by Time Period
        if (selectedFilters.time_period && selectedFilters.time_period.length > 0) {
            console.log("Filtering by time period:", selectedFilters.time_period);
            filteredData = filteredData.filter(item => 
                // Check if any of the selected time periods exist in the item's time_period array
                selectedFilters.time_period.some(period => 
                    Array.isArray(item.time_period) ? item.time_period.includes(period) : item.time_period === period
                )
            );
        }
    
        // Filter by Return Date Range
        if (selectedFilters.return_date && selectedFilters.return_date.start && selectedFilters.return_date.end) {
            console.log("Filtering by return date range:", selectedFilters.return_date);
            filteredData = filteredData.filter(item => {
                if (!item.return_date) return false;
                const returnDate = new Date(item.return_date);
                const startDate = new Date(selectedFilters.return_date.start);
                const endDate = new Date(selectedFilters.return_date.end);
                return returnDate >= startDate && returnDate <= endDate;
            });
        }
    
        console.log("Final filtered results:", filteredData);
        return filteredData;
    };

    async function fetchData() {
        try {
            const response = await fetch(`../../api/db`, { 
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json' 
                },
                body: JSON.stringify({
                  text: 'SELECT * from dummy_data ORDER BY id'
                })
            });

            if (response.ok) {
                const data = await response.json();
                console.log("Fetched data:", data);
                const currentDate = new Date();
                const updatedData = data.map((item) => {
                    if (item.status === "Borrowed" && item.dueDate && new Date(item.dueDate) < currentDate) {
                        return { ...item, status: "Overdue" };
                    }
                    return item;
                });
                console.log("Processed data:", updatedData);

                setOriginalUnits(updatedData);
                setUnits(updatedData);
                setTotalPages(Math.ceil(updatedData.length / unitsPerPage));

                if (selectedFilters.status?.length > 0 || 
                    selectedFilters.condition?.length > 0 ||
                    selectedFilters.gender?.length > 0 ||
                    selectedFilters.color?.length > 0 ||
                    selectedFilters.garment_type?.length > 0 ||
                    selectedFilters.size?.length > 0 ||
                    selectedFilters.season?.length > 0 ||
                    selectedFilters.time_period?.length > 0 ||
                    (selectedFilters.return_date?.start && selectedFilters.return_date?.end)) {
                    const filteredData = applyFilters(updatedData);
                    setUnits(filteredData);
                    setTotalPages(Math.ceil(filteredData.length / unitsPerPage));
                } else {
                    setUnits(updatedData);
                    setTotalPages(Math.ceil(updatedData.length / unitsPerPage));
                }

            } else {
                console.error("failed to fetch data");
            }
        } catch (error) {
            console.error(error);
        }
    }

    // Initial data fetch
    useEffect(() => {
        fetchData();
    }, []);

    // manage filters if someone is navigating here from clicking one of the links
    // in the dashboard
    useEffect(() => {
        if (filter) {
            console.log("Setting filter from URL:", filter);
            const newFilters = {
                condition: [],
                gender: [],
                color: [],
                garment_type: [],
                size: [],
                time_period: [],
                status: [filter],
                season: [],
                return_date: { start: null, end: null }
            };
            setSelectedFilters(newFilters);
            
            // If we already have data, apply the filter immediately
            if (originalUnits.length > 0) {
                const filteredData = applyFilters(originalUnits);
                setUnits(filteredData);
                setTotalPages(Math.ceil(filteredData.length / unitsPerPage));
            }
        }
    }, [filter, setSelectedFilters, originalUnits]);

    // Filter effect
    useEffect(() => {
        console.log("Filter effect triggered");
        console.log("Current originalUnits:", originalUnits);
        console.log("Current selectedFilters:", selectedFilters);
        
        // Only proceed if we have data
        if (originalUnits.length === 0) {
            console.log("No data available yet, waiting for data fetch");
            return;
        }
        
        if (Object.values(selectedFilters).every(val => 
            Array.isArray(val) ? val.length === 0 : !val
        )) {
            console.log("No filters active, showing all units");
            setUnits(originalUnits);
            return;
        }

        const filteredUnits = applyFilters(originalUnits);
        console.log("After applying filters:", filteredUnits);
        
        setUnits(filteredUnits);
        setCurrentPage(1);
        setTotalPages(Math.ceil(filteredUnits.length / unitsPerPage));
    }, [selectedFilters, originalUnits]);


    const handleBorrowSuccess = () => {
        // Literally just to call the useeffect with the request. kinda scuffed but whatever
        // setRefreshTable(prev => !prev);

        setFilterResults([]); 
        setSearchResults([]); 
        setSelectedItems([]); 
        fetchData(); 

    };
  

    const handleReturnSuccess = () => {
        console.log("Return operation successful, refreshing inventory...");
        setRefreshTable(prev => !prev); // Refresh table to show updated status
        setSelectedItems([]); // Clear selected items
    };
    

    const handleCheckboxChange = (unit, isChecked) => {
        setSelectedItems((prevSelected) => {
            if (isChecked) {
                return [unit, ...prevSelected];
            } else {
                return prevSelected.filter(item => item.id !== unit.id);
            }
        });
    };

    const handleSelectAllChange = () => {
        if (selectAllChecked) {
            setSelectedItems([]);
        } else {
            setSelectedItems([...units]);
        }
        setSelectAllChecked(!selectAllChecked);
    };

    const startIndex = (currentPage - 1) * unitsPerPage;
    const currentUnits = units
        .slice(startIndex, startIndex + unitsPerPage)
        .map((unit) => {
            return (<InventoryUnit
                key={unit.id}
                unit={unit}
                onChange={handleCheckboxChange}
                checked={selectedItems.some((item) => item?.id && unit?.id && item.id === unit.id)}
            />)
        });

    const sortByID = () => {
        const filteredAndSortedEntries = [...units]
            .sort((a, b) => a.id - b.id); // Sort by id

        setUnits(filteredAndSortedEntries);
    };

    const sortByName = () => {
        const filteredAndSortedEntries = [...units]
            .sort((a, b) => a.name.localeCompare(b.name)); // Sort alphabetically

        setUnits(filteredAndSortedEntries);
    };

    const sortByAvail = () => {
        const availability = [
            "Available",
            "Borrowed",
            "Overdue",
            "Missing"
        ];

        const filteredAndSortedEntries = [...units]
            .sort((a, b) => availability.indexOf(a.status) - availability.indexOf(b.status)); // Sort by availability

        setUnits(filteredAndSortedEntries);
    };

    const sortByCon = () => {
        const order = [
            "Great",
            "Good",
            "Needs washing",
            "Needs repair",
            "Needs dry cleaning",
            "Not usable"
        ];
    
        const filteredAndSortedEntries = [...units].sort((a, b) => {
            // Function to get the highest-ranked condition for an item
            const getHighestCondition = (conditions) => 
                conditions.reduce((best, c) =>
                    order.indexOf(c) < order.indexOf(best) ? c : best, conditions[0]
                );
    
            const highestA = getHighestCondition(a.condition);
            const highestB = getHighestCondition(b.condition);
    
            return order.indexOf(highestA) - order.indexOf(highestB);
        });
    
        setUnits(filteredAndSortedEntries);
    };

    //tesing piece of code
    // const totalPages = Math.ceil(20 / unitsPerPage);
    const goToPreviousPage = () => {
        setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
    };

    const goToNextPage = () => {
        setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));
    };

    // event handler for the select dropdown, return to page one and 
    // set units to the selected value
    const handleUnitsPerPageChange = (event) => {
        setUnitsPerPage(Number(event.target.value));
        setCurrentPage(1);
        setTotalPages(Math.ceil(units.length / Number(event.target.value)));//by default set the current page to 1
    };

    // an array of buttons for page selection
    const buttons = Array.from({ length: totalPages }, (_, index) => index + 1);



    return (
        <>
            <Filter 
                isVisible={isFilterVisible} 
                onClose={toggleFilterVisibility} 
                className={isFilterVisible ? 'visible' : ''}
            />
            <div className={`Table ${isFilterVisible ? 'shrink' : ''}`}>
                <div className="Header">
                    <div className="Items">
                        <SearchBar updateSearchResults={setSearchResults} />
                            <div className='buttons'> 
                                <AddButton className='addBtn'> </AddButton>
                                <BorrowButton className='brwBtn'
                                    selectedItems={selectedItems}
                                    onSuccess={handleBorrowSuccess}>Borrow
                                </BorrowButton>
                                <ReturnButton className='rtnBtn'
                                    selectedItems={selectedItems}
                                    onSuccess={handleReturnSuccess}>Return
                                </ReturnButton>
                                <DeleteItemButton
                                    classname = 'delBtn'
                                    selectedItems={selectedItems}
                                    isChecked={selectedItems.length > 0}
                                    >
                                </DeleteItemButton>
                            </div>
                    </div>
                    <div className="TableLabels">
                        <div className="SelectAll" id='SelectAll' onClick={handleSelectAllChange}>Select All
                        </div>
                        <button className="IDLabel" onClick={sortByID} id='SortTag'>ID 
                            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="16" viewBox="0 0 15 16" fill="none">
                                <path d="M8.39936 5.14825C8.48416 5.23294 8.5991 5.28051 8.71894 5.28051C8.83878 5.28051 8.95372 5.23294 9.03852 5.14825L9.47266 4.71411V10.8584C9.47266 10.9784 9.5203 11.0934 9.60511 11.1782C9.68992 11.263 9.80495 11.3106 9.92489 11.3106C10.0448 11.3106 10.1599 11.263 10.2447 11.1782C10.3295 11.0934 10.3771 10.9784 10.3771 10.8584V4.71411L10.8113 5.14825C10.8527 5.19268 10.9026 5.22832 10.9581 5.25304C11.0135 5.27776 11.0734 5.29105 11.1341 5.29212C11.1949 5.29319 11.2552 5.28202 11.3115 5.25927C11.3678 5.23653 11.4189 5.20268 11.4619 5.15973C11.5048 5.11679 11.5387 5.06564 11.5614 5.00933C11.5842 4.95302 11.5953 4.8927 11.5943 4.83198C11.5932 4.77126 11.5799 4.71138 11.5552 4.6559C11.5305 4.60043 11.4948 4.5505 11.4504 4.5091L10.2445 3.30315C10.1597 3.21847 10.0447 3.1709 9.92489 3.1709C9.80505 3.1709 9.6901 3.21847 9.60531 3.30315L8.39936 4.5091C8.31468 4.59389 8.26711 4.70884 8.26711 4.82868C8.26711 4.94852 8.31468 5.06346 8.39936 5.14825ZM5.55333 10.973L5.98747 10.5388C6.02887 10.4944 6.0788 10.4588 6.13427 10.4341C6.18974 10.4093 6.24963 10.396 6.31035 10.395C6.37107 10.3939 6.43138 10.4051 6.4877 10.4278C6.54401 10.4506 6.59516 10.4844 6.6381 10.5274C6.68104 10.5703 6.7149 10.6215 6.73764 10.6778C6.76039 10.7341 6.77156 10.7944 6.77049 10.8551C6.76941 10.9158 6.75612 10.9757 6.73141 11.0312C6.70669 11.0867 6.67105 11.1366 6.62662 11.178L5.42067 12.3839C5.33588 12.4686 5.22094 12.5162 5.1011 12.5162C4.98126 12.5162 4.86632 12.4686 4.78152 12.3839L3.57558 11.178C3.53114 11.1366 3.49551 11.0867 3.47079 11.0312C3.44607 10.9757 3.43278 10.9158 3.43171 10.8551C3.43064 10.7944 3.44181 10.7341 3.46455 10.6778C3.4873 10.6215 3.52115 10.5703 3.5641 10.5274C3.60704 10.4844 3.65819 10.4506 3.7145 10.4278C3.77081 10.4051 3.83113 10.3939 3.89185 10.395C3.95257 10.396 4.01245 10.4093 4.06793 10.4341C4.1234 10.4588 4.17333 10.4944 4.21473 10.5388L4.64887 10.973V4.82868C4.64887 4.70874 4.69651 4.59371 4.78132 4.5089C4.86613 4.42409 4.98116 4.37645 5.1011 4.37645C5.22104 4.37645 5.33606 4.42409 5.42087 4.5089C5.50568 4.59371 5.55333 4.70874 5.55333 4.82868V10.973Z" fill="#656565"/>
                            </svg>
                        </button>
                        <button className='ItemLabel' onClick={sortByName} id='SortTag'>Item Name
                            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="16" viewBox="0 0 15 16" fill="none">
                                <path d="M8.39936 5.14825C8.48416 5.23294 8.5991 5.28051 8.71894 5.28051C8.83878 5.28051 8.95372 5.23294 9.03852 5.14825L9.47266 4.71411V10.8584C9.47266 10.9784 9.5203 11.0934 9.60511 11.1782C9.68992 11.263 9.80495 11.3106 9.92489 11.3106C10.0448 11.3106 10.1599 11.263 10.2447 11.1782C10.3295 11.0934 10.3771 10.9784 10.3771 10.8584V4.71411L10.8113 5.14825C10.8527 5.19268 10.9026 5.22832 10.9581 5.25304C11.0135 5.27776 11.0734 5.29105 11.1341 5.29212C11.1949 5.29319 11.2552 5.28202 11.3115 5.25927C11.3678 5.23653 11.4189 5.20268 11.4619 5.15973C11.5048 5.11679 11.5387 5.06564 11.5614 5.00933C11.5842 4.95302 11.5953 4.8927 11.5943 4.83198C11.5932 4.77126 11.5799 4.71138 11.5552 4.6559C11.5305 4.60043 11.4948 4.5505 11.4504 4.5091L10.2445 3.30315C10.1597 3.21847 10.0447 3.1709 9.92489 3.1709C9.80505 3.1709 9.6901 3.21847 9.60531 3.30315L8.39936 4.5091C8.31468 4.59389 8.26711 4.70884 8.26711 4.82868C8.26711 4.94852 8.31468 5.06346 8.39936 5.14825ZM5.55333 10.973L5.98747 10.5388C6.02887 10.4944 6.0788 10.4588 6.13427 10.4341C6.18974 10.4093 6.24963 10.396 6.31035 10.395C6.37107 10.3939 6.43138 10.4051 6.4877 10.4278C6.54401 10.4506 6.59516 10.4844 6.6381 10.5274C6.68104 10.5703 6.7149 10.6215 6.73764 10.6778C6.76039 10.7341 6.77156 10.7944 6.77049 10.8551C6.76941 10.9158 6.75612 10.9757 6.73141 11.0312C6.70669 11.0867 6.67105 11.1366 6.62662 11.178L5.42067 12.3839C5.33588 12.4686 5.22094 12.5162 5.1011 12.5162C4.98126 12.5162 4.86632 12.4686 4.78152 12.3839L3.57558 11.178C3.53114 11.1366 3.49551 11.0867 3.47079 11.0312C3.44607 10.9757 3.43278 10.9158 3.43171 10.8551C3.43064 10.7944 3.44181 10.7341 3.46455 10.6778C3.4873 10.6215 3.52115 10.5703 3.5641 10.5274C3.60704 10.4844 3.65819 10.4506 3.7145 10.4278C3.77081 10.4051 3.83113 10.3939 3.89185 10.395C3.95257 10.396 4.01245 10.4093 4.06793 10.4341C4.1234 10.4588 4.17333 10.4944 4.21473 10.5388L4.64887 10.973V4.82868C4.64887 4.70874 4.69651 4.59371 4.78132 4.5089C4.86613 4.42409 4.98116 4.37645 5.1011 4.37645C5.22104 4.37645 5.33606 4.42409 5.42087 4.5089C5.50568 4.59371 5.55333 4.70874 5.55333 4.82868V10.973Z" fill="#656565"/>
                            </svg>
                        </button>
                        <button className="AvaiLabel" onClick={sortByAvail} id='SortTag'>Status 
                            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="16" viewBox="0 0 15 16" fill="none">
                                <path d="M8.39936 5.14825C8.48416 5.23294 8.5991 5.28051 8.71894 5.28051C8.83878 5.28051 8.95372 5.23294 9.03852 5.14825L9.47266 4.71411V10.8584C9.47266 10.9784 9.5203 11.0934 9.60511 11.1782C9.68992 11.263 9.80495 11.3106 9.92489 11.3106C10.0448 11.3106 10.1599 11.263 10.2447 11.1782C10.3295 11.0934 10.3771 10.9784 10.3771 10.8584V4.71411L10.8113 5.14825C10.8527 5.19268 10.9026 5.22832 10.9581 5.25304C11.0135 5.27776 11.0734 5.29105 11.1341 5.29212C11.1949 5.29319 11.2552 5.28202 11.3115 5.25927C11.3678 5.23653 11.4189 5.20268 11.4619 5.15973C11.5048 5.11679 11.5387 5.06564 11.5614 5.00933C11.5842 4.95302 11.5953 4.8927 11.5943 4.83198C11.5932 4.77126 11.5799 4.71138 11.5552 4.6559C11.5305 4.60043 11.4948 4.5505 11.4504 4.5091L10.2445 3.30315C10.1597 3.21847 10.0447 3.1709 9.92489 3.1709C9.80505 3.1709 9.6901 3.21847 9.60531 3.30315L8.39936 4.5091C8.31468 4.59389 8.26711 4.70884 8.26711 4.82868C8.26711 4.94852 8.31468 5.06346 8.39936 5.14825ZM5.55333 10.973L5.98747 10.5388C6.02887 10.4944 6.0788 10.4588 6.13427 10.4341C6.18974 10.4093 6.24963 10.396 6.31035 10.395C6.37107 10.3939 6.43138 10.4051 6.4877 10.4278C6.54401 10.4506 6.59516 10.4844 6.6381 10.5274C6.68104 10.5703 6.7149 10.6215 6.73764 10.6778C6.76039 10.7341 6.77156 10.7944 6.77049 10.8551C6.76941 10.9158 6.75612 10.9757 6.73141 11.0312C6.70669 11.0867 6.67105 11.1366 6.62662 11.178L5.42067 12.3839C5.33588 12.4686 5.22094 12.5162 5.1011 12.5162C4.98126 12.5162 4.86632 12.4686 4.78152 12.3839L3.57558 11.178C3.53114 11.1366 3.49551 11.0867 3.47079 11.0312C3.44607 10.9757 3.43278 10.9158 3.43171 10.8551C3.43064 10.7944 3.44181 10.7341 3.46455 10.6778C3.4873 10.6215 3.52115 10.5703 3.5641 10.5274C3.60704 10.4844 3.65819 10.4506 3.7145 10.4278C3.77081 10.4051 3.83113 10.3939 3.89185 10.395C3.95257 10.396 4.01245 10.4093 4.06793 10.4341C4.1234 10.4588 4.17333 10.4944 4.21473 10.5388L4.64887 10.973V4.82868C4.64887 4.70874 4.69651 4.59371 4.78132 4.5089C4.86613 4.42409 4.98116 4.37645 5.1011 4.37645C5.22104 4.37645 5.33606 4.42409 5.42087 4.5089C5.50568 4.59371 5.55333 4.70874 5.55333 4.82868V10.973Z" fill="#656565"/>
                            </svg>
                        </button>
                        <button className="ConLabel" onClick={sortByCon} id='SortTag'>Condition 
                            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="16" viewBox="0 0 15 16" fill="none">
                                <path d="M8.39936 5.14825C8.48416 5.23294 8.5991 5.28051 8.71894 5.28051C8.83878 5.28051 8.95372 5.23294 9.03852 5.14825L9.47266 4.71411V10.8584C9.47266 10.9784 9.5203 11.0934 9.60511 11.1782C9.68992 11.263 9.80495 11.3106 9.92489 11.3106C10.0448 11.3106 10.1599 11.263 10.2447 11.1782C10.3295 11.0934 10.3771 10.9784 10.3771 10.8584V4.71411L10.8113 5.14825C10.8527 5.19268 10.9026 5.22832 10.9581 5.25304C11.0135 5.27776 11.0734 5.29105 11.1341 5.29212C11.1949 5.29319 11.2552 5.28202 11.3115 5.25927C11.3678 5.23653 11.4189 5.20268 11.4619 5.15973C11.5048 5.11679 11.5387 5.06564 11.5614 5.00933C11.5842 4.95302 11.5953 4.8927 11.5943 4.83198C11.5932 4.77126 11.5799 4.71138 11.5552 4.6559C11.5305 4.60043 11.4948 4.5505 11.4504 4.5091L10.2445 3.30315C10.1597 3.21847 10.0447 3.1709 9.92489 3.1709C9.80505 3.1709 9.6901 3.21847 9.60531 3.30315L8.39936 4.5091C8.31468 4.59389 8.26711 4.70884 8.26711 4.82868C8.26711 4.94852 8.31468 5.06346 8.39936 5.14825ZM5.55333 10.973L5.98747 10.5388C6.02887 10.4944 6.0788 10.4588 6.13427 10.4341C6.18974 10.4093 6.24963 10.396 6.31035 10.395C6.37107 10.3939 6.43138 10.4051 6.4877 10.4278C6.54401 10.4506 6.59516 10.4844 6.6381 10.5274C6.68104 10.5703 6.7149 10.6215 6.73764 10.6778C6.76039 10.7341 6.77156 10.7944 6.77049 10.8551C6.76941 10.9158 6.75612 10.9757 6.73141 11.0312C6.70669 11.0867 6.67105 11.1366 6.62662 11.178L5.42067 12.3839C5.33588 12.4686 5.22094 12.5162 5.1011 12.5162C4.98126 12.5162 4.86632 12.4686 4.78152 12.3839L3.57558 11.178C3.53114 11.1366 3.49551 11.0867 3.47079 11.0312C3.44607 10.9757 3.43278 10.9158 3.43171 10.8551C3.43064 10.7944 3.44181 10.7341 3.46455 10.6778C3.4873 10.6215 3.52115 10.5703 3.5641 10.5274C3.60704 10.4844 3.65819 10.4506 3.7145 10.4278C3.77081 10.4051 3.83113 10.3939 3.89185 10.395C3.95257 10.396 4.01245 10.4093 4.06793 10.4341C4.1234 10.4588 4.17333 10.4944 4.21473 10.5388L4.64887 10.973V4.82868C4.64887 4.70874 4.69651 4.59371 4.78132 4.5089C4.86613 4.42409 4.98116 4.37645 5.1011 4.37645C5.22104 4.37645 5.33606 4.42409 5.42087 4.5089C5.50568 4.59371 5.55333 4.70874 5.55333 4.82868V10.973Z" fill="#656565"/>
                            </svg>
                        </button>
                        <div className="TagsLabel"> Tags </div>
                    </div>
                </div>

                <div className="ItemBarHolder">
                    {currentUnits}
                </div>
                
                <div className="pagination-controls">
                    <div className="num-items">
                        <p className="view">View </p>
                        <select className="select-num" id="select-num" onChange={handleUnitsPerPageChange}>
                            <option value="15">15</option>
                            <option value="25">25</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                        </select>
                    </div>
                    <div className="page-selection">
                        <StylishButton className="leftBtn" 
                                        label = "&lt;" 
                                        onClick={goToPreviousPage} 
                                        disabled={currentPage === 1}
                                        styleType='style4'>
                        </StylishButton>
                        {buttons.map((number) => (
                            <StylishButton className="pageNum" 
                                            label={number} 
                                            key={number} 
                                            onClick={() => setCurrentPage(number)}
                                            styleType={currentPage === number ? 'style5' : 'style4'}>
                            </StylishButton>
                        ))}

                        <StylishButton className="rightBtn" 
                                        label="&gt;"
                                        onClick={goToNextPage} 
                                        disabled={currentPage === totalPages}
                                        styleType='style4'>
                        </StylishButton>
                    </div>
                </div>
            </div>
        </>

    );
}
/**************************************************************
 *
 *                     Popup.jsx
 *
 *        Authors: Dan Glorioso & Hannah Jiang & Zack White
 *           Date: 02/16/2025
 *
 *     Summary: The sidebar popup for a selected item in the inventory page.
 * 
 **************************************************************/

"use client";
import "./Popup.css";
import StylishButton from "../../components/StylishButton";
import "./InventoryUnit.css";
import Link from "next/link";
import Image from "next/image";
import { useEffect, useState } from "react";

export default function Popup( { onClose, onOptionSelect, unitList, unitIndex } ) {
    const [isClosing, setIsClosing] = useState(false);
    const [selectedImage, setSelectedImage] = useState(0);
    const [unit, setUnit] = useState(unitList[unitIndex]);
    const [currIndex, setCurrIndex] = useState(unitIndex);
    const [currBorrower, setCurrBorrower] = useState(null);
    const [borrowerHistory, setBorrowerHistory] = useState([]);
    

    // Extract the unit details
    const { id, name, status, age_group, gender, color, season, garment_type, size, time_period, condition, cost, location, date_added, borrow_history, notes, image_keys} = unit; 

    // Close container if anywhere but the container is clicked
    const handleContainerClick = (e) => {
        if (e.target.classList.contains("expandedContainer")) {
            closePopup();
        }
    }

    const closePopup = () => {
        setIsClosing(true);
        setTimeout(() => {
            onClose();
        }, 200);
    }

    const fetchBorrowers = async () => {
        try {
            console.log("testing populating borrower data");
            console.log(id);
            const response = await fetch(`../../../../api/db`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: 'SELECT current_borrower, borrow_history FROM dummy_data WHERE id = $1',
                    params: [id]
                })
            });

            if (response.ok) {
                const data = await response.json();

                const currBorrower = data[0].current_borrower;
                const borrowHistory = data[0].borrow_history;
                if (currBorrower !== null) {
                    fetchCurrBorrower(currBorrower);
                } else {
                    setCurrBorrower(null);
                }
                if (borrowHistory !== null) {
                    fetchBorrowHistory(borrowHistory);
                } else {
                    setBorrowerHistory([]);
                }
                console.log(data);
                console.log(currBorrower);
                console.log(borrowHistory);
            } else {
                console.error("Failed to fetch borrower data");
            }
        } catch (error) {
            console.error(error);
        }
    };

    const fetchBorrowHistory = async (borrowHistory) => {
        // Fetching from borrows table
        try {
            console.log("testing populating borrower history data");
            console.log(borrowHistory);
            const response = await fetch(`../../../../api/db`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: 'SELECT date_borrowed, date_returned, approver, notes FROM borrows WHERE borrower_id = ANY($1) AND item_id = $2',
                    params: [borrowHistory, id]
                })
            });

            if (response.ok) {
                const data = await response.json();
                console.log("borrower history data: ");
                console.log(data);

                const borrowData = data.map((borrow) => {
                    return {
                        dateBorrowed: borrow.date_borrowed,
                        dateReturned: borrow.date_returned,
                        approver: borrow.approver,
                        notes: borrow.notes,
                    };
                });
                setBorrowerHistory(borrowData);
                console.log("borrowHistoryData: ");
                console.log(borrowData);
                
            } else {
                console.error("Failed to fetch borrower data");
            }
        } catch (error) {
            console.error(error);
        }
    };
    
    const fetchCurrBorrower = async (currBorrower) => {
        // Fetching from borrower table
        let borrowData = null;
        try {
            console.log("testing populating borrower data");
            console.log(id);
            const response = await fetch(`../../../../api/db`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: 'SELECT * FROM borrowers WHERE id = $1',
                    params: [currBorrower]
                })
            });

            if (response.ok) {
                const data = await response.json();

                borrowData = {
                    name: data[0].name,
                    email: data[0].email,
                    phone_number: data[0].phone_number,
                };

                setCurrBorrower(borrowData);
                console.log("borrowData: ");
                console.log(borrowData);
                
            } else {
                console.error("Failed to fetch borrower data");
            }
        } catch (error) {
            console.error(error);
        }

        // Fetching from borrows table
        try {
            const response = await fetch(`../../../../api/db`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: 'SELECT date_borrowed, return_date, approver, notes FROM borrows WHERE borrower_id = $1 AND item_id = $2',
                    params: [currBorrower, id]
                })
            });

            if (response.ok) {
                const data = await response.json();

                borrowData = {
                    ...borrowData,
                    date_borrowed: data[0].date_borrowed,
                    return_date: data[0].return_date,
                    approved_by: data[0].approver,
                    notes: data[0].notes,
                };

                setCurrBorrower(borrowData);
                console.log("borrowData: ");
                console.log(borrowData);
                
            } else {
                console.error("Failed to fetch borrower data");
            }
        } catch (error) {
            console.error(error);
        }
    };

    const handleLeftArrow = () => {
        if (currIndex > 0) {
            setCurrIndex(currIndex - 1);
            setUnit(unitList[currIndex - 1]);
            fetchBorrowers();

        }
    }

    const handleRightArrow = () => {
        if (currIndex < unitList.length - 1) {
            setCurrIndex(currIndex + 1);
            setUnit(unitList[currIndex + 1]);
            fetchBorrowers();
        }
    }

    // Add event listener for Escape key
    useEffect(() => {
        const handleKeyDown = (e) => {
            if (e.key === "Escape") {
                closePopup();
            }
        };

        console.log("pop up is open")

        document.addEventListener("keydown", handleKeyDown);

        // Cleanup event listener on component unmount
        return () => {
            document.removeEventListener("keydown", handleKeyDown);
        };
    }, []);

    // Fetch borrower information
    useEffect(() => {
        fetchBorrowers();
    }, [id]);

    // Set the status missing/found status statement based on the status
    const statusStatement = status === "Missing" ? (
        <button 
            style={{ border: "none", background: "none", color: "red", textDecoration: "underline"}}
            onClick={() => onOptionSelect("Available")}>
            <p style={{fontSize: "1.1em"}}>Mark Item as <span style={{ color: "red", fontWeight: "bold", fontSize: "1em"}}>Found</span></p>
            </button>
    ) : (
        <button style={{ border: "none", background: "none", color: "red", textDecoration: "underline"}}
            onClick={() => onOptionSelect("Missing")}>
            <p style={{fontSize: "1.1em"}}>Mark Item as <span style={{ color: "red", fontWeight: "bold", fontSize: "1em"}}>Missing</span></p>
        </button>
    );

    useEffect(() => {
        if (borrowers && borrowers.length > 0) {
          console.log("borrowers:", borrowers[0].name);
        }
      }, [borrowers]);

      console.log("tags log", unit.color); 
      console.log("tags log", unit.condition); 


    useEffect(() => {
        if (!unit) return;
    }, [unit]);

    
    if (!unit) {
        return null;
    }
      
    return (
        <div className={`expandedContainer ${isClosing ? 'fade-out' : 'fade-in'}`} onClick={handleContainerClick}>
            <div className={`expandedContent ${isClosing ? 'slide-out' : 'slide-in'}`}>
                <div className="headerEC">

                    {/* Title and arrow buttons */}
                    <div className="titleButton">
                        <h2>{name}</h2>
                            <div className="buttons">
                                {/* Left arrow button */}
                                <StylishButton
                                    styleType={"style7"}
                                    onClick={handleLeftArrow}
                                >
                                        <img src="/icons/arrow-left.svg" className="arrowIcon" alt="Next" />
                                </StylishButton>
                                
                                {/* Right arrow button */}
                                <StylishButton
                                    styleType={"style7"}
                                    onClick={handleRightArrow}
                                >
                                    <img src="/icons/arrow-right.svg" className="arrowIcon" alt="Next" />
                                </StylishButton>
                            </div>
                    </div>

                    {/* Close button */}
                    <div className="exit">
                        <StylishButton
                            styleType={"style7"}
                            onClick={closePopup}
                        >
                            <img src="/icons/close.svg" className="closeIcon" alt="Close" />
                        </StylishButton>
                    </div>
                </div>
                
                {/* Image Viewer */}
                <div className="imageContainer">
                    {image_keys && image_keys.length > 0 && (
                        // Note: adding the styling here is the only way I could get the image to fill the container
                        <div className="borrow-image" style={{ width: "100%", height: "100%" }}>
                        <Image
                            src={`https://upload-r2-assets.somerville-museum1.workers.dev/${image_keys[selectedImage]}`}
                            fill
                            alt="No image found"
                            style={{ objectFit: "cover" }}  // Ensures the image covers the container
                        />
                        </div>
                    )}
                </div>

<div className="imageSelection">
    {/* Left arrow button */}
    <StylishButton
        styleType={"style4"}
        onClick={() => setSelectedImage((selectedImage - 1 + image_keys.length) % image_keys.length)}
    >
            <img src="/icons/arrow-left.svg" className="arrowIcon" alt="Next" />
    </StylishButton>
  {image_keys &&
    image_keys.map((key, index) => (
      <StylishButton
        key={index}
        styleType={selectedImage === index ? 'style5' : 'style4'}
        onClick={() => setSelectedImage(index)}
        label={`${index + 1}`}
      />
    ))}

    {/* Right arrow button */}
    <StylishButton
        styleType={"style4"}
        onClick={() => setSelectedImage((selectedImage + 1) % image_keys.length)}
    >
        <img src="/icons/arrow-right.svg" className="arrowIcon" alt="Next" />
    </StylishButton>
</div>


                {/* Info Title and Edit Button */}
                <div className="infoHeader">
                    <h3>Item Information</h3>
                    <Link href={`/edit?id=${id}`}>
                        <StylishButton
                            styleType={"style1"}
                            label={"Edit"}>
                        </StylishButton>
                    </Link>
                </div>

                {/* Item Information Table */}
                <table id="itemInformation">
                    <tbody>
                        <tr>
                            <td><strong>Name: </strong>{name}</td>
                            <td><strong>Size: </strong>{size}</td>
                        </tr>
                        <tr>
                            <td><strong>ID: </strong>{id}</td>
                            <td><strong>Age Group: </strong>{age_group}</td>
                        </tr>
                        <tr>
                            <td><strong>Cost: </strong>${cost}</td>
                            <td><strong>Sex: </strong>{gender}</td>
                        </tr>
                        <tr>
                            <td><strong>Date Added: </strong>{date_added}</td>
                            <td><strong>Season: </strong>{season}</td>
                        </tr>
                        <tr>
                        <td>
                            <strong>Condition: </strong>
                            <span style={{ display: "inline-flex", gap: "10px", flexWrap: "wrap" }}>
                                {(Array.isArray(condition) ? condition : [condition]).map((cond, i) => (
                                <span key={i} style={{ display: "inline-flex", alignItems: "center", gap: "6px" }}>
                                    <div className={`circle2 ${cond}`}></div>
                                    <span>{cond}</span>
                                </span>
                                ))}
                            </span>
                            </td>

                            <td>
                                <strong>Color: </strong>
                                <span style={{ display: "inline-flex", gap: "8px", flexWrap: "wrap" }}>
                                    {Array.isArray(color)? color.map((c, i) => (
                                        <span key={i}> {c} </span>
                                     )) : color}
                                </span>
                                                                
                                </td>
                        </tr>
                        <tr>
                            <td>
                                <strong>Status: </strong>
                                <span style={{ display: "inline-flex", alignItems: "center", gap: "8px" }}>
                                    <div className={`circle1 ${status}`}></div>
                                    {status}
                                </span>
                            </td>
                            <td><strong>Garment Type: </strong>{garment_type}</td>
                        </tr>

                        <tr>
                            <td>{statusStatement}</td>
                            <td><strong>Time Period: </strong>{time_period}</td>
                        </tr>
                    </tbody>
                </table>

                {/* Big Notes Box */}
                <div className="noteSection"> 
                    <p><strong>Notes</strong></p>
                    <textarea readOnly className="noteBox" value={notes || ""} />
                </div>


                {/* Horizontal diver */}
                <div id = "divider"></div>
                
                {/* Borrow Title and Return Button */}
                <div className="borrowerTitle">
                    <h3>Borrower Information</h3>
                    <div className="returnButton">
                        <Link href={`/return?id=${id}`}>
                            <StylishButton
                                styleType={"style1"}
                                label={"Return"}>
                            </StylishButton>
                        </Link>
                    </div>
                </div>

                {/* Borrower Info */}
                <div id="currentBorrowerContainer">
                    <table id="currentBorrower">
                        <thead>
                            <tr>
                            <th><strong>Current Borrower</strong></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                            <td><strong>Name: </strong>{currBorrower !== null ? currBorrower.name : "N/A"}</td>
                            <td><strong>Date Borrowed: </strong>{currBorrower !== null ? currBorrower.date_borrowed : "N/A"}</td>
                            </tr>
                            <tr>
                            <td><strong>Email: </strong>{currBorrower !== null ? currBorrower.email : "N/A"}</td>
                            <td><strong>Return Date: </strong>{currBorrower !== null ? currBorrower.return_date : "N/A"}</td>
                            </tr>
                            <tr>
                            <td><strong>Cell: </strong>{currBorrower !== null ? currBorrower.phone_number : "N/A"}</td>
                            <td><strong>Approved By: </strong>{currBorrower !== null ? currBorrower.approved_by : "N/A"}</td>
                            </tr>
                        </tbody>
                        </table>

                    {/* Borrow's Notes */}
                    <div className="noteSection"> 
                        <p><strong>Notes</strong></p>
                        <textarea readOnly className="noteBox" value={currBorrower !== null ? currBorrower.notes : ""} />
                    </div>

                </div>

                {/* Borrow History Table */}
                <div id="borrowerHistoryContainer">
                    <p id="borrowerHistorytitle">Borrower History</p> 
                    <table id="borrowerHistory">
                        <tbody>
                            {borrowerHistory.map((borrower, index) => (
                                <tr key={index + 1}>
                                    <td>{borrower.dateBorrowed || "N/A"} - {borrower.dateReturned || "N/A"}</td>
                                    <td>{borrower.approver || "N/A"}</td>
                                    <td>{borrower.notes || "N/A"}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div> 
        </div>
    );
}// InventoryUnit.jsx
"use client";
import { useState, useEffect, useRef, forwardRef} from "react";
import Popup from "./Popup";
import PrePopup from "./PrePopup";
import Image from "next/image"
import "./InventoryUnit.css";

export default function InventoryUnit({ unit, onChange, checked, unitList, index }) {

    const { id, name, status, age_group, gender, color, season, garment_type, size, time_period, condition, cost, authenticity_level, location, date_added, borrow_history, notes, image_keys} = unit; 
    const [isPopupVisible, setIsPopupVisible] = useState(false);
    const [isPrePopupVisible, setIsPrePopupVisible] = useState(false);
    const [popupPosition, setPopupPosition] = useState({ top: 0, left: 0 });
    const buttonRef = useRef(null);

    const handleDoubleClick = () => {
        setIsPopupVisible(true);
        setIsPrePopupVisible(false);
    }

    const handleClick = () => {
        setIsPrePopupVisible(true);
        if (buttonRef.current) {
            const rect = buttonRef.current.getBoundingClientRect();
            setPopupPosition({
                top: rect.bottom + window.scrollY - 5, // Position below button
                right: rect.right + window.scrollX - 1413, // Align right with button
            });
        }
    }

    const handleClosePrePopup = () => {
        setIsPrePopupVisible(false);
    } 

    const handleClosePopup = () => {
        setIsPopupVisible(false);
    }

    const handleClickOutside = (event) => {
        if (
            event.target.closest('.sidebar') === null &&
            event.target.closest('.unit') === null
        ) {
            setTimeout(() => setIsPrePopupVisible(false), 100); // Delay to allow re-opening
        } 
    };

    //CALL BACK FOR PREPOPUP
    const handlePopupOption = (option) => {
        if (option === "expand") {
            console.log("in expand " + isPopupVisible)
            setIsPopupVisible(true);
        } else if (option === "Missing" || option === "Available") {
            setAsMissingFound(option);
        } 
        setIsPrePopupVisible(false);
    }

    const setAsMissingFound = async (option) => {
        try {
            const response = await fetch(`../../../api/db`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: 'UPDATE dummy_data SET status=$1 WHERE id=$2',
                    params: [option, id],
                }),
            });

            if (!response.ok) {
                throw new Error(`Fetch error: ${response.status} - ${response.statusText}`);
            }
            window.location.reload();
        } catch (error){
            alert("An error occurred. Please try again.");
            return;
        }
    };

    const checkboxRef = useRef(null);


    useEffect(() => {
        if (isPopupVisible || isPrePopupVisible) {
            document.addEventListener('click', handleClickOutside);
        } else {
            document.removeEventListener('click', handleClickOutside)
        }
    }, [isPopupVisible]);

        // Add a condition to make sure `unit` is defined
        if (!unit) {
            return null; // Don't render anything if `unit` is undefined
        }

    if(checked) {
        console.log("Items Checked?", checked);
    }

    const getHighestCondition = (conditions) => 
        conditions.reduce((best, c) =>
            order.indexOf(c) < order.indexOf(best) ? c : best, conditions[0]
        );
    
    const order = [
        "Great",
        "Good",
        "Needs washing",
        "Needs repair",
        "Needs dry cleaning",
        "Not usable"
    ];

    //not pulling tags
    return (  
        <div className="unit" onDoubleClick={handleDoubleClick}> 
            <div className="left-section">
            <div className="check-box">
                <input 
                    type="checkbox" 
                    id={`customCheckbox-${id}`} 
                    className="checkbox-input" 
                    checked={checked} 
                    onChange={(e) => onChange(unit, e.target.checked)}
                />
                </div>
                <div className="picture">
                    <div className="image-container">
                        {image_keys && image_keys.length > 0 && <Image 
                            src={`https://upload-r2-assets.somerville-museum1.workers.dev/${image_keys[0]}`} 
                            fill
                            alt="No image found"
                        />}
                        <img src={null} alt="Profile" />
                    </div>
                </div>
            </div>
            <div className="center-section">
                <div className="id"> {unit.id} </div>
                <div className="name">{unit.name}</div>
                <div className="status">
                    <div className={`circle1 ${unit.status}`} ></div>
                    {unit.status}
                </div>
                <div className="condition">
                    <div className={`circle2 ${getHighestCondition(Array.isArray(unit.condition) ? unit.condition : [unit.condition])}`} ></div>
                        {getHighestCondition(Array.isArray(unit.condition) ? unit.condition : [unit.condition])}
                </div>

            </div>
            <div className="tags">
                <div className="gender">{unit.gender}</div>
                <div className="season">{unit.season}</div>
                <div className="size">{unit.size}</div>
                <div className="time">
                    {Array.isArray(unit.time_period) && unit.time_period.length > 0 ? (
                        unit.time_period.map((period, index) => (
                            <span key={index}>{period}{index < unit.time_period.length - 1 ? ', ' : ''}</span>
                        ))
                    ) : (
                        'No time periods available'
                    )}
                </div>
            </div>
            <div className="drop-down">
                <button className="drop-downBtn" 
                        onClick={handleClick}
                        ref = {buttonRef}
                        >•••</button>
                { isPrePopupVisible && (
                    <PrePopup onClose={handleClosePrePopup} 
                        onOptionSelect={handlePopupOption}
                        position = {popupPosition}
                        status = {status}
                        unit={unit}/>
                )}   

                { isPopupVisible && (
                <Popup 
                    onClose={handleClosePopup} 
                    onOptionSelect={handlePopupOption}
                    unitIndex={index}
                    unitList={unitList}/>
                )}    
            </div>
        </div>
    );
}"use client";
import "./PrePopup.css";
import { useState, useEffect, useRef, forwardRef} from "react";
import StylishButton from "../../components/StylishButton";
import Link from "next/link";


export default function PrePopup({ unit, onClose, onOptionSelect, position, status}) {
    const popupRef = useRef(null);

    const handleExpandClick = () => {
        onOptionSelect("expand"); 
    };

    const handleFoundClick = () => {
        onOptionSelect("Available"); 
    };

    const handleMissingClick = () => {
        onOptionSelect("Missing");
    }

    useEffect(() => {
        function handleClickOutside(event) {
            if (popupRef.current && !popupRef.current.contains(event.target)) {
                onClose(); // Close the popup if clicked outside
            }
        }

        document.addEventListener("click", handleClickOutside);
        return () => {
            document.removeEventListener("click", handleClickOutside);
        };
    }, [onClose]);

    return (
        <div className="Popup" 
              style = {{top: position.top, right: position.right}}
              ref={popupRef}>
            <div className="Buttons">
                <div className="editBtn">
                     <svg xmlns="http://www.w3.org/2000/svg" width="20" height="21" viewBox="0 0 20 21" fill="none">
                    <path d="M10.4232 3.28369C10.6276 3.28392 10.8241 3.36217 10.9727 3.50246C11.1213 3.64275 11.2107 3.83449 11.2227 4.03849C11.2347 4.2425 11.1683 4.44339 11.0372 4.6001C10.906 4.75681 10.7199 4.85753 10.517 4.88166L10.4232 4.88728H4.00886V16.1124H15.234V9.69803C15.2342 9.49367 15.3124 9.29711 15.4527 9.14851C15.593 8.99991 15.7847 8.91048 15.9888 8.89851C16.1928 8.88653 16.3936 8.9529 16.5504 9.08407C16.7071 9.21523 16.8078 9.40129 16.8319 9.60422L16.8375 9.69803V16.1124C16.8377 16.5169 16.6849 16.9066 16.4098 17.2032C16.1347 17.4999 15.7576 17.6816 15.3542 17.7119L15.234 17.716H4.00886C3.60429 17.7161 3.21463 17.5633 2.91798 17.2882C2.62133 17.0131 2.43962 16.6361 2.40928 16.2326L2.40527 16.1124V4.88728C2.40515 4.48271 2.55794 4.09305 2.83303 3.7964C3.10811 3.49975 3.48516 3.31804 3.88859 3.2877L4.00886 3.28369H10.4232ZM15.4288 3.55871C15.5731 3.41491 15.7667 3.33142 15.9703 3.3252C16.1739 3.31898 16.3723 3.3905 16.5251 3.52523C16.6779 3.65996 16.7736 3.84779 16.793 4.05059C16.8123 4.25338 16.7537 4.45592 16.6291 4.61707L16.5625 4.69324L8.62478 12.6302C8.48049 12.774 8.28687 12.8575 8.08326 12.8637C7.87964 12.8699 7.6813 12.7984 7.5285 12.6637C7.37571 12.5289 7.27993 12.3411 7.26061 12.1383C7.24129 11.9355 7.29989 11.733 7.42449 11.5718L7.49104 11.4965L15.4288 3.55871Z" fill="white"/>
                    </svg>
                    <Link className="popupBtn" href={`/edit?id=${unit.id}`}>
                            Edit Item
                    </Link>
                </div>
                <div className="expandBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path d="M9.6212 12.7693C10.9497 12.7693 12.0266 11.6923 12.0266 10.3639C12.0266 9.03542 10.9497 7.9585 9.6212 7.9585C8.29274 7.9585 7.21582 9.03542 7.21582 10.3639C7.21582 11.6923 8.29274 12.7693 9.6212 12.7693Z" stroke="white" strokeWidth="1.60358"/>
                    <path d="M16.1866 9.50927C16.4977 9.88771 16.6533 10.0761 16.6533 10.364C16.6533 10.6518 16.4977 10.8402 16.1866 11.2187C15.0481 12.601 12.5369 15.1747 9.62156 15.1747C6.70625 15.1747 4.19503 12.601 3.05649 11.2187C2.74539 10.8402 2.58984 10.6518 2.58984 10.364C2.58984 10.0761 2.74539 9.88771 3.05649 9.50927C4.19503 8.12698 6.70625 5.55322 9.62156 5.55322C12.5369 5.55322 15.0481 8.12698 16.1866 9.50927Z" stroke="white" strokeWidth="1.60358"/>
                    </svg>
                    <button className="popupBtn" onClick={handleExpandClick}> 
                        View Expanded </button>
                </div>
                { status !== "Missing" && (
                    <div className="missingBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="21" viewBox="0 0 20 21" fill="none">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M8.01787 2.48193C11.5547 2.48193 14.4322 5.35948 14.4322 8.89629C14.4322 10.3761 13.9235 11.7366 13.0785 12.8231L17.638 17.3826L16.5042 18.5164L11.9447 13.9569C10.8582 14.8019 9.49766 15.3106 8.01787 15.3106C4.48106 15.3106 1.60352 12.4331 1.60352 8.89629C1.60352 5.35948 4.48106 2.48193 8.01787 2.48193ZM8.01787 4.08553C5.36504 4.08553 3.20711 6.24345 3.20711 8.89629C3.20711 11.5491 5.36504 13.707 8.01787 13.707C10.6707 13.707 12.8286 11.5491 12.8286 8.89629C12.8286 6.24345 10.6707 4.08553 8.01787 4.08553ZM8.01787 10.099C8.68209 10.099 9.22056 10.6374 9.22056 11.3017C9.22056 11.9659 8.68209 12.5044 8.01787 12.5044C7.35364 12.5044 6.81518 11.9659 6.81518 11.3017C6.81518 10.6374 7.35364 10.099 8.01787 10.099ZM8.81965 4.88731V8.89629H7.21605V4.88731H8.81965Z" fill="white"/>
                        </svg>
                        <button className="popupBtn" onClick={handleMissingClick}> 
                            Mark as Missing </button>
                    </div>
                )}

                { status === "Missing" && (
                    <div className="missingBtn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="21" viewBox="0 0 20 21" fill="none">
                            <path d="M5 9.1581L6.49707 7.964L7.75195 9.38542L10.7441 7L12 8.42141L7.51172 12L5 9.1581Z" fill="white"/>
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M12.9944 4.80168C14.0996 5.90661 14.7634 7.37704 14.8612 8.93681C14.9589 10.4966 14.4838 12.0384 13.5252 13.2726C13.5375 13.2833 13.5495 13.2945 13.5612 13.3063L16.9632 16.7083C17.1093 16.8595 17.1901 17.0621 17.1883 17.2723C17.1865 17.4825 17.1021 17.6836 16.9535 17.8323C16.8048 17.9809 16.6037 18.0653 16.3935 18.0671C16.1833 18.0689 15.9807 17.9881 15.8295 17.842L12.4275 14.44L12.3938 14.4039C11.1048 15.4038 9.48335 15.875 7.85927 15.7217C6.23518 15.5684 4.73048 14.8022 3.65129 13.5789C2.5721 12.3556 1.99949 10.767 2.04995 9.13652C2.1004 7.506 2.77014 5.95594 3.9229 4.80168C4.51853 4.20602 5.22565 3.73352 6.0039 3.41115C6.78214 3.08877 7.61626 2.92285 8.45864 2.92285C9.30101 2.92285 10.1351 3.08877 10.9134 3.41115C11.6916 3.73352 12.3987 4.20602 12.9944 4.80168ZM11.8606 12.7394C12.3133 12.2941 12.6734 11.7634 12.92 11.1782C13.1666 10.593 13.2949 9.96476 13.2975 9.32971C13.3 8.69466 13.1769 8.06539 12.935 7.47818C12.6932 6.89097 12.3375 6.35746 11.8885 5.90841C11.4394 5.45935 10.9059 5.10366 10.3187 4.86183C9.73148 4.62 9.1022 4.49682 8.46715 4.49941C7.8321 4.50199 7.20385 4.63029 6.61863 4.87689C6.03341 5.1235 5.50281 5.48353 5.05743 5.93622C4.16738 6.84089 3.67086 8.06062 3.67602 9.32971C3.68119 10.5988 4.18763 11.8144 5.08502 12.7118C5.98241 13.6092 7.19806 14.1157 8.46715 14.1208C9.73624 14.126 10.956 13.6295 11.8606 12.7394Z" fill="white"/>
                        </svg>
                        <button className="popupBtn" onClick={handleFoundClick}> 
                            Mark as Found </button>
                    </div>
                )}
            </div>
            
        </div>
    );
}
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import "../app.css";

export default function LoginConfirmed() {
    const router = useRouter();

    return (
        <div className="login-bg">
            <div className="confirmContainer">
                <Image src="/icons/checkmark.png" alt="Checkmark" width={50} height={50} />
                <div style={{ marginTop: "2vh" }}>Password Change Successful</div>
                <div style={{ fontWeight: "lighter" }}>Your Password has been changed.</div>
                <input
                    className={'returnButton'}
                    style={{ marginTop: "5vh" }}
                    type="button"
                    onClick={() => {router.push("/settings")}}
                    value={'Back to Settings'}
                />
            </div>
        </div>
    );
}
"use client";
import React from "react";
import { useState } from 'react';
import "./BorrowerExpanded.css";
import CloseButton from "../assets/CloseButton";
import ArrowLeft from "../assets/ArrowLeft";
import ArrowRight from "../assets/ArrowRight";
import { useEffect } from "react";

export default function BorrowerExpanded({ borrower, onClose, onPrev, onNext }) {
  const [isClosing, setIsClosing] = useState(false);

  const handleClose = () => {
    setIsClosing(true);
    setTimeout(() => {
      onClose(); // parent will unmount this component
    }, 300); // match animation time
  };

  const borrowHistoryEntries = borrower.borrow_history
    ? Object.entries(borrower.borrow_history)
    : [];

  // Add Escape key listener
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === "Escape") {
        onClose();
      }
    };

    document.addEventListener("keydown", handleKeyDown);

    // Cleanup event listener
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, [onClose]);

  if (!borrower) return null;

  return (
    <div className="popup-overlay" onClick={handleClose}>
      <div className={`popup-anim-wrapper ${isClosing ? 'slide-out' : 'slide-in'}`}> 
            <div className="popup" onClick={(e) => e.stopPropagation()}>

      

          <CloseButton className="close-btn" onClick={onClose} /> 

        <br />
        <h2>{borrower.name}</h2>
        <br />
        <p><strong>Email:</strong> {borrower.email}</p>
        <br />
        <p><strong>Cell:</strong> {borrower.phone_number}</p>
        
        <div style={{ marginTop: "1rem" }}>
          <strong>Borrow History:</strong>
          {borrowHistoryEntries.length > 0 ? (
            <table id="borrowerHistory">
              <tbody>
                {borrowHistoryEntries.map(([key, record]) => {
                  const dateRange = `${record.dateBorrowed} - ${record.dateReturned ? record.dateReturned : "Not Returned"}`;
                  return (
                    <React.Fragment key={key}>
                      <tr>
                        <td>{dateRange}</td>
                        <td>{record.itemId}</td>
                        <td>{record.borrowerId}</td>
                      </tr>
                      <tr className="history-divider">
                        <td colSpan="3" style={{ padding: "10px", backgroundColor: "#f9f9f9", fontWeight: "normal" }}>
                          Note: {record.note}
                        </td>
                      </tr>
                    </React.Fragment>
                  );
                })}
              </tbody>
            </table>
          ) : (
            <p>No Borrowing History</p>
          )}
        </div>

        <div className="navigation-arrows">
            <ArrowLeft className="nav-arrow left-arrow" onClick={onPrev} />
            <ArrowRight className="nav-arrow right-arrow" onClick={onNext}/>
        </div>
      </div>

      </div>
    </div>
  );
}"use client";
import "./Borrowers.css";
import BorrowerTable from "./BorrowerTable.jsx";
import BorrowerExpanded from "./BorrowerExpanded.jsx";
import BorrowerSearchBar from "../components/BorrowerSearchBar";
import { useState } from "react";

export default function BorrowerPage() {
  const [searchResults, setSearchResults] = useState([]);
  const [selectedBorrower, setSelectedBorrower] = useState(null);

  // Handler when a borrower is selected (via row double-click or three-dots click)
  const handleSelectBorrower = (borrower) => {
    setSelectedBorrower(borrower);
  };

  // Handler to close the popup
  const handleClosePopup = () => {
    setSelectedBorrower(null);
  };

  return (
    <>
      <div className="Items">
        <BorrowerSearchBar updateSearchResults={setSearchResults} />
        <BorrowerTable 
          searchResults={searchResults} 
          onSelectBorrower={handleSelectBorrower} 
        />
      </div>
      {selectedBorrower && (
        <BorrowerExpanded 
          borrower={selectedBorrower} 
          onClose={handleClosePopup} 
        />
      )}
    </>
  );
}
"use client";
import React, { useState, useEffect } from "react";
import "../globals.css";
import "./BorrowerTable.css";
import StylishButton from "../components/StylishButton";

export default function BorrowerTable({ searchResults, onSelectBorrower }) {
  const borrowers = searchResults || [];
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);

  const totalPages = Math.ceil(borrowers.length / itemsPerPage);

  useEffect(() => {
    if (currentPage > totalPages) {
      setCurrentPage(1);
    }
  }, [borrowers, itemsPerPage, totalPages, currentPage]);

  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentBorrowers = borrowers.slice(startIndex, startIndex + itemsPerPage);

  const handleItemsPerPageChange = (event) => {
    const newItemsPerPage = Number(event.target.value);
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1);
  };

  const goToPreviousPage = () => {
    setCurrentPage((prev) => Math.max(prev - 1, 1));
  };

  const goToNextPage = () => {
    setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  };

  const buttons = Array.from({ length: totalPages }, (_, index) => index + 1);

  return (
    <div className="tableContainer">
      <div className="tableContent">
        <table id="borrowerInfo">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone Number</th>
              <th>Borrow History</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {currentBorrowers.length > 0 ? (
              currentBorrowers.map((borrower, index) => {
                const hasHistory =
                  borrower.borrow_history &&
                  Object.keys(borrower.borrow_history).length > 0;
                return (
                  <tr key={index} onDoubleClick={() => onSelectBorrower(borrower)}>
                    <td>{borrower.name}</td>
                    <td>{borrower.email}</td>
                    <td>{borrower.phone_number}</td>
                    <td>
                      {hasHistory
                        ? Object.keys(borrower.borrow_history).join(", ")
                        : "No Borrowing History"}
                    </td>
                    <td onClick={() => onSelectBorrower(borrower)}>
                      <span className="three-dots">...</span>
                    </td>
                  </tr>
                );
              })
            ) : (
              <tr>
                <td colSpan="5" style={{ textAlign: "center" }}>
                  No borrowers found.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="flex-spacer" />

      <div className="pagination-controls">
        <div className="num-items">
          <p className="view">View </p>
          <select
            className="select-num"
            id="select-num"
            onChange={handleItemsPerPageChange}
            value={itemsPerPage}
          >
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50">50</option>
            <option value="100">100</option>
          </select>
        </div>
        <div className="page-selection">
          <StylishButton
            className="leftBtn"
            label="&lt;"
            onClick={goToPreviousPage}
            disabled={currentPage === 1}
            styleType="style4"
          />
          {buttons.map((number) => (
            <StylishButton
              className="pageNum"
              label={number}
              key={number}
              onClick={() => setCurrentPage(number)}
              styleType={currentPage === number ? "style5" : "style4"}
            />
          ))}
          <StylishButton
            className="rightBtn"
            label="&gt;"
            onClick={goToNextPage}
            disabled={currentPage === totalPages}
            styleType="style4"
          />
        </div>
      </div>
    </div>
  );
}
'use client'

const Logo = () => {
    return (
        <svg id="logo" viewBox="0 0 414 287" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M154.82 30.96H263.16M184.14 30.96V142.18M209.08 31.71V142.92M232.42 30.96V142.18" stroke="#A75869" strokeWidth="9.0284"/>
            <path d="M68.6899 19.1301H139.65M278.33 19.1301H352.09" stroke="#A75869" strokeWidth="9.0284" strokeLinecap="round"/>
            <path fillRule="evenodd" clipRule="evenodd" d="M272.512 16.8801H291.357C285.807 19.3821 280.661 22.2425 275.994 25.4057C257.959 37.6286 247.464 54.0395 247.464 71.5902C247.464 89.1404 257.959 105.546 275.993 117.764C294.003 129.965 319.136 137.656 347.12 137.656C356.144 137.656 364.872 136.856 373.16 135.363V144.527C364.805 145.939 356.082 146.684 347.12 146.684C317.573 146.684 290.622 138.58 270.929 125.239C251.261 111.914 238.436 93.0299 238.436 71.5902C238.436 50.1508 251.261 31.2617 270.929 17.9321C271.451 17.5777 271.979 17.227 272.512 16.8801ZM143.305 16.8801H124.46C130.007 19.3808 135.151 22.2395 139.816 25.401C157.851 37.6214 168.346 54.0297 168.346 71.5801C168.346 89.1306 157.851 105.539 139.816 117.759C121.807 129.963 96.6732 137.656 68.69 137.656C60.1324 137.656 51.8417 136.937 43.9399 135.589V144.74C51.9007 146.013 60.1877 146.684 68.69 146.684C98.2367 146.684 125.188 138.578 144.881 125.233C164.549 111.906 177.374 93.0197 177.374 71.5801C177.374 50.1406 164.549 31.2539 144.881 17.9268C144.361 17.5743 143.835 17.2253 143.305 16.8801Z" fill="#A75869"/>
            <path d="M136.34 21.3899V127.38M281.64 21.3899V127.38" stroke="#A75869" strokeWidth="9.0284"/>
            <path d="M314.41 21.3901V137.68M105.97 19.1301V135.42" stroke="#A75869" strokeWidth="9.0284"/>
            <path d="M125.29 16.5C130.77 16.5 135.21 13.03 135.21 8.75C135.21 4.47 130.77 1 125.29 1C119.81 1 115.37 4.47 115.37 8.75C115.37 13.03 119.81 16.5 125.29 16.5Z" fill="#A75869"/>
            <path d="M125.29 16.5C130.77 16.5 135.21 13.03 135.21 8.75C135.21 4.47 130.77 1 125.29 1C119.81 1 115.37 4.47 115.37 8.75C115.37 13.03 119.81 16.5 125.29 16.5Z" stroke="#A75869" strokeWidth="0.7524"/>
            <path d="M292.01 16.5C297.49 16.5 301.93 13.03 301.93 8.75C301.93 4.47 297.49 1 292.01 1C286.53 1 282.09 4.47 282.09 8.75C282.1 13.03 286.54 16.5 292.01 16.5Z" fill="#A75869"/>
            <path d="M292.01 16.5C297.49 16.5 301.93 13.03 301.93 8.75C301.93 4.47 297.49 1 292.01 1C286.53 1 282.09 4.47 282.09 8.75C282.1 13.03 286.54 16.5 292.01 16.5Z" stroke="#A75869" strokeWidth="0.7524"/>
            <path d="M85.28 21.3899V137.68M334.56 21.3699V137.66" stroke="#A75869" strokeWidth="9.0284"/>
            <path d="M43.21 139.93L49.1799 140.88" stroke="#A75869" strokeWidth="9.0284" strokeLinecap="round"/>
            <path d="M372.32 139.93L366.35 140.88" stroke="#A75869" strokeWidth="9.0284" strokeLinecap="round"/>
            <path d="M18.8 235.03V234.96C18.8 230.82 16.09 229.09 11.27 227.84C7.16 226.79 6.15 226.28 6.15 224.72V224.65C6.15 223.5 7.2 222.58 9.2 222.58C11.2 222.58 13.27 223.46 15.38 224.92L18.09 220.98C15.68 219.05 12.73 217.96 9.27 217.96C4.42 217.96 0.959999 220.81 0.959999 225.12V225.19C0.959999 229.91 4.05 231.23 8.83 232.45C12.8 233.47 13.61 234.15 13.61 235.47V235.54C13.61 236.93 12.32 237.78 10.18 237.78C7.47 237.78 5.23 236.66 3.09 234.9L0 238.6C2.85 241.15 6.48 242.4 10.08 242.4C15.2 242.39 18.8 239.74 18.8 235.03ZM48.21 230.17V230.1C48.21 223.35 42.95 217.89 35.62 217.89C28.29 217.89 22.96 223.42 22.96 230.17V230.24C22.96 236.99 28.22 242.45 35.55 242.45C42.89 242.46 48.21 236.93 48.21 230.17ZM42.75 230.24C42.75 234.31 39.83 237.64 35.63 237.64C31.42 237.64 28.44 234.25 28.44 230.18V230.11C28.44 226.04 31.36 222.71 35.56 222.71C39.76 222.71 42.75 226.1 42.75 230.18V230.24ZM76.61 242.05V218.3H70.98L64.74 228.34L58.5 218.3H52.87V242.05H57.99V226.65L64.61 236.69H64.74L71.42 226.55V242.06H76.61V242.05ZM102.09 242.05V237.4H89.2V232.41H100.4V227.76H89.2V222.94H101.92V218.29H84V242.04H102.09V242.05ZM128.97 242.05L123.17 233.57C126.19 232.45 128.26 230.04 128.26 226.21V226.14C128.26 221.25 124.9 218.3 119.3 218.3H108.44V242.05H113.66V234.45H117.77L122.86 242.05H128.97ZM122.96 226.48C122.96 228.48 121.5 229.84 118.96 229.84H113.67V223.02H118.86C121.4 223.02 122.96 224.17 122.96 226.41V226.48ZM155.77 218.3H150.14L143.93 235.03L137.72 218.3H131.95L141.55 242.22H146.16L155.77 218.3ZM166.59 242.05V218.3H161.37V242.05H166.59ZM191.29 242.05V237.3H179.45V218.3H174.22V242.05H191.29ZM213.99 242.05V237.3H202.15V218.3H196.93V242.05H213.99ZM237.71 242.05V237.4H224.82V232.41H236.02V227.76H224.82V222.94H237.54V218.29H219.62V242.04H237.71V242.05ZM279.68 242.05V218.3H274.05L267.81 228.34L261.57 218.3H255.94V242.05H261.06V226.65L267.68 236.69H267.82L274.5 226.55V242.06H279.68V242.05ZM307.4 231.7V218.3H302.18V231.91C302.18 235.68 300.25 237.61 297.06 237.61C293.87 237.61 291.94 235.61 291.94 231.74V218.3H286.71V231.87C286.71 238.86 290.61 242.42 296.99 242.42C303.37 242.42 307.4 238.89 307.4 231.7ZM331.59 235.03V234.96C331.59 230.82 328.88 229.09 324.06 227.84C319.95 226.79 318.94 226.28 318.94 224.72V224.65C318.94 223.5 319.99 222.58 321.99 222.58C323.99 222.58 326.06 223.46 328.17 224.92L330.88 220.98C328.47 219.05 325.52 217.96 322.06 217.96C317.21 217.96 313.75 220.81 313.75 225.12V225.19C313.75 229.91 316.84 231.23 321.62 232.45C325.59 233.47 326.4 234.15 326.4 235.47V235.54C326.4 236.93 325.11 237.78 322.97 237.78C320.26 237.78 318.02 236.66 315.88 234.9L312.79 238.6C315.64 241.15 319.27 242.4 322.87 242.4C328 242.39 331.59 239.74 331.59 235.03ZM355.92 242.05V237.4H343.03V232.41H354.23V227.76H343.03V222.94H355.75V218.29H337.83V242.04H355.92V242.05ZM382.59 231.7V218.3H377.36V231.91C377.36 235.68 375.43 237.61 372.24 237.61C369.05 237.61 367.12 235.61 367.12 231.74V218.3H361.89V231.87C361.89 238.86 365.79 242.42 372.17 242.42C378.55 242.42 382.59 238.89 382.59 231.7ZM413.36 242.05V218.3H407.73L401.49 228.34L395.25 218.3H389.62V242.05H394.74V226.65L401.36 236.69H401.5L408.18 226.55V242.06H413.36V242.05Z" fill="#A75869"/>
            <path d="M86.4201 276.73C84.5201 278.74 82.5901 279.76 81.5301 279.76C80.6501 279.76 80.2601 278.95 80.8101 276.55L82.3501 270.01C82.6501 268.72 82.5001 268.21 82.0801 268.21C80.9601 268.21 78.2501 270.85 76.7701 273.25C76.4101 274.72 75.8601 277.57 75.5601 279.16C74.5601 279.25 73.4801 279.52 72.5401 279.76L72.3301 279.52C73.6001 273.79 74.8101 268.03 75.9801 261.82C76.2501 260.35 76.0101 260.23 74.7701 260.2L74.0501 260.17L74.2601 259.27C77.0701 259.03 78.8801 258.22 79.3601 258.22C79.7201 258.22 79.7801 258.46 79.6001 259.27L77.1001 271.06H77.1601C79.0301 268.69 80.7801 267.34 82.0501 266.62C82.8001 266.17 83.7101 265.84 84.3701 265.84C85.1201 265.84 86.2401 266.32 85.3701 270.07L84.0401 275.95C83.8301 276.85 83.8901 277.12 84.1001 277.12C84.3701 277.12 85.2801 276.58 86.0001 275.92L86.4201 276.73Z" fill="#7D7773"/>
            <path d="M95.35 276.58C93.63 278.5 91.34 279.76 90.37 279.76C89.59 279.76 89.01 279.19 89.65 276.64L91.34 269.59C91.49 268.84 91.52 268.57 91.34 268.54C91.07 268.54 90.19 269.05 89.41 269.68L89.02 268.9C91.01 267.04 93.19 265.84 94.18 265.84C94.96 265.84 95.09 266.95 94.66 268.6L92.82 276.01C92.61 276.82 92.67 277.12 92.88 277.12C93.18 277.12 94.06 276.55 94.87 275.86L95.35 276.58ZM94.38 259.75C95.41 259.75 95.92 260.53 95.92 261.4C95.92 262.48 95.11 263.5 93.96 263.5C93.02 263.5 92.33 262.87 92.33 261.85C92.33 260.95 93.05 259.75 94.35 259.75H94.38Z" fill="#7D7773"/>
            <path d="M104.67 265.84C106.18 265.84 107.3 266.74 107.3 267.7C107.33 268.27 106.94 268.84 106.36 269.2C106.03 269.44 105.76 269.38 105.58 269.11C104.95 268.3 104.1 267.52 102.98 267.52C102.2 267.52 101.65 268.03 101.65 268.81C101.65 269.71 102.59 270.49 103.73 271.27C105.48 272.47 106.51 273.49 106.51 274.99C106.51 277.54 103.19 279.76 100.65 279.76C99.05 279.76 97.3 278.71 97.27 277.45C97.27 276.82 97.75 276.19 98.27 275.89C98.72 275.65 98.96 275.68 99.21 275.98C100.21 277.24 101.44 278.05 102.47 278.05C103.41 278.05 104.07 277.48 104.07 276.7C104.07 276.07 103.68 275.47 102.2 274.36C100.84 273.37 99.3 272.29 99.3 270.52C99.3 269.5 99.69 268.45 101.08 267.34C102.14 266.5 103.56 265.84 104.64 265.84H104.67Z" fill="#7D7773"/>
            <path d="M117.86 267.58L114.99 267.7L113.36 275.5C113.06 276.88 113.21 277.27 113.51 277.27C113.96 277.27 115.32 276.37 116.08 275.65L116.53 276.37C115.44 277.81 112.88 279.76 111.22 279.76C110.25 279.76 109.62 278.77 110.31 275.59L112 267.7H109.83L109.68 267.4L110.49 266.35H112.3L112.96 263.56L116.04 261.49L116.37 261.73L115.31 266.35H118.69L117.86 267.58Z" fill="#7D7773"/>
            <path d="M127.43 265.84C130.24 265.84 131.75 267.7 131.75 270.58C131.75 273.19 130.69 276.04 128.52 277.84C127.22 278.95 125.35 279.76 123.54 279.76C120.19 279.76 119.19 277.27 119.19 274.93C119.19 271.03 121.36 268.15 123.72 266.92C124.9 266.26 126.26 265.84 127.4 265.84H127.43ZM126.31 267.1C126.04 267.1 125.71 267.16 125.43 267.28C124.49 267.73 122.59 270.22 122.59 275.05C122.59 277.3 123.53 278.47 124.67 278.47C125.03 278.47 125.24 278.41 125.52 278.32C126.85 277.78 128.33 274.6 128.33 270.52C128.33 268.15 127.45 267.1 126.34 267.1H126.31Z" fill="#7D7773"/>
            <path d="M139.38 270.7C140.86 267.94 142.49 265.84 143.76 265.84C144.3 265.84 144.85 266.17 145.15 266.62C145.48 267.1 145.42 267.73 145.06 268.27C144.73 268.81 144.43 269.14 144.09 269.41C143.82 269.59 143.58 269.62 143.37 269.41C143.01 269.05 142.59 268.87 142.22 268.87C141.92 268.87 141.56 269.05 140.92 269.92C140.17 270.94 139.38 272.35 139.05 273.37C138.63 275.11 138.17 277.39 137.87 279.13C136.9 279.25 135.73 279.49 134.91 279.73L134.67 279.49C135.42 276.34 136.15 273.04 136.75 269.83C136.93 268.87 136.93 268.48 136.69 268.48C136.42 268.48 135.39 269.08 134.76 269.68L134.31 268.9C136 267.16 137.99 265.84 139.02 265.84C139.86 265.84 140.05 266.98 139.56 269.32L139.26 270.7H139.38Z" fill="#7D7773"/>
            <path d="M153.71 276.73C155.19 274.54 157.27 271.39 157.27 269.26C157.24 268.54 157 268.09 156.85 267.73C156.76 267.4 156.79 267.07 156.94 266.77C157.24 266.23 157.85 265.84 158.45 265.84C159.17 265.84 159.87 266.5 159.9 267.73C159.9 268.57 159.57 269.65 158.75 271.03C157.39 273.31 155.34 276.31 153.65 278.68C151.87 281.2 150.03 283.72 148.07 285.94L144.39 286.84L144.15 286.09C147.32 284.02 149.37 282.16 150.97 280.06C151 277.66 150.46 272.77 149.94 270.04C149.73 268.84 149.52 268.51 149.31 268.51C149.1 268.51 148.46 269.05 147.65 270.13L147.05 269.35C148.23 267.49 149.89 265.84 151.12 265.84C152.12 265.84 152.69 266.92 153.02 269.68C153.32 272.08 153.5 274.21 153.65 276.73H153.71Z" fill="#7D7773"/>
            <path d="M204.53 276.37C202.63 278.65 200.46 279.76 199.52 279.76C198.86 279.76 198.28 279.34 198.8 276.79L199.22 274.75H199.13C198.04 276.28 196.84 277.45 195.84 278.29C194.9 279.07 193.73 279.76 192.76 279.76C191.7 279.76 190.77 278.56 190.77 276.19C190.77 273.28 192.13 270.19 194.21 268.39C195.63 267.13 198.07 265.84 200.34 265.84H200.37C200.97 265.84 201.61 265.93 202.27 266.05C202.87 266.17 203.36 266.23 203.81 266.26L203.96 266.38C203.39 268.72 202.57 272.23 201.94 275.86C201.76 276.79 201.82 277.09 202 277.09C202.27 277.09 203.33 276.34 204.08 275.59L204.53 276.37ZM198.83 267.28C198.17 267.28 197.65 267.43 197.2 267.76C195.24 269.17 194.18 272.83 194.18 275.53C194.18 276.79 194.45 277.33 194.9 277.33C195.99 277.33 198.91 273.82 199.58 272.38C199.97 271 200.49 268.63 200.64 267.7C200.25 267.46 199.49 267.28 198.86 267.28H198.83Z" fill="#7D7773"/>
            <path d="M211.65 270.7C213.13 267.94 214.76 265.84 216.03 265.84C216.57 265.84 217.12 266.17 217.42 266.62C217.75 267.1 217.69 267.73 217.33 268.27C217 268.81 216.7 269.14 216.36 269.41C216.09 269.59 215.85 269.62 215.64 269.41C215.28 269.05 214.86 268.87 214.49 268.87C214.19 268.87 213.83 269.05 213.19 269.92C212.44 270.94 211.65 272.35 211.32 273.37C210.9 275.11 210.44 277.39 210.14 279.13C209.17 279.25 208 279.49 207.18 279.73L206.94 279.49C207.69 276.34 208.42 273.04 209.02 269.83C209.2 268.87 209.2 268.48 208.96 268.48C208.69 268.48 207.66 269.08 207.03 269.68L206.58 268.9C208.27 267.16 210.26 265.84 211.29 265.84C212.13 265.84 212.32 266.98 211.83 269.32L211.53 270.7H211.65Z" fill="#7D7773"/>
            <path d="M227.92 267.58L225.05 267.7L223.42 275.5C223.12 276.88 223.27 277.27 223.57 277.27C224.02 277.27 225.38 276.37 226.14 275.65L226.59 276.37C225.5 277.81 222.94 279.76 221.28 279.76C220.31 279.76 219.68 278.77 220.37 275.59L222.06 267.7H219.89L219.74 267.4L220.55 266.35H222.36L223.02 263.56L226.1 261.49L226.43 261.73L225.37 266.35H228.75L227.92 267.58Z" fill="#7D7773"/>
            <path d="M268.66 276.34C266.67 278.59 264.31 279.76 262.44 279.76C260.21 279.76 258.88 278.17 258.88 275.29C258.88 272.77 260 269.92 262.11 268.06C263.41 266.92 265.55 265.84 267.18 265.84C268.57 265.84 269.72 266.56 269.72 267.49C269.75 268.03 269.39 268.69 268.54 269.17C268.24 269.38 267.97 269.35 267.73 269.05C266.98 267.88 266.19 267.37 265.38 267.37C264.66 267.37 264.02 267.97 263.51 268.96C262.82 270.28 262.3 272.32 262.3 274.48C262.3 276.64 263.05 277.6 264.29 277.6C265.68 277.6 267.43 276.28 268.15 275.56L268.66 276.34Z" fill="#7D7773"/>
            <path d="M285.8 276.52C283.87 278.71 281.94 279.76 280.91 279.76C280.03 279.76 279.7 278.86 280.22 276.67C280.4 275.92 280.55 275.23 280.67 274.51H280.64C278.83 276.88 277.05 278.35 275.93 279.04C275.21 279.52 274.42 279.76 273.73 279.76C272.85 279.76 271.77 279.19 272.61 275.59C273.09 273.61 273.55 271.63 274 269.62C274.21 268.72 274.18 268.51 274 268.39C273.76 268.39 272.91 269.02 272.07 269.68L271.71 268.84C273.58 267.04 275.6 265.84 276.63 265.84C277.45 265.84 277.69 266.53 277.17 268.75C276.66 270.94 276.14 273.19 275.63 275.35C275.33 276.76 275.48 277.27 275.93 277.27C277.41 277.27 280.25 273.64 281.06 272.14C281.48 270.4 281.91 268.54 282.3 266.65L285.17 265.84H285.56C284.78 268.93 283.99 272.17 283.3 275.83C283.12 276.82 283.15 277.09 283.36 277.09C283.6 277.09 284.6 276.46 285.35 275.71L285.8 276.52Z" fill="#7D7773"/>
            <path d="M294.49 276.61C292.68 278.62 290.48 279.76 289.48 279.76C288.76 279.76 288.18 279.1 288.85 275.95C289.82 271.27 290.75 266.62 291.72 261.97C292.05 260.47 291.9 260.26 290.63 260.2L289.79 260.14L289.94 259.3C292.66 259.06 294.62 258.22 295.07 258.22C295.43 258.22 295.46 258.52 295.31 259.27C294.16 264.85 292.99 270.43 291.84 276.07C291.63 276.91 291.72 277.21 291.93 277.21C292.2 277.21 293.23 276.58 294.04 275.83L294.49 276.61Z" fill="#7D7773"/>
            <path d="M305.2 267.58L302.33 267.7L300.7 275.5C300.4 276.88 300.55 277.27 300.85 277.27C301.3 277.27 302.66 276.37 303.42 275.65L303.87 276.37C302.78 277.81 300.22 279.76 298.56 279.76C297.59 279.76 296.96 278.77 297.65 275.59L299.34 267.7H297.17L297.02 267.4L297.83 266.35H299.64L300.3 263.56L303.38 261.49L303.71 261.73L302.65 266.35H306.03L305.2 267.58Z" fill="#7D7773"/>
            <path d="M321.05 276.52C319.12 278.71 317.19 279.76 316.16 279.76C315.28 279.76 314.95 278.86 315.47 276.67C315.65 275.92 315.8 275.23 315.92 274.51H315.89C314.08 276.88 312.3 278.35 311.18 279.04C310.46 279.52 309.67 279.76 308.98 279.76C308.1 279.76 307.02 279.19 307.86 275.59C308.34 273.61 308.8 271.63 309.25 269.62C309.46 268.72 309.43 268.51 309.25 268.39C309.01 268.39 308.16 269.02 307.32 269.68L306.96 268.84C308.83 267.04 310.85 265.84 311.88 265.84C312.7 265.84 312.94 266.53 312.42 268.75C311.91 270.94 311.39 273.19 310.88 275.35C310.58 276.76 310.73 277.27 311.18 277.27C312.66 277.27 315.5 273.64 316.31 272.14C316.73 270.4 317.16 268.54 317.55 266.65L320.42 265.84H320.81C320.03 268.93 319.24 272.17 318.55 275.83C318.37 276.82 318.4 277.09 318.61 277.09C318.85 277.09 319.85 276.46 320.6 275.71L321.05 276.52Z" fill="#7D7773"/>
            <path d="M328.53 270.7C330.01 267.94 331.64 265.84 332.91 265.84C333.45 265.84 334 266.17 334.3 266.62C334.63 267.1 334.57 267.73 334.21 268.27C333.88 268.81 333.58 269.14 333.24 269.41C332.97 269.59 332.73 269.62 332.52 269.41C332.16 269.05 331.73 268.87 331.37 268.87C331.07 268.87 330.71 269.05 330.07 269.92C329.32 270.94 328.53 272.35 328.2 273.37C327.78 275.11 327.32 277.39 327.02 279.13C326.05 279.25 324.88 279.49 324.06 279.73L323.82 279.49C324.57 276.34 325.3 273.04 325.9 269.83C326.08 268.87 326.08 268.48 325.84 268.48C325.57 268.48 324.54 269.08 323.91 269.68L323.46 268.9C325.15 267.16 327.14 265.84 328.17 265.84C329.02 265.84 329.2 266.98 328.71 269.32L328.41 270.7H328.53Z" fill="#7D7773"/>
            <path d="M345.52 276.16C342.83 278.95 340.54 279.76 338.7 279.76C337.04 279.76 335.11 278.86 335.11 275.32C335.11 272.5 336.38 269.44 338.67 267.67C339.91 266.71 341.81 265.84 343.32 265.84C345.28 265.84 346.28 267.01 346.28 268.36C346.28 271.42 341.45 272.95 338.46 273.73C338.43 274.06 338.43 274.33 338.43 274.57C338.43 276.13 338.97 277.6 340.6 277.6C341.81 277.6 343.53 276.76 344.98 275.35L345.52 276.16ZM342.08 267.16C341.75 267.16 341.36 267.28 341.05 267.49C340.33 267.94 339 269.53 338.58 272.68C342.2 271.6 343.35 270.31 343.35 268.78C343.35 267.64 342.66 267.16 342.11 267.16H342.08Z" fill="#7D7773"/>
            <path d="M173.75 273.49C175.136 273.49 176.26 272.371 176.26 270.99C176.26 269.609 175.136 268.49 173.75 268.49C172.364 268.49 171.24 269.609 171.24 270.99C171.24 272.371 172.364 273.49 173.75 273.49Z" fill="#7D7773"/>
            <path d="M243.39 273.49C244.776 273.49 245.9 272.371 245.9 270.99C245.9 269.609 244.776 268.49 243.39 268.49C242.004 268.49 240.88 269.609 240.88 270.99C240.88 272.371 242.004 273.49 243.39 273.49Z" fill="#7D7773"/>
            <path fillRule="evenodd" clipRule="evenodd" d="M47.4399 167.286V140.4H112.62V167.286H47.4399ZM120.7 176.32V140.4H295.04V176.32H303.13V176.314H341.726V205.18H334.817C334.875 204.598 334.904 203.998 334.904 203.38V200.52H330.39C334.904 200.52 334.904 200.518 334.904 200.516V200.511V200.5L334.904 200.477L334.903 200.419C334.903 200.375 334.901 200.321 334.899 200.257C334.895 200.131 334.887 199.966 334.873 199.769C334.845 199.375 334.791 198.843 334.687 198.215C334.481 196.982 334.062 195.269 333.178 193.501C332.285 191.716 330.875 189.793 328.675 188.326C326.448 186.841 323.68 186.006 320.39 186.006H96.79V190.52C96.79 186.006 96.7878 186.006 96.7855 186.006H96.7807L96.7704 186.006L96.747 186.006L96.6886 186.007C96.6446 186.007 96.5907 186.009 96.5273 186.011C96.4009 186.015 96.2362 186.023 96.0387 186.037C95.6453 186.065 95.1127 186.119 94.4854 186.223C93.2523 186.429 91.5391 186.848 89.7712 187.732C87.9857 188.625 86.0629 190.035 84.5965 192.235C83.1113 194.463 82.2758 197.23 82.2758 200.52V203.38H86.79C82.2758 203.38 82.2758 203.382 82.2758 203.385V203.389L82.2759 203.4L82.276 203.423L82.2767 203.482C82.2774 203.525 82.2787 203.579 82.2808 203.643C82.285 203.769 82.2927 203.934 82.3068 204.131C82.3271 204.414 82.3607 204.769 82.4169 205.18H74.6441V176.314H112.62V176.32H120.7ZM303.13 167.286H368.46V140.4H303.13V167.286ZM47.4399 176.314V205.18H65.6157V176.314H47.4399ZM350.754 205.18H368.46V176.314H350.754V205.18Z" fill="#A75869"/>
        </svg>

    )
}

export default Logo;'use client';
import React from 'react';

const ArrowLeft = ({ onClick, ariaLabel = "Previous" }) => {
  return (
    <button 
      type="button"
      onClick={onClick}
      aria-label={ariaLabel}
      style={{
        width: '30px',
        height: '30px',
        border: '1px solid #9B525F',
        borderRadius: '4px',
        background: 'transparent',
        cursor: 'pointer',
        padding: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}
    >
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" className="main-grid-item-icon" fill="none" stroke="#9B525F" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2">
        <polyline points="15 18 9 12 15 6" />
    </svg>  
    </button>
  );
};

export default ArrowLeft;
'use client';
import React from 'react';

const Dropdown = () => {
    return (
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 24 24" fill="none">
                <path fillRule="evenodd" clipRule="evenodd" d="M12.7071 14.7071C12.3166 15.0976 11.6834 15.0976 11.2929 14.7071L6.29289 9.70711C5.90237 9.31658 5.90237 8.68342 6.29289 8.29289C6.68342 7.90237 7.31658 7.90237 7.70711 8.29289L12 12.5858L16.2929 8.29289C16.6834 7.90237 17.3166 7.90237 17.7071 8.29289C18.0976 8.68342 18.0976 9.31658 17.7071 9.70711L12.7071 14.7071Z" fill="rgba(155, 82, 95, 1)"/>
            </svg>
        </div>
    );
}

export default Dropdown;'use client';
import React from 'react';

const Filter = ({ onClick }) => {
    return (
        <div onClick={onClick} style={{ cursor: 'pointer' }}>
            <svg id="filter" fill="white" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="M4.22657 2C2.50087 2 1.58526 4.03892 2.73175 5.32873L8.99972 12.3802V19C8.99972 19.3788 9.21373 19.725 9.55251 19.8944L13.5525 21.8944C13.8625 22.0494 14.2306 22.0329 14.5255 21.8507C14.8203 21.6684 14.9997 21.3466 14.9997 21V12.3802L21.2677 5.32873C22.4142 4.03893 21.4986 2 19.7729 2H4.22657Z" fill="white"/>
            </svg>
        </div>
    );
}

export default Filter;'use client';
import React from 'react';

const Calendar = () => {
    return (
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 24 24" fill="none">
                <path d="M3 9H21M7 3V5M17 3V5M6 13H8M6 17H8M11 13H13M11 17H13M16 13H18M16 17H18M6.2 21H17.8C18.9201 21 19.4802 21 19.908 20.782C20.2843 20.5903 20.5903 20.2843 20.782 19.908C21 19.4802 21 18.9201 21 17.8V8.2C21 7.07989 21 6.51984 20.782 6.09202C20.5903 5.71569 20.2843 5.40973 19.908 5.21799C19.4802 5 18.9201 5 17.8 5H6.2C5.0799 5 4.51984 5 4.09202 5.21799C3.71569 5.40973 3.40973 5.71569 3.21799 6.09202C3 6.51984 3 7.07989 3 8.2V17.8C3 18.9201 3 19.4802 3.21799 19.908C3.40973 20.2843 3.71569 20.5903 4.09202 20.782C4.51984 21 5.07989 21 6.2 21Z" stroke="rgba(155, 82, 95, 1)" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
        </div>
    );
}

export default Calendar;'use client'

const Pie = () => {
    return (
        <div>
            <svg id="pie" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path d="m0 11.981c.004-6.369 4.965-11.578 11.233-11.979l.035-.002v11.981c0 .139.038.269.105.379l-.002-.003 5.989 10.378c-1.562.797-3.406 1.264-5.36 1.264-6.627 0-12-5.373-12-12 0-.006 0-.012 0-.018v.001zm13.318.752h10.682c-.244 3.867-2.286 7.211-5.291 9.231l-.043.027zm-.548-1.503v-11.23c6.04.388 10.842 5.19 11.229 11.194l.002.035z"/>
            </svg>
        </div>
    )
}

export default Pie;'use client'

import React from "react";

const Brick = () => {
    return (
        <div>
            <svg id="brick" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
                <path d="M7 1H1V5H7V1Z M7 7H1V15H7V7Z M9 1H15V9H9V1Z M15 11H9V15H15V11Z" />
            </svg>
        </div>
    );
};

export default Brick;
import React from 'react';

function CloseButton({ onClick, ariaLabel = "Close" }) {
  return (
    <button
      type="button"
      onClick={onClick}
      aria-label={ariaLabel}
      style={{
        position: 'relative',
        width: '30px',
        height: '30px',
        border: '1px solid #9B525F', // Updated border
        borderRadius: '4px',
        cursor: 'pointer',
        background: 'transparent', // Transparent background
      }}
    >
      <span
        style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          fontSize: '20px',
          lineHeight: '1',
          color: '#9B525F'
        }}
      >
        X
      </span>
    </button>
  );
}

export default CloseButton;
'use client'

const Gear = () => {
    return (
        <svg id="gear" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <path fillRule="evenodd" clipRule="evenodd" d="M12.7848 0.449982C13.8239 0.449982 14.7167 1.16546 14.9122 2.15495L14.9991 2.59495C15.3408 4.32442 17.1859 5.35722 18.9016 4.7794L19.3383 4.63233C20.3199 4.30175 21.4054 4.69358 21.9249 5.56605L22.7097 6.88386C23.2293 7.75636 23.0365 8.86366 22.2504 9.52253L21.9008 9.81555C20.5267 10.9672 20.5267 13.0328 21.9008 14.1844L22.2504 14.4774C23.0365 15.1363 23.2293 16.2436 22.7097 17.1161L21.925 18.4339C21.4054 19.3064 20.3199 19.6982 19.3382 19.3676L18.9017 19.2205C17.1859 18.6426 15.3408 19.6754 14.9991 21.405L14.9122 21.845C14.7167 22.8345 13.8239 23.55 12.7848 23.55H11.2152C10.1761 23.55 9.28331 22.8345 9.08781 21.8451L9.00082 21.4048C8.65909 19.6754 6.81395 18.6426 5.09822 19.2205L4.66179 19.3675C3.68016 19.6982 2.59465 19.3063 2.07505 18.4338L1.2903 17.1161C0.770719 16.2436 0.963446 15.1363 1.74956 14.4774L2.09922 14.1844C3.47324 13.0327 3.47324 10.9672 2.09922 9.8156L1.74956 9.52254C0.963446 8.86366 0.77072 7.75638 1.2903 6.8839L2.07508 5.56608C2.59466 4.69359 3.68014 4.30176 4.66176 4.63236L5.09831 4.77939C6.81401 5.35722 8.65909 4.32449 9.00082 2.59506L9.0878 2.15487C9.28331 1.16542 10.176 0.449982 11.2152 0.449982H12.7848ZM12 15.3C13.8225 15.3 15.3 13.8225 15.3 12C15.3 10.1774 13.8225 8.69998 12 8.69998C10.1774 8.69998 8.69997 10.1774 8.69997 12C8.69997 13.8225 10.1774 15.3 12 15.3Z" fill="white"/>
        </svg>
    )
}

export default Gear;'use client';
import React from 'react';

const ArrowRight = ({ onClick, ariaLabel = "Next" }) => {
  return (
    <button 
      type="button"
      onClick={onClick}
      aria-label={ariaLabel}
      style={{
        width: '30px',
        height: '30px',
        border: '1px solid #9B525F',
        borderRadius: '4px',
        background: 'transparent',
        cursor: 'pointer',
        padding: 0,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}
    >
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" className="main-grid-item-icon" fill="none" stroke="#9B525F" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2">
        <polyline points="9 18 15 12 9 6" />
    </svg>
    </button>
  );
};

export default ArrowRight;
'use client';
import React from 'react';

const User = () => {
    return (
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" className="main-grid-item-icon" fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                <circle cx="12" cy="7" r="4" />
            </svg>
        </div>
    );
}

export default User;'use client';
import React from 'react';

const Reset = () => {
    return (
        <div>
            <svg viewBox="0 0 24 24" className="reset-icon">
                <path d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
        </div>
    );
}

export default Reset;/**
 * @fileoverview Contains layout and logic for the login page with a custom clerk flow.
 * 
 * @file login/page.jsx
 * @date 16 February, 2025
 * @authors Ari Goshtasby & Shayne Sidman
 *  
 */

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useSignIn, useAuth } from "@clerk/nextjs";
import Eyecon from "../components/Eyecon";
import EyeconOff from "../components/EyeconOff";
import Checkbox from "../components/Checkbox";
import Image from "next/image";
import "../app.css";

export default function Signin() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [type, setType] = useState("password");
  const [eyeColor, setEyeColor] = useState("#9B525F");
  const [error, setError] = useState("");
  const [errorBG, setErrorBG] = useState("#FFFFFF");
  const [errorBorder, setErrorBorder] = useState("#9B525F");
  const [loginAttempts, setLoginAttempts] = useState(0);
  const [rememberMe, setRememberMe] = useState(false);

  const { isLoaded, signIn, setActive } = useSignIn();
  const { isSignedIn } = useAuth();
  const router = useRouter();

  useEffect(() => {
    const savedEmail = localStorage.getItem("rememberedEmail");
    const savedPassword = localStorage.getItem("rememberedPassword");

    if (savedEmail && savedPassword) {
      setEmail(savedEmail);
      setPassword(savedPassword);
      setRememberMe(true);
    }
  }, []);

  useEffect(() => {
    if (isSignedIn) {
      router.push('/dashboard');
    }
  }, [isSignedIn, router]);

  const handlePassToggle = () => {
    setType((prev) => (prev === "password" ? "text" : "password"));
  };

  const resetFields = () => {
    setEmail("");
    setPassword("");
  };

  const handleLoginError = () => {
    setErrorBG("rgba(255, 44, 44, 0.2)");
    setErrorBorder("red");
    setEyeColor(eyeColor === "#9B525F" ? "red" : "#9B525F");
  };

  const typeEmail = (e) => {
    setEmail(e.target.value);
    setErrorBG("#FFFFFF");
    setErrorBorder("#9B525F");
    setError("");
    setEyeColor("#9B525F");
  };

  const typePassword = (e) => {
    setPassword(e.target.value);
    setErrorBG("#FFFFFF");
    setErrorBorder("#9B525F");
    setError("");
    setEyeColor("#9B525F");
  };

  const onButtonClick = () => {
    setLoginAttempts(loginAttempts + 1);
    setError("");

    if (loginAttempts >= 5) {
      router.push("/");
    }

    if (!email) {
      setError("Please enter your email.");
      handleLoginError();
      resetFields();
      return false;
    }

    if (!/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
      setError("Please enter a valid email.");
      handleLoginError();
      resetFields();
      return false;
    }

    if (!password) {
      setError("Please enter a password.");
      handleLoginError();
      resetFields();
      return false;
    }

    return true;
  };

  const signInWithEmail = async () => {
    if (!onButtonClick()) return;
  
    console.log("Attempting sign in with:", email, password);
    console.log("Remember Me checked:", rememberMe);
  
    try {
      const result = await signIn.create({
        identifier: email,
        password,
      });
      
      if (result.status === "complete") {
        console.log("Login successful. Storing to localStorage...");
  
        if (rememberMe) {
          localStorage.setItem("rememberedEmail", email);
          localStorage.setItem("rememberedPassword", password);
          console.log("✅ Saved email and password to localStorage.");
        } else {
          localStorage.removeItem("rememberedEmail");
          localStorage.removeItem("rememberedPassword");
          console.log("🧹 Cleared localStorage.");
        }
  
        await setActive({ session: result.createdSessionId });
        router.push("/login_confirmed");
      } else {
        console.log("Sign in not complete yet:", result);
      }
    } catch (err) {
      setError("Something went wrong. Please try again.");
      handleLoginError();
      resetFields();
    }
  };
  

  return (
    <div className="login-bg">
      <div className="mainContainer">
        <div className="titleContainer">
          <div className="SMLogo sm-logo-large">
            <Image src="/SM_LOGO.svg" alt="No image found" fill />
          </div>
          <div className="clothing-database">CLOTHING DATABASE</div>
        </div>
        <div className="inputContainer">
          <label
            className="errorLabel"
            style={{
              backgroundColor: error ? "rgba(255, 44, 44, 0.2)" : "#FFFFFF",
              minHeight: "24px",
              color: error ? "red" : "#FFFFFF",
              padding: "4px 8px",
              display: "block",
              transition: "all 0.2s ease",
            }}
          >
            {error || ""}
          </label>

          <input
            value={email}
            name="email"
            placeholder="Email"
            onChange={typeEmail}
            className="inputBox"
            style={{ borderColor: errorBorder }}
          />
        </div>
        <div className="inputContainer password">
          <input
            value={password}
            name="password"
            type={type}
            placeholder="Password"
            onChange={typePassword}
            className="inputBox"
            style={{ borderColor: errorBorder }}
            autoComplete="current-password"
          />
          <span className={"eyecon"} onClick={handlePassToggle}>
            {type === "password" ? (
              <EyeconOff color={eyeColor} />
            ) : (
              <Eyecon color={eyeColor} />
            )}
          </span>
        </div>
        <div className="remember-pwd">
          <Checkbox
            className="check"
            label="Remember me"
            checked={rememberMe}
            onChange={() => setRememberMe((prev) => !prev)}
          />
          <button
            className="textButton"
            onClick={() => router.push("/reset_password")}
          >
            <strong>
              <p className="tiny">Forgot password?</p>
            </strong>
          </button>
        </div>
        <div className="inputContainer login-button">
          <input
            className="inputButton"
            type="button"
            onClick={signInWithEmail}
            value="Login"
          />
        </div>
        <div className="create-account">
          <div>Don&apos;t have an account?</div>
          <button
            className="textButton"
            onClick={() => router.push("/signup")}
          >
            <strong>Create an account</strong>
          </button>
        </div>
      </div>
    </div>
  );
}
import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'

const isProtectedRoute = createRouteMatcher([
  '/dashboard/:path*',
  '/settings/:path*', 
  '/inventory/:path*', 
  '/add/:path*', 
  '/borrowers/:path*', 
  '/edit/:path*',
])

export default clerkMiddleware(async (auth, req) => {
  if (isProtectedRoute(req)) await auth.protect()
})

export const config = {
  matcher: [
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    '/(api|trpc)(.*)',
  ],
}